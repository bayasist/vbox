
// ##### BEGINFILE "Holder.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * Holder.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;

public class Holder<T>
{
    public T value;

    public Holder()
    {
    }
    public Holder(T value)
    {
        this.value = value;
    }
}

// ##### ENDFILE "Holder.java"


// ##### BEGINFILE "IUnknown.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IUnknown.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3.xpcom;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;

public class IUnknown
{
    private Object obj;
    public IUnknown(Object obj)
    {
        this.obj = obj;
    }

    public Object getWrapped()
    {
        return this.obj;
    }

    public void setWrapped(Object obj)
    {
        this.obj = obj;
    }
}

// ##### ENDFILE "IUnknown.java"


// ##### BEGINFILE "Helper.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * Helper.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3.xpcom;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;


import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.lang.reflect.InvocationTargetException;

public class Helper
{
    public static List<Short> wrap(byte[] values)
    {
        if (values == null)
            return null;

        List<Short> ret = new ArrayList<Short>(values.length);
        for (short v : values)
        {
            ret.add(v);
        }
        return ret;
    }

    public static List<Short> wrap(short[] values)
    {
        if (values == null)
            return null;

        List<Short> ret = new ArrayList<Short>(values.length);
        for (short v : values)
        {
            ret.add(v);
        }
        return ret;
    }

    public static List<Integer> wrap(int[] values)
    {
        if (values == null)
            return null;

        List<Integer> ret = new ArrayList<Integer>(values.length);
        for (int v : values)
        {
            ret.add(v);
        }
        return ret;
    }

    public static List<Long> wrap(long[] values)
    {
        if (values == null)
            return null;

        List<Long> ret = new ArrayList<Long>(values.length);
        for (long v : values)
        {
            ret.add(v);
        }
        return ret;
    }

    public static List<Boolean> wrap(boolean[] values)
    {
        if (values == null)
            return null;

        List<Boolean> ret = new ArrayList<Boolean>(values.length);
        for (boolean v: values)
        {
            ret.add(v);
        }
        return ret;
    }

    public static List<String> wrap(String[] values)
    {
        if (values == null)
            return null;

        List<String> ret = new ArrayList<String>(values.length);
        for (String v : values)
        {
            ret.add(v);
        }
        return ret;
    }

    public static <T> List<T> wrap(Class<T> wrapperClass, T[] values)
    {
        if (values == null)
            return null;

        List<T> ret = new ArrayList<T>(values.length);
        for (T v : values)
        {
            ret.add(v);
        }
        return ret;
    }

    @SuppressWarnings( "unchecked")
    public static <T> List<T> wrapEnum(Class<T> wrapperClass, long values[])
    {
        try
        {
            if (values == null)
                return null;
            //// This code is questionable, as it invokes a private constructor
            //// (all enums only have default constructors), and we don't really
            //// know what to pass as the name, and the ordinal may or may not
            //// be sensible, especially if the long was abused as a bitset.
            //Constructor<T> c = wrapperClass.getDeclaredConstructor(String.class, int.class, int.class);
            //c.setAccessible(true); // make it callable
            //List<T> ret = new ArrayList<T>(values.length);
            //for (long v : values)
            //{
            //    T convEnum = c.newInstance("unknown", (int)v, (int)v);
            //    ret.add(convEnum);
            //}

            // Alternative implementation: use the fromValue method, which is
            // what the code handling single enums will do. I see no reason to
            // use the above very ugly hack if there are better alternatives,
            // which as a bonus complain about unknown values. This variant is
            // slower, but also orders of magnitude safer.
            java.lang.reflect.Method fromValue = wrapperClass.getMethod("fromValue", long.class);
            List<T> ret = new ArrayList<T>(values.length);
            for (long v : values)
            {
                T convEnum = (T)fromValue.invoke(null, v);
                ret.add(convEnum);
            }
            return ret;
        }
        catch (NoSuchMethodException e)
        {
            throw new AssertionError(e);
        }
        //catch (InstantiationException e)
        //{
        //    throw new AssertionError(e);
        //}
        catch (IllegalAccessException e)
        {
            throw new AssertionError(e);
        }
        catch (InvocationTargetException e)
        {
            throw new AssertionError(e);
        }
    }
    public static short[] unwrapUShort(List<Short> values)
    {
        if (values == null)
            return null;

        short[] ret = new short[values.size()];
        int i = 0;
        for (short l : values)
        {
            ret[i++] = l;
        }
        return ret;
    }

    public static int[] unwrapInteger(List<Integer> values)
    {
        if (values == null)
            return null;

        int[] ret = new int[values.size()];
        int i = 0;
        for (int l : values)
        {
            ret[i++] = l;
        }
        return ret;
    }

    public static long[] unwrapULong(List<Long> values)
    {
        if (values == null)
            return null;

        long[] ret = new long[values.size()];
        int i = 0;
        for (long l : values)
        {
            ret[i++] = l;
        }
        return ret;
    }

    public static boolean[] unwrapBoolean(List<Boolean> values)
    {
        if (values == null)
            return null;

        boolean[] ret = new boolean[values.size()];
        int i = 0;
        for (boolean l : values)
        {
            ret[i++] = l;
        }
        return ret;
    }

    public static String[] unwrapStr(List<String> values)
    {
        if (values == null)
            return null;

        String[] ret = new String[values.size()];
        int i = 0;
        for (String l : values)
        {
            ret[i++] = l;
        }
        return ret;
    }

    public static <T extends Enum <T>> long[] unwrapEnum(Class<T> enumClass, List<T> values)
    {
        if (values == null)
            return null;

        long result[] = new long[values.size()];
        try
        {
            java.lang.reflect.Method valueM = enumClass.getMethod("value");
            int i = 0;
            for (T v : values)
            {
                result[i++] = (Integer)valueM.invoke(v);
            }
            return result;
        }
        catch (NoSuchMethodException e)
        {
            throw new AssertionError(e);
        }
        catch(SecurityException e)
        {
            throw new AssertionError(e);
        }
        catch (IllegalAccessException e)
        {
            throw new AssertionError(e);
        }
        catch (IllegalArgumentException e)
        {
            throw new AssertionError(e);
        }
        catch (InvocationTargetException e)
        {
            throw new AssertionError(e);
        }
    }

    public static <T1, T2> List<T1> wrap2(Class<T1> wrapperClass1, Class<T2> wrapperClass2, T2[] values)
    {
        try
        {
            if (values == null)
                return null;

            Constructor<T1> c = wrapperClass1.getConstructor(wrapperClass2);
            List<T1> ret = new ArrayList<T1>(values.length);
            for (T2 v : values)
            {
                ret.add(c.newInstance(v));
            }
            return ret;
        }
        catch (NoSuchMethodException e)
        {
            throw new AssertionError(e);
        }
        catch (InstantiationException e)
        {
            throw new AssertionError(e);
        }
        catch (IllegalAccessException e)
        {
            throw new AssertionError(e);
        }
        catch (InvocationTargetException e)
        {
            throw new AssertionError(e);
        }
    }

    @SuppressWarnings( "unchecked")
    public static <T> T[] unwrap(Class<T> wrapperClass, List<T> values)
    {
        if (values == null)
            return null;
        if (values.size() == 0)
            return null;
        return (T[])values.toArray((T[])Array.newInstance(wrapperClass, values.size()));
    }

    @SuppressWarnings( "unchecked" )
    public static <T> T queryInterface(Object obj, String uuid, Class<T> iface)
    {
        return (T)queryInterface(obj, uuid);
    }

    public static Object queryInterface(Object obj, String uuid)
    {
        try
        {
            /* Kind of ugly, but does the job of casting */
            org.mozilla.xpcom.Mozilla moz = org.mozilla.xpcom.Mozilla.getInstance();
            long xpobj = moz.wrapJavaObject(obj, uuid);
            return moz.wrapXPCOMObject(xpobj, uuid);
        }
        catch (Exception e)
        {
            return null;
        }
    }

    @SuppressWarnings("unchecked")
    public static <T1 extends IUnknown, T2> T2[] unwrap2(Class<T1> wrapperClass1, Class<T2> wrapperClass2, List<T1> values)
    {
        if (values == null)
            return null;

        T2 ret[] = (T2[])Array.newInstance(wrapperClass2, values.size());
        int i = 0;
        for (T1 obj : values)
        {
            ret[i++] = (T2)obj.getWrapped();
        }
        return ret;
    }
}

// ##### ENDFILE "Helper.java"


// ##### BEGINFILE "VBoxException.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * VBoxException.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;

import org.mozilla.xpcom.*;

public class VBoxException extends RuntimeException
{
    private int resultCode;
    private IVirtualBoxErrorInfo errorInfo;

    public VBoxException(String message)
    {
        super(message);
        resultCode = -1;
        errorInfo = null;
    }

    public VBoxException(String message, Throwable cause)
    {
        super(message, cause);
        if (cause instanceof org.mozilla.xpcom.XPCOMException)
        {
            resultCode = (int)((org.mozilla.xpcom.XPCOMException)cause).errorcode;
            try
            {
                Mozilla mozilla = Mozilla.getInstance();
                nsIServiceManager sm = mozilla.getServiceManager();
                nsIExceptionService es = (nsIExceptionService)sm.getServiceByContractID("@mozilla.org/exceptionservice;1", nsIExceptionService.NS_IEXCEPTIONSERVICE_IID);
                nsIExceptionManager em = es.getCurrentExceptionManager();
                nsIException ex = em.getCurrentException();
                errorInfo = new IVirtualBoxErrorInfo((org.mozilla.interfaces.IVirtualBoxErrorInfo)ex.queryInterface(org.mozilla.interfaces.IVirtualBoxErrorInfo.IVIRTUALBOXERRORINFO_IID));
            }
            catch (NullPointerException e)
            {
                e.printStackTrace();
                // nothing we can do
                errorInfo = null;
            }
        }
        else
            resultCode = -1;
    }

    public int getResultCode()
    {
        return resultCode;
    }

    public IVirtualBoxErrorInfo getVirtualBoxErrorInfo()
    {
        return errorInfo;
    }
}

// ##### ENDFILE "VBoxException.java"


// ##### BEGINFILE "VirtualBoxManager.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * VirtualBoxManager.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;


import java.io.File;

import org.mozilla.xpcom.*;
import org.mozilla.interfaces.*;

public class VirtualBoxManager
{
    private Mozilla mozilla;
    private IVirtualBox vbox;
    private nsIComponentManager componentManager;

    private VirtualBoxManager(Mozilla mozilla)
    {
        this.mozilla = mozilla;
        this.componentManager = mozilla.getComponentManager();
        this.vbox = new IVirtualBox((org.mozilla.interfaces.IVirtualBox) this.componentManager
                    .createInstanceByContractID("@virtualbox.org/VirtualBox;1",
                                                null,
                                                org.mozilla.interfaces.IVirtualBox.IVIRTUALBOX_IID));
    }

    public void connect(String url, String username, String passwd)
    {
        throw new VBoxException("Connect doesn't make sense for local bindings");
    }

    public void disconnect()
    {
        throw new VBoxException("Disconnect doesn't make sense for local bindings");
    }

    public static void initPerThread()
    {
    }

    public static void deinitPerThread()
    {
    }

    public IVirtualBox getVBox()
    {
        return this.vbox;
    }

    public ISession getSessionObject()
    {
        return new ISession((org.mozilla.interfaces.ISession) componentManager
                .createInstanceByContractID("@virtualbox.org/Session;1", null,
                                            org.mozilla.interfaces.ISession.ISESSION_IID));
    }

    public ISession openMachineSession(IMachine m) throws Exception
    {
        ISession s = getSessionObject();
        m.lockMachine(s, LockType.Shared);
        return s;
    }

    public void closeMachineSession(ISession s)
    {
          if (s != null)
            s.unlockMachine();
    }

    private static boolean hasInstance = false;
    private static boolean isMozillaInited = false;

    public static synchronized VirtualBoxManager createInstance(String home)
    {
        if (hasInstance)
            throw new VBoxException("only one instance of VirtualBoxManager at a time allowed");
        if (home == null || home.equals(""))
            home = System.getProperty("vbox.home");

        if (home == null)
            throw new VBoxException("vbox.home Java property must be defined to use XPCOM bridge");

        File grePath = new File(home);

        Mozilla mozilla = Mozilla.getInstance();
        if (!isMozillaInited)
        {
            mozilla.initialize(grePath);
            try
            {
                mozilla.initXPCOM(grePath, null);
                isMozillaInited = true;
            }
            catch (Exception e)
            {
                e.printStackTrace();
                return null;
            }
        }

        hasInstance = true;

        return new VirtualBoxManager(mozilla);
    }

    public IEventListener createListener(Object sink)
    {
        return new IEventListener(new EventListenerImpl(sink));
    }

    public void cleanup()
    {
        deinitPerThread();
        // cleanup, we don't do that, as XPCOM bridge doesn't cleanly
        // shuts down, so we prefer to avoid native shutdown
        // mozilla.shutdownXPCOM(null);
        mozilla = null;
        hasInstance = false;
    }

    public void waitForEvents(long tmo)
    {
        mozilla.waitForEvents(tmo);
    }
}

// ##### ENDFILE "VirtualBoxManager.java"


// ##### BEGINFILE "EventListenerImpl.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * EventListenerImpl.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;

import org.mozilla.interfaces.*;

public class EventListenerImpl extends nsISupportsBase implements org.mozilla.interfaces.IEventListener
{
    private Object obj;
    private java.lang.reflect.Method handleEvent;
    EventListenerImpl(Object obj)
    {
        this.obj = obj;
        try
        {
            this.handleEvent = obj.getClass().getMethod("handleEvent", IEvent.class);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }
    public void handleEvent(org.mozilla.interfaces.IEvent ev)
    {
        try
        {
            if (obj != null && handleEvent != null)
                handleEvent.invoke(obj, ev != null ? new IEvent(ev) : null);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }
}
// ##### ENDFILE "EventListenerImpl.java"


// ##### BEGINFILE "VBoxObjectBase.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * VBoxObjectBase.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;

abstract class nsISupportsBase implements org.mozilla.interfaces.nsISupports
{
    public org.mozilla.interfaces.nsISupports queryInterface(String iid)
    {
        return org.mozilla.xpcom.Mozilla.queryInterface(this, iid);
    }
}


// ##### ENDFILE "VBoxObjectBase.java"


// ##### BEGINFILE "SettingsVersion.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * SettingsVersion.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum SettingsVersion
{
    Null(0),
    v1_0(1),
    v1_1(2),
    v1_2(3),
    v1_3pre(4),
    v1_3(5),
    v1_4(6),
    v1_5(7),
    v1_6(8),
    v1_7(9),
    v1_8(10),
    v1_9(11),
    v1_10(12),
    v1_11(13),
    v1_12(14),
    v1_13(15),
    v1_14(16),
    Future(99999);

    private final int value;

    SettingsVersion(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static SettingsVersion fromValue(long v)
    {
        for (SettingsVersion c: SettingsVersion.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static SettingsVersion fromValue(String v)
    {
        return valueOf(SettingsVersion.class, v);
    }
}


// ##### ENDFILE "SettingsVersion.java"


// ##### BEGINFILE "AccessMode.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * AccessMode.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum AccessMode
{
    ReadOnly(1),
    ReadWrite(2);

    private final int value;

    AccessMode(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static AccessMode fromValue(long v)
    {
        for (AccessMode c: AccessMode.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static AccessMode fromValue(String v)
    {
        return valueOf(AccessMode.class, v);
    }
}


// ##### ENDFILE "AccessMode.java"


// ##### BEGINFILE "MachineState.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * MachineState.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum MachineState
{
    Null(0),
    PoweredOff(1),
    Saved(2),
    Teleported(3),
    Aborted(4),
    Running(5),
    Paused(6),
    Stuck(7),
    Teleporting(8),
    LiveSnapshotting(9),
    Starting(10),
    Stopping(11),
    Saving(12),
    Restoring(13),
    TeleportingPausedVM(14),
    TeleportingIn(15),
    FaultTolerantSyncing(16),
    DeletingSnapshotOnline(17),
    DeletingSnapshotPaused(18),
    RestoringSnapshot(19),
    DeletingSnapshot(20),
    SettingUp(21),
    FirstOnline(5),
    LastOnline(18),
    FirstTransient(8),
    LastTransient(21);

    private final int value;

    MachineState(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static MachineState fromValue(long v)
    {
        for (MachineState c: MachineState.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static MachineState fromValue(String v)
    {
        return valueOf(MachineState.class, v);
    }
}


// ##### ENDFILE "MachineState.java"


// ##### BEGINFILE "SessionState.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * SessionState.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum SessionState
{
    Null(0),
    Unlocked(1),
    Locked(2),
    Spawning(3),
    Unlocking(4);

    private final int value;

    SessionState(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static SessionState fromValue(long v)
    {
        for (SessionState c: SessionState.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static SessionState fromValue(String v)
    {
        return valueOf(SessionState.class, v);
    }
}


// ##### ENDFILE "SessionState.java"


// ##### BEGINFILE "CPUPropertyType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * CPUPropertyType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum CPUPropertyType
{
    Null(0),
    PAE(1),
    Synthetic(2),
    LongMode(3),
    TripleFaultReset(4);

    private final int value;

    CPUPropertyType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static CPUPropertyType fromValue(long v)
    {
        for (CPUPropertyType c: CPUPropertyType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static CPUPropertyType fromValue(String v)
    {
        return valueOf(CPUPropertyType.class, v);
    }
}


// ##### ENDFILE "CPUPropertyType.java"


// ##### BEGINFILE "HWVirtExPropertyType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * HWVirtExPropertyType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum HWVirtExPropertyType
{
    Null(0),
    Enabled(1),
    VPID(2),
    NestedPaging(3),
    UnrestrictedExecution(4),
    LargePages(5),
    Force(6);

    private final int value;

    HWVirtExPropertyType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static HWVirtExPropertyType fromValue(long v)
    {
        for (HWVirtExPropertyType c: HWVirtExPropertyType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static HWVirtExPropertyType fromValue(String v)
    {
        return valueOf(HWVirtExPropertyType.class, v);
    }
}


// ##### ENDFILE "HWVirtExPropertyType.java"


// ##### BEGINFILE "FaultToleranceState.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * FaultToleranceState.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum FaultToleranceState
{
    Inactive(1),
    Master(2),
    Standby(3);

    private final int value;

    FaultToleranceState(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static FaultToleranceState fromValue(long v)
    {
        for (FaultToleranceState c: FaultToleranceState.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static FaultToleranceState fromValue(String v)
    {
        return valueOf(FaultToleranceState.class, v);
    }
}


// ##### ENDFILE "FaultToleranceState.java"


// ##### BEGINFILE "LockType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * LockType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum LockType
{
    Write(2),
    Shared(1),
    VM(3);

    private final int value;

    LockType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static LockType fromValue(long v)
    {
        for (LockType c: LockType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static LockType fromValue(String v)
    {
        return valueOf(LockType.class, v);
    }
}


// ##### ENDFILE "LockType.java"


// ##### BEGINFILE "SessionType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * SessionType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum SessionType
{
    Null(0),
    WriteLock(1),
    Remote(2),
    Shared(3);

    private final int value;

    SessionType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static SessionType fromValue(long v)
    {
        for (SessionType c: SessionType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static SessionType fromValue(String v)
    {
        return valueOf(SessionType.class, v);
    }
}


// ##### ENDFILE "SessionType.java"


// ##### BEGINFILE "DeviceType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * DeviceType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum DeviceType
{
    Null(0),
    Floppy(1),
    DVD(2),
    HardDisk(3),
    Network(4),
    USB(5),
    SharedFolder(6);

    private final int value;

    DeviceType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static DeviceType fromValue(long v)
    {
        for (DeviceType c: DeviceType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static DeviceType fromValue(String v)
    {
        return valueOf(DeviceType.class, v);
    }
}


// ##### ENDFILE "DeviceType.java"


// ##### BEGINFILE "DeviceActivity.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * DeviceActivity.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum DeviceActivity
{
    Null(0),
    Idle(1),
    Reading(2),
    Writing(3);

    private final int value;

    DeviceActivity(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static DeviceActivity fromValue(long v)
    {
        for (DeviceActivity c: DeviceActivity.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static DeviceActivity fromValue(String v)
    {
        return valueOf(DeviceActivity.class, v);
    }
}


// ##### ENDFILE "DeviceActivity.java"


// ##### BEGINFILE "ClipboardMode.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ClipboardMode.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum ClipboardMode
{
    Disabled(0),
    HostToGuest(1),
    GuestToHost(2),
    Bidirectional(3);

    private final int value;

    ClipboardMode(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static ClipboardMode fromValue(long v)
    {
        for (ClipboardMode c: ClipboardMode.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static ClipboardMode fromValue(String v)
    {
        return valueOf(ClipboardMode.class, v);
    }
}


// ##### ENDFILE "ClipboardMode.java"


// ##### BEGINFILE "DragAndDropMode.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * DragAndDropMode.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum DragAndDropMode
{
    Disabled(0),
    HostToGuest(1),
    GuestToHost(2),
    Bidirectional(3);

    private final int value;

    DragAndDropMode(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static DragAndDropMode fromValue(long v)
    {
        for (DragAndDropMode c: DragAndDropMode.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static DragAndDropMode fromValue(String v)
    {
        return valueOf(DragAndDropMode.class, v);
    }
}


// ##### ENDFILE "DragAndDropMode.java"


// ##### BEGINFILE "Scope.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * Scope.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum Scope
{
    Global(0),
    Machine(1),
    Session(2);

    private final int value;

    Scope(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static Scope fromValue(long v)
    {
        for (Scope c: Scope.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static Scope fromValue(String v)
    {
        return valueOf(Scope.class, v);
    }
}


// ##### ENDFILE "Scope.java"


// ##### BEGINFILE "BIOSBootMenuMode.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * BIOSBootMenuMode.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum BIOSBootMenuMode
{
    Disabled(0),
    MenuOnly(1),
    MessageAndMenu(2);

    private final int value;

    BIOSBootMenuMode(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static BIOSBootMenuMode fromValue(long v)
    {
        for (BIOSBootMenuMode c: BIOSBootMenuMode.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static BIOSBootMenuMode fromValue(String v)
    {
        return valueOf(BIOSBootMenuMode.class, v);
    }
}


// ##### ENDFILE "BIOSBootMenuMode.java"


// ##### BEGINFILE "ProcessorFeature.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ProcessorFeature.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum ProcessorFeature
{
    HWVirtEx(0),
    PAE(1),
    LongMode(2),
    NestedPaging(3);

    private final int value;

    ProcessorFeature(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static ProcessorFeature fromValue(long v)
    {
        for (ProcessorFeature c: ProcessorFeature.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static ProcessorFeature fromValue(String v)
    {
        return valueOf(ProcessorFeature.class, v);
    }
}


// ##### ENDFILE "ProcessorFeature.java"


// ##### BEGINFILE "FirmwareType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * FirmwareType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum FirmwareType
{
    BIOS(1),
    EFI(2),
    EFI32(3),
    EFI64(4),
    EFIDUAL(5);

    private final int value;

    FirmwareType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static FirmwareType fromValue(long v)
    {
        for (FirmwareType c: FirmwareType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static FirmwareType fromValue(String v)
    {
        return valueOf(FirmwareType.class, v);
    }
}


// ##### ENDFILE "FirmwareType.java"


// ##### BEGINFILE "PointingHIDType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * PointingHIDType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum PointingHIDType
{
    None(1),
    PS2Mouse(2),
    USBMouse(3),
    USBTablet(4),
    ComboMouse(5),
    USBMultiTouch(6);

    private final int value;

    PointingHIDType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static PointingHIDType fromValue(long v)
    {
        for (PointingHIDType c: PointingHIDType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static PointingHIDType fromValue(String v)
    {
        return valueOf(PointingHIDType.class, v);
    }
}


// ##### ENDFILE "PointingHIDType.java"


// ##### BEGINFILE "KeyboardHIDType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * KeyboardHIDType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum KeyboardHIDType
{
    None(1),
    PS2Keyboard(2),
    USBKeyboard(3),
    ComboKeyboard(4);

    private final int value;

    KeyboardHIDType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static KeyboardHIDType fromValue(long v)
    {
        for (KeyboardHIDType c: KeyboardHIDType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static KeyboardHIDType fromValue(String v)
    {
        return valueOf(KeyboardHIDType.class, v);
    }
}


// ##### ENDFILE "KeyboardHIDType.java"


// ##### BEGINFILE "DhcpOpt.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * DhcpOpt.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum DhcpOpt
{
    SubnetMask(1),
    TimeOffset(2),
    Router(3),
    TimeServer(4),
    NameServer(5),
    DomainNameServer(6),
    LogServer(7),
    Cookie(8),
    LPRServer(9),
    ImpressServer(10),
    ResourseLocationServer(11),
    HostName(12),
    BootFileSize(13),
    MeritDumpFile(14),
    DomainName(15),
    SwapServer(16),
    RootPath(17),
    ExtensionPath(18),
    IPForwardingEnableDisable(19),
    NonLocalSourceRoutingEnableDisable(20),
    PolicyFilter(21),
    MaximumDatagramReassemblySize(22),
    DefaultIPTime2Live(23),
    PathMTUAgingTimeout(24),
    IPLayerParametersPerInterface(25),
    InterfaceMTU(26),
    AllSubnetsAreLocal(27),
    BroadcastAddress(28),
    PerformMaskDiscovery(29),
    MaskSupplier(30),
    PerformRouteDiscovery(31),
    RouterSolicitationAddress(32),
    StaticRoute(33),
    TrailerEncapsulation(34),
    ARPCacheTimeout(35),
    EthernetEncapsulation(36),
    TCPDefaultTTL(37),
    TCPKeepAliveInterval(38),
    TCPKeepAliveGarbage(39),
    NetworkInformationServiceDomain(40),
    NetworkInformationServiceServers(41),
    NetworkTimeProtocolServers(42),
    VendorSpecificInformation(43),
    Option_44(44),
    Option_45(45),
    Option_46(46),
    Option_47(47),
    Option_48(48),
    Option_49(49),
    IPAddressLeaseTime(51),
    Option_64(64),
    Option_65(65),
    TFTPServerName(66),
    BootfileName(67),
    Option_68(68),
    Option_69(69),
    Option_70(70),
    Option_71(71),
    Option_72(72),
    Option_73(73),
    Option_74(74),
    Option_75(75),
    Option_119(119);

    private final int value;

    DhcpOpt(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static DhcpOpt fromValue(long v)
    {
        for (DhcpOpt c: DhcpOpt.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static DhcpOpt fromValue(String v)
    {
        return valueOf(DhcpOpt.class, v);
    }
}


// ##### ENDFILE "DhcpOpt.java"


// ##### BEGINFILE "VFSType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * VFSType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum VFSType
{
    File(1),
    Cloud(2),
    S3(3),
    WebDav(4);

    private final int value;

    VFSType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static VFSType fromValue(long v)
    {
        for (VFSType c: VFSType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static VFSType fromValue(String v)
    {
        return valueOf(VFSType.class, v);
    }
}


// ##### ENDFILE "VFSType.java"


// ##### BEGINFILE "VFSFileType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * VFSFileType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum VFSFileType
{
    Unknown(1),
    Fifo(2),
    DevChar(3),
    Directory(4),
    DevBlock(5),
    File(6),
    SymLink(7),
    Socket(8),
    WhiteOut(9);

    private final int value;

    VFSFileType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static VFSFileType fromValue(long v)
    {
        for (VFSFileType c: VFSFileType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static VFSFileType fromValue(String v)
    {
        return valueOf(VFSFileType.class, v);
    }
}


// ##### ENDFILE "VFSFileType.java"


// ##### BEGINFILE "ImportOptions.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ImportOptions.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum ImportOptions
{
    KeepAllMACs(1),
    KeepNATMACs(2);

    private final int value;

    ImportOptions(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static ImportOptions fromValue(long v)
    {
        for (ImportOptions c: ImportOptions.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static ImportOptions fromValue(String v)
    {
        return valueOf(ImportOptions.class, v);
    }
}


// ##### ENDFILE "ImportOptions.java"


// ##### BEGINFILE "ExportOptions.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ExportOptions.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum ExportOptions
{
    CreateManifest(1),
    ExportDVDImages(2),
    StripAllMACs(3),
    StripAllNonNATMACs(4);

    private final int value;

    ExportOptions(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static ExportOptions fromValue(long v)
    {
        for (ExportOptions c: ExportOptions.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static ExportOptions fromValue(String v)
    {
        return valueOf(ExportOptions.class, v);
    }
}


// ##### ENDFILE "ExportOptions.java"


// ##### BEGINFILE "VirtualSystemDescriptionType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * VirtualSystemDescriptionType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum VirtualSystemDescriptionType
{
    Ignore(1),
    OS(2),
    Name(3),
    Product(4),
    Vendor(5),
    Version(6),
    ProductUrl(7),
    VendorUrl(8),
    Description(9),
    License(10),
    Miscellaneous(11),
    CPU(12),
    Memory(13),
    HardDiskControllerIDE(14),
    HardDiskControllerSATA(15),
    HardDiskControllerSCSI(16),
    HardDiskControllerSAS(17),
    HardDiskImage(18),
    Floppy(19),
    CDROM(20),
    NetworkAdapter(21),
    USBController(22),
    SoundCard(23),
    SettingsFile(24);

    private final int value;

    VirtualSystemDescriptionType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static VirtualSystemDescriptionType fromValue(long v)
    {
        for (VirtualSystemDescriptionType c: VirtualSystemDescriptionType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static VirtualSystemDescriptionType fromValue(String v)
    {
        return valueOf(VirtualSystemDescriptionType.class, v);
    }
}


// ##### ENDFILE "VirtualSystemDescriptionType.java"


// ##### BEGINFILE "VirtualSystemDescriptionValueType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * VirtualSystemDescriptionValueType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum VirtualSystemDescriptionValueType
{
    Reference(1),
    Original(2),
    Auto(3),
    ExtraConfig(4);

    private final int value;

    VirtualSystemDescriptionValueType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static VirtualSystemDescriptionValueType fromValue(long v)
    {
        for (VirtualSystemDescriptionValueType c: VirtualSystemDescriptionValueType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static VirtualSystemDescriptionValueType fromValue(String v)
    {
        return valueOf(VirtualSystemDescriptionValueType.class, v);
    }
}


// ##### ENDFILE "VirtualSystemDescriptionValueType.java"


// ##### BEGINFILE "GraphicsControllerType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * GraphicsControllerType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum GraphicsControllerType
{
    Null(0),
    VBoxVGA(1),
    VMSVGA(2);

    private final int value;

    GraphicsControllerType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static GraphicsControllerType fromValue(long v)
    {
        for (GraphicsControllerType c: GraphicsControllerType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static GraphicsControllerType fromValue(String v)
    {
        return valueOf(GraphicsControllerType.class, v);
    }
}


// ##### ENDFILE "GraphicsControllerType.java"


// ##### BEGINFILE "CleanupMode.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * CleanupMode.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum CleanupMode
{
    UnregisterOnly(1),
    DetachAllReturnNone(2),
    DetachAllReturnHardDisksOnly(3),
    Full(4);

    private final int value;

    CleanupMode(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static CleanupMode fromValue(long v)
    {
        for (CleanupMode c: CleanupMode.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static CleanupMode fromValue(String v)
    {
        return valueOf(CleanupMode.class, v);
    }
}


// ##### ENDFILE "CleanupMode.java"


// ##### BEGINFILE "CloneMode.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * CloneMode.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum CloneMode
{
    MachineState(1),
    MachineAndChildStates(2),
    AllStates(3);

    private final int value;

    CloneMode(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static CloneMode fromValue(long v)
    {
        for (CloneMode c: CloneMode.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static CloneMode fromValue(String v)
    {
        return valueOf(CloneMode.class, v);
    }
}


// ##### ENDFILE "CloneMode.java"


// ##### BEGINFILE "CloneOptions.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * CloneOptions.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum CloneOptions
{
    Link(1),
    KeepAllMACs(2),
    KeepNATMACs(3),
    KeepDiskNames(4);

    private final int value;

    CloneOptions(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static CloneOptions fromValue(long v)
    {
        for (CloneOptions c: CloneOptions.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static CloneOptions fromValue(String v)
    {
        return valueOf(CloneOptions.class, v);
    }
}


// ##### ENDFILE "CloneOptions.java"


// ##### BEGINFILE "AutostopType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * AutostopType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum AutostopType
{
    Disabled(1),
    SaveState(2),
    PowerOff(3),
    AcpiShutdown(4);

    private final int value;

    AutostopType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static AutostopType fromValue(long v)
    {
        for (AutostopType c: AutostopType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static AutostopType fromValue(String v)
    {
        return valueOf(AutostopType.class, v);
    }
}


// ##### ENDFILE "AutostopType.java"


// ##### BEGINFILE "HostNetworkInterfaceMediumType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * HostNetworkInterfaceMediumType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum HostNetworkInterfaceMediumType
{
    Unknown(0),
    Ethernet(1),
    PPP(2),
    SLIP(3);

    private final int value;

    HostNetworkInterfaceMediumType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static HostNetworkInterfaceMediumType fromValue(long v)
    {
        for (HostNetworkInterfaceMediumType c: HostNetworkInterfaceMediumType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static HostNetworkInterfaceMediumType fromValue(String v)
    {
        return valueOf(HostNetworkInterfaceMediumType.class, v);
    }
}


// ##### ENDFILE "HostNetworkInterfaceMediumType.java"


// ##### BEGINFILE "HostNetworkInterfaceStatus.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * HostNetworkInterfaceStatus.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum HostNetworkInterfaceStatus
{
    Unknown(0),
    Up(1),
    Down(2);

    private final int value;

    HostNetworkInterfaceStatus(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static HostNetworkInterfaceStatus fromValue(long v)
    {
        for (HostNetworkInterfaceStatus c: HostNetworkInterfaceStatus.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static HostNetworkInterfaceStatus fromValue(String v)
    {
        return valueOf(HostNetworkInterfaceStatus.class, v);
    }
}


// ##### ENDFILE "HostNetworkInterfaceStatus.java"


// ##### BEGINFILE "HostNetworkInterfaceType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * HostNetworkInterfaceType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum HostNetworkInterfaceType
{
    Bridged(1),
    HostOnly(2);

    private final int value;

    HostNetworkInterfaceType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static HostNetworkInterfaceType fromValue(long v)
    {
        for (HostNetworkInterfaceType c: HostNetworkInterfaceType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static HostNetworkInterfaceType fromValue(String v)
    {
        return valueOf(HostNetworkInterfaceType.class, v);
    }
}


// ##### ENDFILE "HostNetworkInterfaceType.java"


// ##### BEGINFILE "AdditionsFacilityType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * AdditionsFacilityType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum AdditionsFacilityType
{
    None(0),
    VBoxGuestDriver(20),
    AutoLogon(90),
    VBoxService(100),
    VBoxTrayClient(101),
    Seamless(1000),
    Graphics(1100),
    All(2147483646);

    private final int value;

    AdditionsFacilityType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static AdditionsFacilityType fromValue(long v)
    {
        for (AdditionsFacilityType c: AdditionsFacilityType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static AdditionsFacilityType fromValue(String v)
    {
        return valueOf(AdditionsFacilityType.class, v);
    }
}


// ##### ENDFILE "AdditionsFacilityType.java"


// ##### BEGINFILE "AdditionsFacilityClass.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * AdditionsFacilityClass.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum AdditionsFacilityClass
{
    None(0),
    Driver(10),
    Service(30),
    Program(50),
    Feature(100),
    ThirdParty(999),
    All(2147483646);

    private final int value;

    AdditionsFacilityClass(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static AdditionsFacilityClass fromValue(long v)
    {
        for (AdditionsFacilityClass c: AdditionsFacilityClass.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static AdditionsFacilityClass fromValue(String v)
    {
        return valueOf(AdditionsFacilityClass.class, v);
    }
}


// ##### ENDFILE "AdditionsFacilityClass.java"


// ##### BEGINFILE "AdditionsFacilityStatus.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * AdditionsFacilityStatus.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum AdditionsFacilityStatus
{
    Inactive(0),
    Paused(1),
    PreInit(20),
    Init(30),
    Active(50),
    Terminating(100),
    Terminated(101),
    Failed(800),
    Unknown(999);

    private final int value;

    AdditionsFacilityStatus(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static AdditionsFacilityStatus fromValue(long v)
    {
        for (AdditionsFacilityStatus c: AdditionsFacilityStatus.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static AdditionsFacilityStatus fromValue(String v)
    {
        return valueOf(AdditionsFacilityStatus.class, v);
    }
}


// ##### ENDFILE "AdditionsFacilityStatus.java"


// ##### BEGINFILE "AdditionsRunLevelType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * AdditionsRunLevelType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum AdditionsRunLevelType
{
    None(0),
    System(1),
    Userland(2),
    Desktop(3);

    private final int value;

    AdditionsRunLevelType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static AdditionsRunLevelType fromValue(long v)
    {
        for (AdditionsRunLevelType c: AdditionsRunLevelType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static AdditionsRunLevelType fromValue(String v)
    {
        return valueOf(AdditionsRunLevelType.class, v);
    }
}


// ##### ENDFILE "AdditionsRunLevelType.java"


// ##### BEGINFILE "AdditionsUpdateFlag.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * AdditionsUpdateFlag.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum AdditionsUpdateFlag
{
    None(0),
    WaitForUpdateStartOnly(1);

    private final int value;

    AdditionsUpdateFlag(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static AdditionsUpdateFlag fromValue(long v)
    {
        for (AdditionsUpdateFlag c: AdditionsUpdateFlag.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static AdditionsUpdateFlag fromValue(String v)
    {
        return valueOf(AdditionsUpdateFlag.class, v);
    }
}


// ##### ENDFILE "AdditionsUpdateFlag.java"


// ##### BEGINFILE "GuestSessionStatus.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * GuestSessionStatus.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum GuestSessionStatus
{
    Undefined(0),
    Starting(10),
    Started(100),
    Terminating(480),
    Terminated(500),
    TimedOutKilled(512),
    TimedOutAbnormally(513),
    Down(600),
    Error(800);

    private final int value;

    GuestSessionStatus(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static GuestSessionStatus fromValue(long v)
    {
        for (GuestSessionStatus c: GuestSessionStatus.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static GuestSessionStatus fromValue(String v)
    {
        return valueOf(GuestSessionStatus.class, v);
    }
}


// ##### ENDFILE "GuestSessionStatus.java"


// ##### BEGINFILE "GuestSessionWaitForFlag.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * GuestSessionWaitForFlag.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum GuestSessionWaitForFlag
{
    None(0),
    Start(1),
    Terminate(2),
    Status(4);

    private final int value;

    GuestSessionWaitForFlag(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static GuestSessionWaitForFlag fromValue(long v)
    {
        for (GuestSessionWaitForFlag c: GuestSessionWaitForFlag.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static GuestSessionWaitForFlag fromValue(String v)
    {
        return valueOf(GuestSessionWaitForFlag.class, v);
    }
}


// ##### ENDFILE "GuestSessionWaitForFlag.java"


// ##### BEGINFILE "GuestSessionWaitResult.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * GuestSessionWaitResult.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum GuestSessionWaitResult
{
    None(0),
    Start(1),
    Terminate(2),
    Status(3),
    Error(4),
    Timeout(5),
    WaitFlagNotSupported(6);

    private final int value;

    GuestSessionWaitResult(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static GuestSessionWaitResult fromValue(long v)
    {
        for (GuestSessionWaitResult c: GuestSessionWaitResult.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static GuestSessionWaitResult fromValue(String v)
    {
        return valueOf(GuestSessionWaitResult.class, v);
    }
}


// ##### ENDFILE "GuestSessionWaitResult.java"


// ##### BEGINFILE "GuestUserState.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * GuestUserState.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum GuestUserState
{
    Unknown(0),
    LoggedIn(1),
    LoggedOut(2),
    Locked(3),
    Unlocked(4),
    Disabled(5),
    Idle(6),
    InUse(7),
    Created(8),
    Deleted(9),
    SessionChanged(10),
    CredentialsChanged(11),
    RoleChanged(12),
    GroupAdded(13),
    GroupRemoved(14),
    Elevated(15);

    private final int value;

    GuestUserState(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static GuestUserState fromValue(long v)
    {
        for (GuestUserState c: GuestUserState.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static GuestUserState fromValue(String v)
    {
        return valueOf(GuestUserState.class, v);
    }
}


// ##### ENDFILE "GuestUserState.java"


// ##### BEGINFILE "FileSeekType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * FileSeekType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum FileSeekType
{
    Set(0),
    Current(1);

    private final int value;

    FileSeekType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static FileSeekType fromValue(long v)
    {
        for (FileSeekType c: FileSeekType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static FileSeekType fromValue(String v)
    {
        return valueOf(FileSeekType.class, v);
    }
}


// ##### ENDFILE "FileSeekType.java"


// ##### BEGINFILE "ProcessInputFlag.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ProcessInputFlag.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum ProcessInputFlag
{
    None(0),
    EndOfFile(1);

    private final int value;

    ProcessInputFlag(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static ProcessInputFlag fromValue(long v)
    {
        for (ProcessInputFlag c: ProcessInputFlag.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static ProcessInputFlag fromValue(String v)
    {
        return valueOf(ProcessInputFlag.class, v);
    }
}


// ##### ENDFILE "ProcessInputFlag.java"


// ##### BEGINFILE "ProcessOutputFlag.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ProcessOutputFlag.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum ProcessOutputFlag
{
    None(0),
    StdErr(1);

    private final int value;

    ProcessOutputFlag(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static ProcessOutputFlag fromValue(long v)
    {
        for (ProcessOutputFlag c: ProcessOutputFlag.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static ProcessOutputFlag fromValue(String v)
    {
        return valueOf(ProcessOutputFlag.class, v);
    }
}


// ##### ENDFILE "ProcessOutputFlag.java"


// ##### BEGINFILE "ProcessWaitForFlag.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ProcessWaitForFlag.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum ProcessWaitForFlag
{
    None(0),
    Start(1),
    Terminate(2),
    StdIn(4),
    StdOut(8),
    StdErr(16);

    private final int value;

    ProcessWaitForFlag(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static ProcessWaitForFlag fromValue(long v)
    {
        for (ProcessWaitForFlag c: ProcessWaitForFlag.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static ProcessWaitForFlag fromValue(String v)
    {
        return valueOf(ProcessWaitForFlag.class, v);
    }
}


// ##### ENDFILE "ProcessWaitForFlag.java"


// ##### BEGINFILE "ProcessWaitResult.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ProcessWaitResult.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum ProcessWaitResult
{
    None(0),
    Start(1),
    Terminate(2),
    Status(3),
    Error(4),
    Timeout(5),
    StdIn(6),
    StdOut(7),
    StdErr(8),
    WaitFlagNotSupported(9);

    private final int value;

    ProcessWaitResult(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static ProcessWaitResult fromValue(long v)
    {
        for (ProcessWaitResult c: ProcessWaitResult.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static ProcessWaitResult fromValue(String v)
    {
        return valueOf(ProcessWaitResult.class, v);
    }
}


// ##### ENDFILE "ProcessWaitResult.java"


// ##### BEGINFILE "CopyFileFlag.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * CopyFileFlag.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum CopyFileFlag
{
    None(0),
    Recursive(1),
    Update(2),
    FollowLinks(4);

    private final int value;

    CopyFileFlag(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static CopyFileFlag fromValue(long v)
    {
        for (CopyFileFlag c: CopyFileFlag.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static CopyFileFlag fromValue(String v)
    {
        return valueOf(CopyFileFlag.class, v);
    }
}


// ##### ENDFILE "CopyFileFlag.java"


// ##### BEGINFILE "DirectoryCreateFlag.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * DirectoryCreateFlag.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum DirectoryCreateFlag
{
    None(0),
    Parents(1);

    private final int value;

    DirectoryCreateFlag(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static DirectoryCreateFlag fromValue(long v)
    {
        for (DirectoryCreateFlag c: DirectoryCreateFlag.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static DirectoryCreateFlag fromValue(String v)
    {
        return valueOf(DirectoryCreateFlag.class, v);
    }
}


// ##### ENDFILE "DirectoryCreateFlag.java"


// ##### BEGINFILE "DirectoryRemoveRecFlag.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * DirectoryRemoveRecFlag.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum DirectoryRemoveRecFlag
{
    None(0),
    ContentAndDir(1),
    ContentOnly(2);

    private final int value;

    DirectoryRemoveRecFlag(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static DirectoryRemoveRecFlag fromValue(long v)
    {
        for (DirectoryRemoveRecFlag c: DirectoryRemoveRecFlag.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static DirectoryRemoveRecFlag fromValue(String v)
    {
        return valueOf(DirectoryRemoveRecFlag.class, v);
    }
}


// ##### ENDFILE "DirectoryRemoveRecFlag.java"


// ##### BEGINFILE "PathRenameFlag.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * PathRenameFlag.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum PathRenameFlag
{
    None(0),
    NoReplace(1),
    Replace(2),
    NoSymlinks(4);

    private final int value;

    PathRenameFlag(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static PathRenameFlag fromValue(long v)
    {
        for (PathRenameFlag c: PathRenameFlag.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static PathRenameFlag fromValue(String v)
    {
        return valueOf(PathRenameFlag.class, v);
    }
}


// ##### ENDFILE "PathRenameFlag.java"


// ##### BEGINFILE "ProcessCreateFlag.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ProcessCreateFlag.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum ProcessCreateFlag
{
    None(0),
    WaitForProcessStartOnly(1),
    IgnoreOrphanedProcesses(2),
    Hidden(4),
    NoProfile(8),
    WaitForStdOut(16),
    WaitForStdErr(32),
    ExpandArguments(64),
    UnquotedArguments(128);

    private final int value;

    ProcessCreateFlag(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static ProcessCreateFlag fromValue(long v)
    {
        for (ProcessCreateFlag c: ProcessCreateFlag.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static ProcessCreateFlag fromValue(String v)
    {
        return valueOf(ProcessCreateFlag.class, v);
    }
}


// ##### ENDFILE "ProcessCreateFlag.java"


// ##### BEGINFILE "ProcessPriority.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ProcessPriority.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum ProcessPriority
{
    Invalid(0),
    Default(1);

    private final int value;

    ProcessPriority(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static ProcessPriority fromValue(long v)
    {
        for (ProcessPriority c: ProcessPriority.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static ProcessPriority fromValue(String v)
    {
        return valueOf(ProcessPriority.class, v);
    }
}


// ##### ENDFILE "ProcessPriority.java"


// ##### BEGINFILE "SymlinkType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * SymlinkType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum SymlinkType
{
    Unknown(0),
    Directory(1),
    File(2);

    private final int value;

    SymlinkType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static SymlinkType fromValue(long v)
    {
        for (SymlinkType c: SymlinkType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static SymlinkType fromValue(String v)
    {
        return valueOf(SymlinkType.class, v);
    }
}


// ##### ENDFILE "SymlinkType.java"


// ##### BEGINFILE "SymlinkReadFlag.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * SymlinkReadFlag.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum SymlinkReadFlag
{
    None(0),
    NoSymlinks(1);

    private final int value;

    SymlinkReadFlag(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static SymlinkReadFlag fromValue(long v)
    {
        for (SymlinkReadFlag c: SymlinkReadFlag.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static SymlinkReadFlag fromValue(String v)
    {
        return valueOf(SymlinkReadFlag.class, v);
    }
}


// ##### ENDFILE "SymlinkReadFlag.java"


// ##### BEGINFILE "ProcessStatus.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ProcessStatus.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum ProcessStatus
{
    Undefined(0),
    Starting(10),
    Started(100),
    Paused(110),
    Terminating(480),
    TerminatedNormally(500),
    TerminatedSignal(510),
    TerminatedAbnormally(511),
    TimedOutKilled(512),
    TimedOutAbnormally(513),
    Down(600),
    Error(800);

    private final int value;

    ProcessStatus(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static ProcessStatus fromValue(long v)
    {
        for (ProcessStatus c: ProcessStatus.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static ProcessStatus fromValue(String v)
    {
        return valueOf(ProcessStatus.class, v);
    }
}


// ##### ENDFILE "ProcessStatus.java"


// ##### BEGINFILE "ProcessInputStatus.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ProcessInputStatus.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum ProcessInputStatus
{
    Undefined(0),
    Broken(1),
    Available(10),
    Written(50),
    Overflow(100);

    private final int value;

    ProcessInputStatus(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static ProcessInputStatus fromValue(long v)
    {
        for (ProcessInputStatus c: ProcessInputStatus.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static ProcessInputStatus fromValue(String v)
    {
        return valueOf(ProcessInputStatus.class, v);
    }
}


// ##### ENDFILE "ProcessInputStatus.java"


// ##### BEGINFILE "FileStatus.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * FileStatus.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum FileStatus
{
    Undefined(0),
    Opening(10),
    Open(100),
    Closing(150),
    Closed(200),
    Down(600),
    Error(800);

    private final int value;

    FileStatus(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static FileStatus fromValue(long v)
    {
        for (FileStatus c: FileStatus.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static FileStatus fromValue(String v)
    {
        return valueOf(FileStatus.class, v);
    }
}


// ##### ENDFILE "FileStatus.java"


// ##### BEGINFILE "FsObjType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * FsObjType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum FsObjType
{
    Undefined(0),
    FIFO(1),
    DevChar(10),
    DevBlock(11),
    Directory(50),
    File(80),
    Symlink(100),
    Socket(200),
    Whiteout(400);

    private final int value;

    FsObjType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static FsObjType fromValue(long v)
    {
        for (FsObjType c: FsObjType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static FsObjType fromValue(String v)
    {
        return valueOf(FsObjType.class, v);
    }
}


// ##### ENDFILE "FsObjType.java"


// ##### BEGINFILE "DragAndDropAction.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * DragAndDropAction.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum DragAndDropAction
{
    Ignore(0),
    Copy(1),
    Move(2),
    Link(3);

    private final int value;

    DragAndDropAction(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static DragAndDropAction fromValue(long v)
    {
        for (DragAndDropAction c: DragAndDropAction.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static DragAndDropAction fromValue(String v)
    {
        return valueOf(DragAndDropAction.class, v);
    }
}


// ##### ENDFILE "DragAndDropAction.java"


// ##### BEGINFILE "DirectoryOpenFlag.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * DirectoryOpenFlag.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum DirectoryOpenFlag
{
    None(0),
    NoSymlinks(1);

    private final int value;

    DirectoryOpenFlag(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static DirectoryOpenFlag fromValue(long v)
    {
        for (DirectoryOpenFlag c: DirectoryOpenFlag.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static DirectoryOpenFlag fromValue(String v)
    {
        return valueOf(DirectoryOpenFlag.class, v);
    }
}


// ##### ENDFILE "DirectoryOpenFlag.java"


// ##### BEGINFILE "MediumState.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * MediumState.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum MediumState
{
    NotCreated(0),
    Created(1),
    LockedRead(2),
    LockedWrite(3),
    Inaccessible(4),
    Creating(5),
    Deleting(6);

    private final int value;

    MediumState(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static MediumState fromValue(long v)
    {
        for (MediumState c: MediumState.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static MediumState fromValue(String v)
    {
        return valueOf(MediumState.class, v);
    }
}


// ##### ENDFILE "MediumState.java"


// ##### BEGINFILE "MediumType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * MediumType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum MediumType
{
    Normal(0),
    Immutable(1),
    Writethrough(2),
    Shareable(3),
    Readonly(4),
    MultiAttach(5);

    private final int value;

    MediumType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static MediumType fromValue(long v)
    {
        for (MediumType c: MediumType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static MediumType fromValue(String v)
    {
        return valueOf(MediumType.class, v);
    }
}


// ##### ENDFILE "MediumType.java"


// ##### BEGINFILE "MediumVariant.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * MediumVariant.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum MediumVariant
{
    Standard(0),
    VmdkSplit2G(0x01),
    VmdkRawDisk(0x02),
    VmdkStreamOptimized(0x04),
    VmdkESX(0x08),
    Fixed(0x10000),
    Diff(0x20000),
    NoCreateDir(0x40000000);

    private final int value;

    MediumVariant(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static MediumVariant fromValue(long v)
    {
        for (MediumVariant c: MediumVariant.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static MediumVariant fromValue(String v)
    {
        return valueOf(MediumVariant.class, v);
    }
}


// ##### ENDFILE "MediumVariant.java"


// ##### BEGINFILE "DataType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * DataType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum DataType
{
    Int32(0),
    Int8(1),
    String(2);

    private final int value;

    DataType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static DataType fromValue(long v)
    {
        for (DataType c: DataType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static DataType fromValue(String v)
    {
        return valueOf(DataType.class, v);
    }
}


// ##### ENDFILE "DataType.java"


// ##### BEGINFILE "DataFlags.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * DataFlags.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum DataFlags
{
    None(0x00),
    Mandatory(0x01),
    Expert(0x02),
    Array(0x04),
    FlagMask(0x07);

    private final int value;

    DataFlags(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static DataFlags fromValue(long v)
    {
        for (DataFlags c: DataFlags.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static DataFlags fromValue(String v)
    {
        return valueOf(DataFlags.class, v);
    }
}


// ##### ENDFILE "DataFlags.java"


// ##### BEGINFILE "MediumFormatCapabilities.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * MediumFormatCapabilities.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum MediumFormatCapabilities
{
    Uuid(0x01),
    CreateFixed(0x02),
    CreateDynamic(0x04),
    CreateSplit2G(0x08),
    Differencing(0x10),
    Asynchronous(0x20),
    File(0x40),
    Properties(0x80),
    TcpNetworking(0x100),
    VFS(0x200),
    CapabilityMask(0x3FF);

    private final int value;

    MediumFormatCapabilities(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static MediumFormatCapabilities fromValue(long v)
    {
        for (MediumFormatCapabilities c: MediumFormatCapabilities.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static MediumFormatCapabilities fromValue(String v)
    {
        return valueOf(MediumFormatCapabilities.class, v);
    }
}


// ##### ENDFILE "MediumFormatCapabilities.java"


// ##### BEGINFILE "MouseButtonState.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * MouseButtonState.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum MouseButtonState
{
    LeftButton(0x01),
    RightButton(0x02),
    MiddleButton(0x04),
    WheelUp(0x08),
    WheelDown(0x10),
    XButton1(0x20),
    XButton2(0x40),
    MouseStateMask(0x7F);

    private final int value;

    MouseButtonState(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static MouseButtonState fromValue(long v)
    {
        for (MouseButtonState c: MouseButtonState.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static MouseButtonState fromValue(String v)
    {
        return valueOf(MouseButtonState.class, v);
    }
}


// ##### ENDFILE "MouseButtonState.java"


// ##### BEGINFILE "TouchContactState.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * TouchContactState.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum TouchContactState
{
    None(0x00),
    InContact(0x01),
    InRange(0x02),
    ContactStateMask(0x03);

    private final int value;

    TouchContactState(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static TouchContactState fromValue(long v)
    {
        for (TouchContactState c: TouchContactState.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static TouchContactState fromValue(String v)
    {
        return valueOf(TouchContactState.class, v);
    }
}


// ##### ENDFILE "TouchContactState.java"


// ##### BEGINFILE "FramebufferPixelFormat.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * FramebufferPixelFormat.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum FramebufferPixelFormat
{
    Opaque(0),
    FOURCC_RGB(0x32424752);

    private final int value;

    FramebufferPixelFormat(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static FramebufferPixelFormat fromValue(long v)
    {
        for (FramebufferPixelFormat c: FramebufferPixelFormat.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static FramebufferPixelFormat fromValue(String v)
    {
        return valueOf(FramebufferPixelFormat.class, v);
    }
}


// ##### ENDFILE "FramebufferPixelFormat.java"


// ##### BEGINFILE "NetworkAttachmentType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * NetworkAttachmentType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum NetworkAttachmentType
{
    Null(0),
    NAT(1),
    Bridged(2),
    Internal(3),
    HostOnly(4),
    Generic(5),
    NATNetwork(6);

    private final int value;

    NetworkAttachmentType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static NetworkAttachmentType fromValue(long v)
    {
        for (NetworkAttachmentType c: NetworkAttachmentType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static NetworkAttachmentType fromValue(String v)
    {
        return valueOf(NetworkAttachmentType.class, v);
    }
}


// ##### ENDFILE "NetworkAttachmentType.java"


// ##### BEGINFILE "NetworkAdapterType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * NetworkAdapterType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum NetworkAdapterType
{
    Null(0),
    Am79C970A(1),
    Am79C973(2),
    I82540EM(3),
    I82543GC(4),
    I82545EM(5),
    Virtio(6);

    private final int value;

    NetworkAdapterType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static NetworkAdapterType fromValue(long v)
    {
        for (NetworkAdapterType c: NetworkAdapterType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static NetworkAdapterType fromValue(String v)
    {
        return valueOf(NetworkAdapterType.class, v);
    }
}


// ##### ENDFILE "NetworkAdapterType.java"


// ##### BEGINFILE "NetworkAdapterPromiscModePolicy.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * NetworkAdapterPromiscModePolicy.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum NetworkAdapterPromiscModePolicy
{
    Deny(1),
    AllowNetwork(2),
    AllowAll(3);

    private final int value;

    NetworkAdapterPromiscModePolicy(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static NetworkAdapterPromiscModePolicy fromValue(long v)
    {
        for (NetworkAdapterPromiscModePolicy c: NetworkAdapterPromiscModePolicy.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static NetworkAdapterPromiscModePolicy fromValue(String v)
    {
        return valueOf(NetworkAdapterPromiscModePolicy.class, v);
    }
}


// ##### ENDFILE "NetworkAdapterPromiscModePolicy.java"


// ##### BEGINFILE "PortMode.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * PortMode.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum PortMode
{
    Disconnected(0),
    HostPipe(1),
    HostDevice(2),
    RawFile(3);

    private final int value;

    PortMode(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static PortMode fromValue(long v)
    {
        for (PortMode c: PortMode.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static PortMode fromValue(String v)
    {
        return valueOf(PortMode.class, v);
    }
}


// ##### ENDFILE "PortMode.java"


// ##### BEGINFILE "USBControllerType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * USBControllerType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum USBControllerType
{
    Null(0),
    OHCI(1),
    EHCI(2),
    Last(3);

    private final int value;

    USBControllerType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static USBControllerType fromValue(long v)
    {
        for (USBControllerType c: USBControllerType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static USBControllerType fromValue(String v)
    {
        return valueOf(USBControllerType.class, v);
    }
}


// ##### ENDFILE "USBControllerType.java"


// ##### BEGINFILE "USBDeviceState.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * USBDeviceState.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum USBDeviceState
{
    NotSupported(0),
    Unavailable(1),
    Busy(2),
    Available(3),
    Held(4),
    Captured(5);

    private final int value;

    USBDeviceState(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static USBDeviceState fromValue(long v)
    {
        for (USBDeviceState c: USBDeviceState.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static USBDeviceState fromValue(String v)
    {
        return valueOf(USBDeviceState.class, v);
    }
}


// ##### ENDFILE "USBDeviceState.java"


// ##### BEGINFILE "USBDeviceFilterAction.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * USBDeviceFilterAction.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum USBDeviceFilterAction
{
    Null(0),
    Ignore(1),
    Hold(2);

    private final int value;

    USBDeviceFilterAction(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static USBDeviceFilterAction fromValue(long v)
    {
        for (USBDeviceFilterAction c: USBDeviceFilterAction.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static USBDeviceFilterAction fromValue(String v)
    {
        return valueOf(USBDeviceFilterAction.class, v);
    }
}


// ##### ENDFILE "USBDeviceFilterAction.java"


// ##### BEGINFILE "AudioDriverType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * AudioDriverType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum AudioDriverType
{
    Null(0),
    WinMM(1),
    OSS(2),
    ALSA(3),
    DirectSound(4),
    CoreAudio(5),
    MMPM(6),
    Pulse(7),
    SolAudio(8);

    private final int value;

    AudioDriverType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static AudioDriverType fromValue(long v)
    {
        for (AudioDriverType c: AudioDriverType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static AudioDriverType fromValue(String v)
    {
        return valueOf(AudioDriverType.class, v);
    }
}


// ##### ENDFILE "AudioDriverType.java"


// ##### BEGINFILE "AudioControllerType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * AudioControllerType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum AudioControllerType
{
    AC97(0),
    SB16(1),
    HDA(2);

    private final int value;

    AudioControllerType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static AudioControllerType fromValue(long v)
    {
        for (AudioControllerType c: AudioControllerType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static AudioControllerType fromValue(String v)
    {
        return valueOf(AudioControllerType.class, v);
    }
}


// ##### ENDFILE "AudioControllerType.java"


// ##### BEGINFILE "AuthType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * AuthType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum AuthType
{
    Null(0),
    External(1),
    Guest(2);

    private final int value;

    AuthType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static AuthType fromValue(long v)
    {
        for (AuthType c: AuthType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static AuthType fromValue(String v)
    {
        return valueOf(AuthType.class, v);
    }
}


// ##### ENDFILE "AuthType.java"


// ##### BEGINFILE "Reason.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * Reason.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum Reason
{
    Unspecified(0),
    HostSuspend(1),
    HostResume(2),
    HostBatteryLow(3);

    private final int value;

    Reason(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static Reason fromValue(long v)
    {
        for (Reason c: Reason.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static Reason fromValue(String v)
    {
        return valueOf(Reason.class, v);
    }
}


// ##### ENDFILE "Reason.java"


// ##### BEGINFILE "StorageBus.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * StorageBus.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum StorageBus
{
    Null(0),
    IDE(1),
    SATA(2),
    SCSI(3),
    Floppy(4),
    SAS(5);

    private final int value;

    StorageBus(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static StorageBus fromValue(long v)
    {
        for (StorageBus c: StorageBus.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static StorageBus fromValue(String v)
    {
        return valueOf(StorageBus.class, v);
    }
}


// ##### ENDFILE "StorageBus.java"


// ##### BEGINFILE "StorageControllerType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * StorageControllerType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum StorageControllerType
{
    Null(0),
    LsiLogic(1),
    BusLogic(2),
    IntelAhci(3),
    PIIX3(4),
    PIIX4(5),
    ICH6(6),
    I82078(7),
    LsiLogicSas(8);

    private final int value;

    StorageControllerType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static StorageControllerType fromValue(long v)
    {
        for (StorageControllerType c: StorageControllerType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static StorageControllerType fromValue(String v)
    {
        return valueOf(StorageControllerType.class, v);
    }
}


// ##### ENDFILE "StorageControllerType.java"


// ##### BEGINFILE "ChipsetType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ChipsetType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum ChipsetType
{
    Null(0),
    PIIX3(1),
    ICH9(2);

    private final int value;

    ChipsetType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static ChipsetType fromValue(long v)
    {
        for (ChipsetType c: ChipsetType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static ChipsetType fromValue(String v)
    {
        return valueOf(ChipsetType.class, v);
    }
}


// ##### ENDFILE "ChipsetType.java"


// ##### BEGINFILE "NATAliasMode.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * NATAliasMode.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum NATAliasMode
{
    AliasLog(0x1),
    AliasProxyOnly(0x02),
    AliasUseSamePorts(0x04);

    private final int value;

    NATAliasMode(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static NATAliasMode fromValue(long v)
    {
        for (NATAliasMode c: NATAliasMode.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static NATAliasMode fromValue(String v)
    {
        return valueOf(NATAliasMode.class, v);
    }
}


// ##### ENDFILE "NATAliasMode.java"


// ##### BEGINFILE "NATProtocol.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * NATProtocol.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum NATProtocol
{
    UDP(0),
    TCP(1);

    private final int value;

    NATProtocol(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static NATProtocol fromValue(long v)
    {
        for (NATProtocol c: NATProtocol.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static NATProtocol fromValue(String v)
    {
        return valueOf(NATProtocol.class, v);
    }
}


// ##### ENDFILE "NATProtocol.java"


// ##### BEGINFILE "BandwidthGroupType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * BandwidthGroupType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum BandwidthGroupType
{
    Null(0),
    Disk(1),
    Network(2);

    private final int value;

    BandwidthGroupType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static BandwidthGroupType fromValue(long v)
    {
        for (BandwidthGroupType c: BandwidthGroupType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static BandwidthGroupType fromValue(String v)
    {
        return valueOf(BandwidthGroupType.class, v);
    }
}


// ##### ENDFILE "BandwidthGroupType.java"


// ##### BEGINFILE "VBoxEventType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * VBoxEventType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum VBoxEventType
{
    Invalid(0),
    Any(1),
    Vetoable(2),
    MachineEvent(3),
    SnapshotEvent(4),
    InputEvent(5),
    LastWildcard(31),
    OnMachineStateChanged(32),
    OnMachineDataChanged(33),
    OnExtraDataChanged(34),
    OnExtraDataCanChange(35),
    OnMediumRegistered(36),
    OnMachineRegistered(37),
    OnSessionStateChanged(38),
    OnSnapshotTaken(39),
    OnSnapshotDeleted(40),
    OnSnapshotChanged(41),
    OnGuestPropertyChanged(42),
    OnMousePointerShapeChanged(43),
    OnMouseCapabilityChanged(44),
    OnKeyboardLedsChanged(45),
    OnStateChanged(46),
    OnAdditionsStateChanged(47),
    OnNetworkAdapterChanged(48),
    OnSerialPortChanged(49),
    OnParallelPortChanged(50),
    OnStorageControllerChanged(51),
    OnMediumChanged(52),
    OnVRDEServerChanged(53),
    OnUSBControllerChanged(54),
    OnUSBDeviceStateChanged(55),
    OnSharedFolderChanged(56),
    OnRuntimeError(57),
    OnCanShowWindow(58),
    OnShowWindow(59),
    OnCPUChanged(60),
    OnVRDEServerInfoChanged(61),
    OnEventSourceChanged(62),
    OnCPUExecutionCapChanged(63),
    OnGuestKeyboard(64),
    OnGuestMouse(65),
    OnNATRedirect(66),
    OnHostPCIDevicePlug(67),
    OnVBoxSVCAvailabilityChanged(68),
    OnBandwidthGroupChanged(69),
    OnGuestMonitorChanged(70),
    OnStorageDeviceChanged(71),
    OnClipboardModeChanged(72),
    OnDragAndDropModeChanged(73),
    OnNATNetworkChanged(74),
    OnNATNetworkStartStop(75),
    OnNATNetworkAlter(76),
    OnNATNetworkCreationDeletion(77),
    OnNATNetworkSetting(78),
    OnNATNetworkPortForward(79),
    OnGuestSessionStateChanged(80),
    OnGuestSessionRegistered(81),
    OnGuestProcessRegistered(82),
    OnGuestProcessStateChanged(83),
    OnGuestProcessInputNotify(84),
    OnGuestProcessOutput(85),
    OnGuestFileRegistered(86),
    OnGuestFileStateChanged(87),
    OnGuestFileOffsetChanged(88),
    OnGuestFileRead(89),
    OnGuestFileWrite(90),
    OnVideoCaptureChanged(91),
    OnGuestUserStateChanged(92),
    OnGuestMultiTouch(93),
    OnHostNameResolutionConfigurationChange(94),
    Last(95);

    private final int value;

    VBoxEventType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static VBoxEventType fromValue(long v)
    {
        for (VBoxEventType c: VBoxEventType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static VBoxEventType fromValue(String v)
    {
        return valueOf(VBoxEventType.class, v);
    }
}


// ##### ENDFILE "VBoxEventType.java"


// ##### BEGINFILE "GuestMouseEventMode.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * GuestMouseEventMode.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum GuestMouseEventMode
{
    Relative(0),
    Absolute(1);

    private final int value;

    GuestMouseEventMode(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static GuestMouseEventMode fromValue(long v)
    {
        for (GuestMouseEventMode c: GuestMouseEventMode.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static GuestMouseEventMode fromValue(String v)
    {
        return valueOf(GuestMouseEventMode.class, v);
    }
}


// ##### ENDFILE "GuestMouseEventMode.java"


// ##### BEGINFILE "GuestMonitorChangedEventType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * GuestMonitorChangedEventType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
public enum GuestMonitorChangedEventType
{
    Enabled(0),
    Disabled(1),
    NewOrigin(2);

    private final int value;

    GuestMonitorChangedEventType(int v)
    {
        value = v;
    }

    public int value()
    {
        return value;
    }

    public static GuestMonitorChangedEventType fromValue(long v)
    {
        for (GuestMonitorChangedEventType c: GuestMonitorChangedEventType.values())
        {
            if (c.value == (int)v)
            {
                return c;
            }
        }
        throw new IllegalArgumentException(Long.toString(v));
    }

    public static GuestMonitorChangedEventType fromValue(String v)
    {
        return valueOf(GuestMonitorChangedEventType.class, v);
    }
}


// ##### ENDFILE "GuestMonitorChangedEventType.java"


// ##### BEGINFILE "IVirtualBoxErrorInfo.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IVirtualBoxErrorInfo.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IVirtualBoxErrorInfo extends IUnknown
{

    public IVirtualBoxErrorInfo(org.mozilla.interfaces.IVirtualBoxErrorInfo wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IVirtualBoxErrorInfo getTypedWrapped()
    {
        return (org.mozilla.interfaces.IVirtualBoxErrorInfo) getWrapped();
    }
    public Integer getResultCode()
    {
        try
        {
            int retVal = getTypedWrapped().getResultCode();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getResultDetail()
    {
        try
        {
            int retVal = getTypedWrapped().getResultDetail();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getInterfaceID()
    {
        try
        {
            String retVal = getTypedWrapped().getInterfaceID();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getComponent()
    {
        try
        {
            String retVal = getTypedWrapped().getComponent();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getText()
    {
        try
        {
            String retVal = getTypedWrapped().getText();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IVirtualBoxErrorInfo getNext()
    {
        try
        {
            org.mozilla.interfaces.IVirtualBoxErrorInfo retVal = getTypedWrapped().getNext();
            return (retVal != null) ? new org.virtualbox_4_3.IVirtualBoxErrorInfo(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IVirtualBoxErrorInfo queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IVirtualBoxErrorInfo qiobj = Helper.queryInterface(nsobj, "{c1bcc6d5-7966-481d-ab0b-d0ed73e28135}", org.mozilla.interfaces.IVirtualBoxErrorInfo.class);
        return qiobj == null ? null : new IVirtualBoxErrorInfo(qiobj);
    }
}

// ##### ENDFILE "IVirtualBoxErrorInfo.java"


// ##### BEGINFILE "INATNetwork.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * INATNetwork.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class INATNetwork extends IUnknown
{

    public INATNetwork(org.mozilla.interfaces.INATNetwork wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.INATNetwork getTypedWrapped()
    {
        return (org.mozilla.interfaces.INATNetwork) getWrapped();
    }
    public String getNetworkName()
    {
        try
        {
            String retVal = getTypedWrapped().getNetworkName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setNetworkName(String value)
    {
        try
        {
            getTypedWrapped().setNetworkName(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getNetwork()
    {
        try
        {
            String retVal = getTypedWrapped().getNetwork();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setNetwork(String value)
    {
        try
        {
            getTypedWrapped().setNetwork(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getGateway()
    {
        try
        {
            String retVal = getTypedWrapped().getGateway();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getIPv6Enabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getIPv6Enabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setIPv6Enabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setIPv6Enabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getIPv6Prefix()
    {
        try
        {
            String retVal = getTypedWrapped().getIPv6Prefix();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setIPv6Prefix(String value)
    {
        try
        {
            getTypedWrapped().setIPv6Prefix(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getAdvertiseDefaultIPv6RouteEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getAdvertiseDefaultIPv6RouteEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setAdvertiseDefaultIPv6RouteEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setAdvertiseDefaultIPv6RouteEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getNeedDhcpServer()
    {
        try
        {
            boolean retVal = getTypedWrapped().getNeedDhcpServer();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setNeedDhcpServer(Boolean value)
    {
        try
        {
            getTypedWrapped().setNeedDhcpServer(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IEventSource getEventSource()
    {
        try
        {
            org.mozilla.interfaces.IEventSource retVal = getTypedWrapped().getEventSource();
            return (retVal != null) ? new org.virtualbox_4_3.IEventSource(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getPortForwardRules4()
    {
        try
        {
            String[] retVal = getTypedWrapped().getPortForwardRules4(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getLocalMappings()
    {
        try
        {
            String[] retVal = getTypedWrapped().getLocalMappings(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getLoopbackIp6()
    {
        try
        {
            int retVal = getTypedWrapped().getLoopbackIp6();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setLoopbackIp6(Integer value)
    {
        try
        {
            getTypedWrapped().setLoopbackIp6(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getPortForwardRules6()
    {
        try
        {
            String[] retVal = getTypedWrapped().getPortForwardRules6(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static INATNetwork queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.INATNetwork qiobj = Helper.queryInterface(nsobj, "{a63c75da-4c99-4e9d-8351-eb73651c18cc}", org.mozilla.interfaces.INATNetwork.class);
        return qiobj == null ? null : new INATNetwork(qiobj);
    }
    public void addLocalMapping(String hostid, Integer offset)
    {
        try
        {
            getTypedWrapped().addLocalMapping(hostid, offset);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void addPortForwardRule(Boolean isIpv6, String ruleName, org.virtualbox_4_3.NATProtocol proto, String hostIP, Integer hostPort, String guestIP, Integer guestPort)
    {
        try
        {
            getTypedWrapped().addPortForwardRule(isIpv6, ruleName, proto.value(), hostIP, hostPort, guestIP, guestPort);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void removePortForwardRule(Boolean iSipv6, String ruleName)
    {
        try
        {
            getTypedWrapped().removePortForwardRule(iSipv6, ruleName);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void start(String trunkType)
    {
        try
        {
            getTypedWrapped().start(trunkType);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void stop()
    {
        try
        {
            getTypedWrapped().stop();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "INATNetwork.java"


// ##### BEGINFILE "IDHCPServer.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IDHCPServer.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IDHCPServer extends IUnknown
{

    public IDHCPServer(org.mozilla.interfaces.IDHCPServer wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IDHCPServer getTypedWrapped()
    {
        return (org.mozilla.interfaces.IDHCPServer) getWrapped();
    }
    public org.virtualbox_4_3.IEventSource getEventSource()
    {
        try
        {
            org.mozilla.interfaces.IEventSource retVal = getTypedWrapped().getEventSource();
            return (retVal != null) ? new org.virtualbox_4_3.IEventSource(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getIPAddress()
    {
        try
        {
            String retVal = getTypedWrapped().getIPAddress();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getNetworkMask()
    {
        try
        {
            String retVal = getTypedWrapped().getNetworkMask();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getNetworkName()
    {
        try
        {
            String retVal = getTypedWrapped().getNetworkName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getLowerIP()
    {
        try
        {
            String retVal = getTypedWrapped().getLowerIP();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getUpperIP()
    {
        try
        {
            String retVal = getTypedWrapped().getUpperIP();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getGlobalOptions()
    {
        try
        {
            String[] retVal = getTypedWrapped().getGlobalOptions(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getVmConfigs()
    {
        try
        {
            String[] retVal = getTypedWrapped().getVmConfigs(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IDHCPServer queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IDHCPServer qiobj = Helper.queryInterface(nsobj, "{ff0774c5-1f62-4bc3-919c-7fc942bf1d25}", org.mozilla.interfaces.IDHCPServer.class);
        return qiobj == null ? null : new IDHCPServer(qiobj);
    }
    public void addGlobalOption(org.virtualbox_4_3.DhcpOpt option, String value)
    {
        try
        {
            getTypedWrapped().addGlobalOption(option.value(), value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void addVmSlotOption(String vmname, Integer slot, org.virtualbox_4_3.DhcpOpt option, String value)
    {
        try
        {
            getTypedWrapped().addVmSlotOption(vmname, slot, option.value(), value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void removeVmSlotOptions(String vmname, Integer slot)
    {
        try
        {
            getTypedWrapped().removeVmSlotOptions(vmname, slot);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getVmSlotOptions(String vmname, Integer slot)
    {
        try
        {
            String[] retVal;
            retVal = getTypedWrapped().getVmSlotOptions(vmname, slot, null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getMacOptions(String mac)
    {
        try
        {
            String[] retVal;
            retVal = getTypedWrapped().getMacOptions(mac, null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setConfiguration(String IPAddress, String networkMask, String FromIPAddress, String ToIPAddress)
    {
        try
        {
            getTypedWrapped().setConfiguration(IPAddress, networkMask, FromIPAddress, ToIPAddress);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void start(String networkName, String trunkName, String trunkType)
    {
        try
        {
            getTypedWrapped().start(networkName, trunkName, trunkType);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void stop()
    {
        try
        {
            getTypedWrapped().stop();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IDHCPServer.java"


// ##### BEGINFILE "IVirtualBox.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IVirtualBox.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IVirtualBox extends IUnknown
{

    public IVirtualBox(org.mozilla.interfaces.IVirtualBox wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IVirtualBox getTypedWrapped()
    {
        return (org.mozilla.interfaces.IVirtualBox) getWrapped();
    }
    public String getVersion()
    {
        try
        {
            String retVal = getTypedWrapped().getVersion();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getVersionNormalized()
    {
        try
        {
            String retVal = getTypedWrapped().getVersionNormalized();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getRevision()
    {
        try
        {
            long retVal = getTypedWrapped().getRevision();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getPackageType()
    {
        try
        {
            String retVal = getTypedWrapped().getPackageType();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getAPIVersion()
    {
        try
        {
            String retVal = getTypedWrapped().getAPIVersion();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getHomeFolder()
    {
        try
        {
            String retVal = getTypedWrapped().getHomeFolder();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getSettingsFilePath()
    {
        try
        {
            String retVal = getTypedWrapped().getSettingsFilePath();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IHost getHost()
    {
        try
        {
            org.mozilla.interfaces.IHost retVal = getTypedWrapped().getHost();
            return (retVal != null) ? new org.virtualbox_4_3.IHost(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.ISystemProperties getSystemProperties()
    {
        try
        {
            org.mozilla.interfaces.ISystemProperties retVal = getTypedWrapped().getSystemProperties();
            return (retVal != null) ? new org.virtualbox_4_3.ISystemProperties(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IMachine> getMachines()
    {
        try
        {
            org.mozilla.interfaces.IMachine[] retVal = getTypedWrapped().getMachines(null);
            return Helper.wrap2(org.virtualbox_4_3.IMachine.class, org.mozilla.interfaces.IMachine.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getMachineGroups()
    {
        try
        {
            String[] retVal = getTypedWrapped().getMachineGroups(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IMedium> getHardDisks()
    {
        try
        {
            org.mozilla.interfaces.IMedium[] retVal = getTypedWrapped().getHardDisks(null);
            return Helper.wrap2(org.virtualbox_4_3.IMedium.class, org.mozilla.interfaces.IMedium.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IMedium> getDVDImages()
    {
        try
        {
            org.mozilla.interfaces.IMedium[] retVal = getTypedWrapped().getDVDImages(null);
            return Helper.wrap2(org.virtualbox_4_3.IMedium.class, org.mozilla.interfaces.IMedium.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IMedium> getFloppyImages()
    {
        try
        {
            org.mozilla.interfaces.IMedium[] retVal = getTypedWrapped().getFloppyImages(null);
            return Helper.wrap2(org.virtualbox_4_3.IMedium.class, org.mozilla.interfaces.IMedium.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IProgress> getProgressOperations()
    {
        try
        {
            org.mozilla.interfaces.IProgress[] retVal = getTypedWrapped().getProgressOperations(null);
            return Helper.wrap2(org.virtualbox_4_3.IProgress.class, org.mozilla.interfaces.IProgress.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IGuestOSType> getGuestOSTypes()
    {
        try
        {
            org.mozilla.interfaces.IGuestOSType[] retVal = getTypedWrapped().getGuestOSTypes(null);
            return Helper.wrap2(org.virtualbox_4_3.IGuestOSType.class, org.mozilla.interfaces.IGuestOSType.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.ISharedFolder> getSharedFolders()
    {
        try
        {
            org.mozilla.interfaces.ISharedFolder[] retVal = getTypedWrapped().getSharedFolders(null);
            return Helper.wrap2(org.virtualbox_4_3.ISharedFolder.class, org.mozilla.interfaces.ISharedFolder.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IPerformanceCollector getPerformanceCollector()
    {
        try
        {
            org.mozilla.interfaces.IPerformanceCollector retVal = getTypedWrapped().getPerformanceCollector();
            return (retVal != null) ? new org.virtualbox_4_3.IPerformanceCollector(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IDHCPServer> getDHCPServers()
    {
        try
        {
            org.mozilla.interfaces.IDHCPServer[] retVal = getTypedWrapped().getDHCPServers(null);
            return Helper.wrap2(org.virtualbox_4_3.IDHCPServer.class, org.mozilla.interfaces.IDHCPServer.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.INATNetwork> getNATNetworks()
    {
        try
        {
            org.mozilla.interfaces.INATNetwork[] retVal = getTypedWrapped().getNATNetworks(null);
            return Helper.wrap2(org.virtualbox_4_3.INATNetwork.class, org.mozilla.interfaces.INATNetwork.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IEventSource getEventSource()
    {
        try
        {
            org.mozilla.interfaces.IEventSource retVal = getTypedWrapped().getEventSource();
            return (retVal != null) ? new org.virtualbox_4_3.IEventSource(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IExtPackManager getExtensionPackManager()
    {
        try
        {
            org.mozilla.interfaces.IExtPackManager retVal = getTypedWrapped().getExtensionPackManager();
            return (retVal != null) ? new org.virtualbox_4_3.IExtPackManager(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getInternalNetworks()
    {
        try
        {
            String[] retVal = getTypedWrapped().getInternalNetworks(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getGenericNetworkDrivers()
    {
        try
        {
            String[] retVal = getTypedWrapped().getGenericNetworkDrivers(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IVirtualBox queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IVirtualBox qiobj = Helper.queryInterface(nsobj, "{fafa4e17-1ee2-4905-a10e-fe7c18bf5554}", org.mozilla.interfaces.IVirtualBox.class);
        return qiobj == null ? null : new IVirtualBox(qiobj);
    }
    public String composeMachineFilename(String name, String group, String createFlags, String baseFolder)
    {
        try
        {
            String retVal;
            retVal = getTypedWrapped().composeMachineFilename(name, group, createFlags, baseFolder);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IMachine createMachine(String settingsFile, String name, List<String> groups, String osTypeId, String flags)
    {
        try
        {
            org.mozilla.interfaces.IMachine retVal;
            retVal = getTypedWrapped().createMachine(settingsFile, name, groups != null ? groups.size() : 0, Helper.unwrapStr(groups), osTypeId, flags);
            return (retVal != null) ? new org.virtualbox_4_3.IMachine(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IMachine openMachine(String settingsFile)
    {
        try
        {
            org.mozilla.interfaces.IMachine retVal;
            retVal = getTypedWrapped().openMachine(settingsFile);
            return (retVal != null) ? new org.virtualbox_4_3.IMachine(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void registerMachine(org.virtualbox_4_3.IMachine machine)
    {
        try
        {
            getTypedWrapped().registerMachine((machine != null) ? machine.getTypedWrapped() : null);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IMachine findMachine(String nameOrId)
    {
        try
        {
            org.mozilla.interfaces.IMachine retVal;
            retVal = getTypedWrapped().findMachine(nameOrId);
            return (retVal != null) ? new org.virtualbox_4_3.IMachine(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IMachine> getMachinesByGroups(List<String> groups)
    {
        try
        {
            org.mozilla.interfaces.IMachine[] retVal;
            retVal = getTypedWrapped().getMachinesByGroups(groups != null ? groups.size() : 0, Helper.unwrapStr(groups), null);
            return Helper.wrap2(org.virtualbox_4_3.IMachine.class, org.mozilla.interfaces.IMachine.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.MachineState> getMachineStates(List<org.virtualbox_4_3.IMachine> machines)
    {
        try
        {
            long[] retVal;
            retVal = getTypedWrapped().getMachineStates(machines != null ? machines.size() : 0, Helper.unwrap2(org.virtualbox_4_3.IMachine.class, org.mozilla.interfaces.IMachine.class, machines), null);
            return Helper.wrapEnum(org.virtualbox_4_3.MachineState.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IAppliance createAppliance()
    {
        try
        {
            org.mozilla.interfaces.IAppliance retVal;
            retVal = getTypedWrapped().createAppliance();
            return (retVal != null) ? new org.virtualbox_4_3.IAppliance(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IMedium createHardDisk(String format, String location)
    {
        try
        {
            org.mozilla.interfaces.IMedium retVal;
            retVal = getTypedWrapped().createHardDisk(format, location);
            return (retVal != null) ? new org.virtualbox_4_3.IMedium(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IMedium openMedium(String location, org.virtualbox_4_3.DeviceType deviceType, org.virtualbox_4_3.AccessMode accessMode, Boolean forceNewUuid)
    {
        try
        {
            org.mozilla.interfaces.IMedium retVal;
            retVal = getTypedWrapped().openMedium(location, deviceType.value(), accessMode.value(), forceNewUuid);
            return (retVal != null) ? new org.virtualbox_4_3.IMedium(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IGuestOSType getGuestOSType(String id)
    {
        try
        {
            org.mozilla.interfaces.IGuestOSType retVal;
            retVal = getTypedWrapped().getGuestOSType(id);
            return (retVal != null) ? new org.virtualbox_4_3.IGuestOSType(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void createSharedFolder(String name, String hostPath, Boolean writable, Boolean automount)
    {
        try
        {
            getTypedWrapped().createSharedFolder(name, hostPath, writable, automount);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void removeSharedFolder(String name)
    {
        try
        {
            getTypedWrapped().removeSharedFolder(name);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getExtraDataKeys()
    {
        try
        {
            String[] retVal;
            retVal = getTypedWrapped().getExtraDataKeys(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getExtraData(String key)
    {
        try
        {
            String retVal;
            retVal = getTypedWrapped().getExtraData(key);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setExtraData(String key, String value)
    {
        try
        {
            getTypedWrapped().setExtraData(key, value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setSettingsSecret(String password)
    {
        try
        {
            getTypedWrapped().setSettingsSecret(password);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IDHCPServer createDHCPServer(String name)
    {
        try
        {
            org.mozilla.interfaces.IDHCPServer retVal;
            retVal = getTypedWrapped().createDHCPServer(name);
            return (retVal != null) ? new org.virtualbox_4_3.IDHCPServer(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IDHCPServer findDHCPServerByNetworkName(String name)
    {
        try
        {
            org.mozilla.interfaces.IDHCPServer retVal;
            retVal = getTypedWrapped().findDHCPServerByNetworkName(name);
            return (retVal != null) ? new org.virtualbox_4_3.IDHCPServer(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void removeDHCPServer(org.virtualbox_4_3.IDHCPServer server)
    {
        try
        {
            getTypedWrapped().removeDHCPServer((server != null) ? server.getTypedWrapped() : null);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.INATNetwork createNATNetwork(String networkName)
    {
        try
        {
            org.mozilla.interfaces.INATNetwork retVal;
            retVal = getTypedWrapped().createNATNetwork(networkName);
            return (retVal != null) ? new org.virtualbox_4_3.INATNetwork(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.INATNetwork findNATNetworkByName(String networkName)
    {
        try
        {
            org.mozilla.interfaces.INATNetwork retVal;
            retVal = getTypedWrapped().findNATNetworkByName(networkName);
            return (retVal != null) ? new org.virtualbox_4_3.INATNetwork(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void removeNATNetwork(org.virtualbox_4_3.INATNetwork network)
    {
        try
        {
            getTypedWrapped().removeNATNetwork((network != null) ? network.getTypedWrapped() : null);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean checkFirmwarePresent(org.virtualbox_4_3.FirmwareType firmwareType, String version, Holder<String> url, Holder<String> file)
    {
        try
        {
        String[] tmp_url = (String[])java.lang.reflect.Array.newInstance(String.class, 1);
        String[] tmp_file = (String[])java.lang.reflect.Array.newInstance(String.class, 1);
            boolean retVal;
            retVal = getTypedWrapped().checkFirmwarePresent(firmwareType.value(), version, tmp_url, tmp_file);
        url.value = tmp_url[0];
        file.value = tmp_file[0];
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IVirtualBox.java"


// ##### BEGINFILE "IVFSExplorer.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IVFSExplorer.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IVFSExplorer extends IUnknown
{

    public IVFSExplorer(org.mozilla.interfaces.IVFSExplorer wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IVFSExplorer getTypedWrapped()
    {
        return (org.mozilla.interfaces.IVFSExplorer) getWrapped();
    }
    public String getPath()
    {
        try
        {
            String retVal = getTypedWrapped().getPath();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.VFSType getType()
    {
        try
        {
            long retVal = getTypedWrapped().getType();
            return org.virtualbox_4_3.VFSType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IVFSExplorer queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IVFSExplorer qiobj = Helper.queryInterface(nsobj, "{fb220201-2fd3-47e2-a5dc-2c2431d833cc}", org.mozilla.interfaces.IVFSExplorer.class);
        return qiobj == null ? null : new IVFSExplorer(qiobj);
    }
    public org.virtualbox_4_3.IProgress update()
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().update();
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress cd(String dir)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().cd(dir);
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress cdUp()
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().cdUp();
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void entryList(Holder<List<String>> names, Holder<List<Long>> types, Holder<List<Long>> sizes, Holder<List<Long>> modes)
    {
        try
        {
        String[][] tmp_names = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
        long[][] tmp_types = (long[][])java.lang.reflect.Array.newInstance(long[].class, 1);
        long[][] tmp_sizes = (long[][])java.lang.reflect.Array.newInstance(long[].class, 1);
        long[][] tmp_modes = (long[][])java.lang.reflect.Array.newInstance(long[].class, 1);
            getTypedWrapped().entryList(null, tmp_names, null, tmp_types, null, tmp_sizes, null, tmp_modes);
        names.value = Helper.wrap(tmp_names[0]);
        types.value = Helper.wrap(tmp_types[0]);
        sizes.value = Helper.wrap(tmp_sizes[0]);
        modes.value = Helper.wrap(tmp_modes[0]);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> exists(List<String> names)
    {
        try
        {
            String[] retVal;
            retVal = getTypedWrapped().exists(names != null ? names.size() : 0, Helper.unwrapStr(names), null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress remove(List<String> names)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().remove(names != null ? names.size() : 0, Helper.unwrapStr(names));
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IVFSExplorer.java"


// ##### BEGINFILE "IAppliance.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IAppliance.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IAppliance extends IUnknown
{

    public IAppliance(org.mozilla.interfaces.IAppliance wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IAppliance getTypedWrapped()
    {
        return (org.mozilla.interfaces.IAppliance) getWrapped();
    }
    public String getPath()
    {
        try
        {
            String retVal = getTypedWrapped().getPath();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getDisks()
    {
        try
        {
            String[] retVal = getTypedWrapped().getDisks(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IVirtualSystemDescription> getVirtualSystemDescriptions()
    {
        try
        {
            org.mozilla.interfaces.IVirtualSystemDescription[] retVal = getTypedWrapped().getVirtualSystemDescriptions(null);
            return Helper.wrap2(org.virtualbox_4_3.IVirtualSystemDescription.class, org.mozilla.interfaces.IVirtualSystemDescription.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getMachines()
    {
        try
        {
            String[] retVal = getTypedWrapped().getMachines(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IAppliance queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IAppliance qiobj = Helper.queryInterface(nsobj, "{3059cf9e-25c7-4f0b-9fa5-3c42e441670b}", org.mozilla.interfaces.IAppliance.class);
        return qiobj == null ? null : new IAppliance(qiobj);
    }
    public org.virtualbox_4_3.IProgress read(String file)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().read(file);
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void interpret()
    {
        try
        {
            getTypedWrapped().interpret();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress importMachines(List<org.virtualbox_4_3.ImportOptions> options)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().importMachines(options != null ? options.size() : 0, Helper.unwrapEnum(org.virtualbox_4_3.ImportOptions.class, options));
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IVFSExplorer createVFSExplorer(String URI)
    {
        try
        {
            org.mozilla.interfaces.IVFSExplorer retVal;
            retVal = getTypedWrapped().createVFSExplorer(URI);
            return (retVal != null) ? new org.virtualbox_4_3.IVFSExplorer(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress write(String format, List<org.virtualbox_4_3.ExportOptions> options, String path)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().write(format, options != null ? options.size() : 0, Helper.unwrapEnum(org.virtualbox_4_3.ExportOptions.class, options), path);
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getWarnings()
    {
        try
        {
            String[] retVal;
            retVal = getTypedWrapped().getWarnings(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IAppliance.java"


// ##### BEGINFILE "IVirtualSystemDescription.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IVirtualSystemDescription.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IVirtualSystemDescription extends IUnknown
{

    public IVirtualSystemDescription(org.mozilla.interfaces.IVirtualSystemDescription wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IVirtualSystemDescription getTypedWrapped()
    {
        return (org.mozilla.interfaces.IVirtualSystemDescription) getWrapped();
    }
    public Long getCount()
    {
        try
        {
            long retVal = getTypedWrapped().getCount();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IVirtualSystemDescription queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IVirtualSystemDescription qiobj = Helper.queryInterface(nsobj, "{d7525e6c-531a-4c51-8e04-41235083a3d8}", org.mozilla.interfaces.IVirtualSystemDescription.class);
        return qiobj == null ? null : new IVirtualSystemDescription(qiobj);
    }
    public void getDescription(Holder<List<org.virtualbox_4_3.VirtualSystemDescriptionType>> types, Holder<List<String>> refs, Holder<List<String>> OVFValues, Holder<List<String>> VBoxValues, Holder<List<String>> extraConfigValues)
    {
        try
        {
        long[][] tmp_types = (long[][])java.lang.reflect.Array.newInstance(long[].class, 1);
        String[][] tmp_refs = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
        String[][] tmp_OVFValues = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
        String[][] tmp_VBoxValues = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
        String[][] tmp_extraConfigValues = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
            getTypedWrapped().getDescription(null, tmp_types, null, tmp_refs, null, tmp_OVFValues, null, tmp_VBoxValues, null, tmp_extraConfigValues);
        types.value = Helper.wrapEnum(org.virtualbox_4_3.VirtualSystemDescriptionType.class, tmp_types[0]);
        refs.value = Helper.wrap(tmp_refs[0]);
        OVFValues.value = Helper.wrap(tmp_OVFValues[0]);
        VBoxValues.value = Helper.wrap(tmp_VBoxValues[0]);
        extraConfigValues.value = Helper.wrap(tmp_extraConfigValues[0]);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void getDescriptionByType(org.virtualbox_4_3.VirtualSystemDescriptionType type, Holder<List<org.virtualbox_4_3.VirtualSystemDescriptionType>> types, Holder<List<String>> refs, Holder<List<String>> OVFValues, Holder<List<String>> VBoxValues, Holder<List<String>> extraConfigValues)
    {
        try
        {
        long[][] tmp_types = (long[][])java.lang.reflect.Array.newInstance(long[].class, 1);
        String[][] tmp_refs = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
        String[][] tmp_OVFValues = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
        String[][] tmp_VBoxValues = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
        String[][] tmp_extraConfigValues = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
            getTypedWrapped().getDescriptionByType(type.value(), null, tmp_types, null, tmp_refs, null, tmp_OVFValues, null, tmp_VBoxValues, null, tmp_extraConfigValues);
        types.value = Helper.wrapEnum(org.virtualbox_4_3.VirtualSystemDescriptionType.class, tmp_types[0]);
        refs.value = Helper.wrap(tmp_refs[0]);
        OVFValues.value = Helper.wrap(tmp_OVFValues[0]);
        VBoxValues.value = Helper.wrap(tmp_VBoxValues[0]);
        extraConfigValues.value = Helper.wrap(tmp_extraConfigValues[0]);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getValuesByType(org.virtualbox_4_3.VirtualSystemDescriptionType type, org.virtualbox_4_3.VirtualSystemDescriptionValueType which)
    {
        try
        {
            String[] retVal;
            retVal = getTypedWrapped().getValuesByType(type.value(), which.value(), null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setFinalValues(List<Boolean> enabled, List<String> VBoxValues, List<String> extraConfigValues)
    {
        try
        {
            getTypedWrapped().setFinalValues(enabled != null ? enabled.size() : 0, Helper.unwrapBoolean(enabled), VBoxValues != null ? VBoxValues.size() : 0, Helper.unwrapStr(VBoxValues), extraConfigValues != null ? extraConfigValues.size() : 0, Helper.unwrapStr(extraConfigValues));
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void addDescription(org.virtualbox_4_3.VirtualSystemDescriptionType type, String VBoxValue, String extraConfigValue)
    {
        try
        {
            getTypedWrapped().addDescription(type.value(), VBoxValue, extraConfigValue);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IVirtualSystemDescription.java"


// ##### BEGINFILE "IInternalMachineControl.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IInternalMachineControl.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IInternalMachineControl extends IUnknown
{

    public IInternalMachineControl(org.mozilla.interfaces.IInternalMachineControl wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IInternalMachineControl getTypedWrapped()
    {
        return (org.mozilla.interfaces.IInternalMachineControl) getWrapped();
    }
    public static IInternalMachineControl queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IInternalMachineControl qiobj = Helper.queryInterface(nsobj, "{2d9ce4b7-0ab2-4931-ac4a-e45aa66465ef}", org.mozilla.interfaces.IInternalMachineControl.class);
        return qiobj == null ? null : new IInternalMachineControl(qiobj);
    }
    public void setRemoveSavedStateFile(Boolean remove)
    {
        try
        {
            getTypedWrapped().setRemoveSavedStateFile(remove);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void updateState(org.virtualbox_4_3.MachineState state)
    {
        try
        {
            getTypedWrapped().updateState(state.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void beginPowerUp(org.virtualbox_4_3.IProgress progress)
    {
        try
        {
            getTypedWrapped().beginPowerUp((progress != null) ? progress.getTypedWrapped() : null);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void endPowerUp(Integer result)
    {
        try
        {
            getTypedWrapped().endPowerUp(result);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void beginPoweringDown(Holder<org.virtualbox_4_3.IProgress> progress)
    {
        try
        {
        org.mozilla.interfaces.IProgress[] tmp_progress = (org.mozilla.interfaces.IProgress[])java.lang.reflect.Array.newInstance(org.mozilla.interfaces.IProgress.class, 1);
            getTypedWrapped().beginPoweringDown(tmp_progress);
        progress.value = (tmp_progress[0] != null) ? new org.virtualbox_4_3.IProgress(tmp_progress[0]) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void endPoweringDown(Integer result, String errMsg)
    {
        try
        {
            getTypedWrapped().endPoweringDown(result, errMsg);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void runUSBDeviceFilters(org.virtualbox_4_3.IUSBDevice device, Holder<Boolean> matched, Holder<Long> maskedInterfaces)
    {
        try
        {
        boolean[] tmp_matched = (boolean[])java.lang.reflect.Array.newInstance(boolean.class, 1);
        long[] tmp_maskedInterfaces = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
            getTypedWrapped().runUSBDeviceFilters((device != null) ? device.getTypedWrapped() : null, tmp_matched, tmp_maskedInterfaces);
        matched.value = tmp_matched[0];
        maskedInterfaces.value = tmp_maskedInterfaces[0];
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void captureUSBDevice(String id)
    {
        try
        {
            getTypedWrapped().captureUSBDevice(id);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void detachUSBDevice(String id, Boolean done)
    {
        try
        {
            getTypedWrapped().detachUSBDevice(id, done);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void autoCaptureUSBDevices()
    {
        try
        {
            getTypedWrapped().autoCaptureUSBDevices();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void detachAllUSBDevices(Boolean done)
    {
        try
        {
            getTypedWrapped().detachAllUSBDevices(done);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress onSessionEnd(org.virtualbox_4_3.ISession session)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().onSessionEnd((session != null) ? session.getTypedWrapped() : null);
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void beginSavingState(Holder<org.virtualbox_4_3.IProgress> progress, Holder<String> stateFilePath)
    {
        try
        {
        org.mozilla.interfaces.IProgress[] tmp_progress = (org.mozilla.interfaces.IProgress[])java.lang.reflect.Array.newInstance(org.mozilla.interfaces.IProgress.class, 1);
        String[] tmp_stateFilePath = (String[])java.lang.reflect.Array.newInstance(String.class, 1);
            getTypedWrapped().beginSavingState(tmp_progress, tmp_stateFilePath);
        progress.value = (tmp_progress[0] != null) ? new org.virtualbox_4_3.IProgress(tmp_progress[0]) : null;
        stateFilePath.value = tmp_stateFilePath[0];
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void endSavingState(Integer result, String errMsg)
    {
        try
        {
            getTypedWrapped().endSavingState(result, errMsg);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void adoptSavedState(String savedStateFile)
    {
        try
        {
            getTypedWrapped().adoptSavedState(savedStateFile);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void beginTakingSnapshot(org.virtualbox_4_3.IConsole initiator, String name, String description, org.virtualbox_4_3.IProgress consoleProgress, Boolean fTakingSnapshotOnline, Holder<String> stateFilePath)
    {
        try
        {
        String[] tmp_stateFilePath = (String[])java.lang.reflect.Array.newInstance(String.class, 1);
            getTypedWrapped().beginTakingSnapshot((initiator != null) ? initiator.getTypedWrapped() : null, name, description, (consoleProgress != null) ? consoleProgress.getTypedWrapped() : null, fTakingSnapshotOnline, tmp_stateFilePath);
        stateFilePath.value = tmp_stateFilePath[0];
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void endTakingSnapshot(Boolean success)
    {
        try
        {
            getTypedWrapped().endTakingSnapshot(success);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress deleteSnapshot(org.virtualbox_4_3.IConsole initiator, String startId, String endId, Boolean deleteAllChildren, Holder<org.virtualbox_4_3.MachineState> machineState)
    {
        try
        {
        long[] tmp_machineState = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().deleteSnapshot((initiator != null) ? initiator.getTypedWrapped() : null, startId, endId, deleteAllChildren, tmp_machineState);
        machineState.value = org.virtualbox_4_3.MachineState.fromValue(tmp_machineState[0]);
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void finishOnlineMergeMedium()
    {
        try
        {
            getTypedWrapped().finishOnlineMergeMedium();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress restoreSnapshot(org.virtualbox_4_3.IConsole initiator, org.virtualbox_4_3.ISnapshot snapshot, Holder<org.virtualbox_4_3.MachineState> machineState)
    {
        try
        {
        long[] tmp_machineState = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().restoreSnapshot((initiator != null) ? initiator.getTypedWrapped() : null, (snapshot != null) ? snapshot.getTypedWrapped() : null, tmp_machineState);
        machineState.value = org.virtualbox_4_3.MachineState.fromValue(tmp_machineState[0]);
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void pullGuestProperties(Holder<List<String>> names, Holder<List<String>> values, Holder<List<Long>> timestamps, Holder<List<String>> flags)
    {
        try
        {
        String[][] tmp_names = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
        String[][] tmp_values = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
        long[][] tmp_timestamps = (long[][])java.lang.reflect.Array.newInstance(long[].class, 1);
        String[][] tmp_flags = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
            getTypedWrapped().pullGuestProperties(null, tmp_names, null, tmp_values, null, tmp_timestamps, null, tmp_flags);
        names.value = Helper.wrap(tmp_names[0]);
        values.value = Helper.wrap(tmp_values[0]);
        timestamps.value = Helper.wrap(tmp_timestamps[0]);
        flags.value = Helper.wrap(tmp_flags[0]);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void pushGuestProperty(String name, String value, Long timestamp, String flags)
    {
        try
        {
            getTypedWrapped().pushGuestProperty(name, value, timestamp, flags);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void lockMedia()
    {
        try
        {
            getTypedWrapped().lockMedia();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void unlockMedia()
    {
        try
        {
            getTypedWrapped().unlockMedia();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IMediumAttachment ejectMedium(org.virtualbox_4_3.IMediumAttachment attachment)
    {
        try
        {
            org.mozilla.interfaces.IMediumAttachment retVal;
            retVal = getTypedWrapped().ejectMedium((attachment != null) ? attachment.getTypedWrapped() : null);
            return (retVal != null) ? new org.virtualbox_4_3.IMediumAttachment(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void reportVmStatistics(Long validStats, Long cpuUser, Long cpuKernel, Long cpuIdle, Long memTotal, Long memFree, Long memBalloon, Long memShared, Long memCache, Long pagedTotal, Long memAllocTotal, Long memFreeTotal, Long memBalloonTotal, Long memSharedTotal, Long vmNetRx, Long vmNetTx)
    {
        try
        {
            getTypedWrapped().reportVmStatistics(validStats, cpuUser, cpuKernel, cpuIdle, memTotal, memFree, memBalloon, memShared, memCache, pagedTotal, memAllocTotal, memFreeTotal, memBalloonTotal, memSharedTotal, vmNetRx, vmNetTx);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IInternalMachineControl.java"


// ##### BEGINFILE "IBIOSSettings.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IBIOSSettings.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IBIOSSettings extends IUnknown
{

    public IBIOSSettings(org.mozilla.interfaces.IBIOSSettings wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IBIOSSettings getTypedWrapped()
    {
        return (org.mozilla.interfaces.IBIOSSettings) getWrapped();
    }
    public Boolean getLogoFadeIn()
    {
        try
        {
            boolean retVal = getTypedWrapped().getLogoFadeIn();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setLogoFadeIn(Boolean value)
    {
        try
        {
            getTypedWrapped().setLogoFadeIn(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getLogoFadeOut()
    {
        try
        {
            boolean retVal = getTypedWrapped().getLogoFadeOut();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setLogoFadeOut(Boolean value)
    {
        try
        {
            getTypedWrapped().setLogoFadeOut(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getLogoDisplayTime()
    {
        try
        {
            long retVal = getTypedWrapped().getLogoDisplayTime();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setLogoDisplayTime(Long value)
    {
        try
        {
            getTypedWrapped().setLogoDisplayTime(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getLogoImagePath()
    {
        try
        {
            String retVal = getTypedWrapped().getLogoImagePath();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setLogoImagePath(String value)
    {
        try
        {
            getTypedWrapped().setLogoImagePath(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.BIOSBootMenuMode getBootMenuMode()
    {
        try
        {
            long retVal = getTypedWrapped().getBootMenuMode();
            return org.virtualbox_4_3.BIOSBootMenuMode.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setBootMenuMode(org.virtualbox_4_3.BIOSBootMenuMode value)
    {
        try
        {
            getTypedWrapped().setBootMenuMode(value.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getACPIEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getACPIEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setACPIEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setACPIEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getIOAPICEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getIOAPICEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setIOAPICEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setIOAPICEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getTimeOffset()
    {
        try
        {
            long retVal = getTypedWrapped().getTimeOffset();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setTimeOffset(Long value)
    {
        try
        {
            getTypedWrapped().setTimeOffset(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getPXEDebugEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getPXEDebugEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setPXEDebugEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setPXEDebugEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getNonVolatileStorageFile()
    {
        try
        {
            String retVal = getTypedWrapped().getNonVolatileStorageFile();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IBIOSSettings queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IBIOSSettings qiobj = Helper.queryInterface(nsobj, "{38b54279-dc35-4f5e-a431-835b867c6b5e}", org.mozilla.interfaces.IBIOSSettings.class);
        return qiobj == null ? null : new IBIOSSettings(qiobj);
    }
}

// ##### ENDFILE "IBIOSSettings.java"


// ##### BEGINFILE "IPCIAddress.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IPCIAddress.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IPCIAddress extends IUnknown
{

    public IPCIAddress(org.mozilla.interfaces.IPCIAddress wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IPCIAddress getTypedWrapped()
    {
        return (org.mozilla.interfaces.IPCIAddress) getWrapped();
    }
    public Short getBus()
    {
        try
        {
            short retVal = getTypedWrapped().getBus();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setBus(Short value)
    {
        try
        {
            getTypedWrapped().setBus(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Short getDevice()
    {
        try
        {
            short retVal = getTypedWrapped().getDevice();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setDevice(Short value)
    {
        try
        {
            getTypedWrapped().setDevice(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Short getDevFunction()
    {
        try
        {
            short retVal = getTypedWrapped().getDevFunction();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setDevFunction(Short value)
    {
        try
        {
            getTypedWrapped().setDevFunction(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IPCIAddress queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IPCIAddress qiobj = Helper.queryInterface(nsobj, "{c984d15f-e191-400b-840e-970f3dad7296}", org.mozilla.interfaces.IPCIAddress.class);
        return qiobj == null ? null : new IPCIAddress(qiobj);
    }
    public Integer asLong()
    {
        try
        {
            int retVal;
            retVal = getTypedWrapped().asLong();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void fromLong(Integer number)
    {
        try
        {
            getTypedWrapped().fromLong(number);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IPCIAddress.java"


// ##### BEGINFILE "IPCIDeviceAttachment.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IPCIDeviceAttachment.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IPCIDeviceAttachment extends IUnknown
{

    public IPCIDeviceAttachment(org.mozilla.interfaces.IPCIDeviceAttachment wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IPCIDeviceAttachment getTypedWrapped()
    {
        return (org.mozilla.interfaces.IPCIDeviceAttachment) getWrapped();
    }
    public String getName()
    {
        try
        {
            String retVal = getTypedWrapped().getName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getIsPhysicalDevice()
    {
        try
        {
            boolean retVal = getTypedWrapped().getIsPhysicalDevice();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getHostAddress()
    {
        try
        {
            int retVal = getTypedWrapped().getHostAddress();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getGuestAddress()
    {
        try
        {
            int retVal = getTypedWrapped().getGuestAddress();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IPCIDeviceAttachment queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IPCIDeviceAttachment qiobj = Helper.queryInterface(nsobj, "{91f33d6f-e621-4f70-a77e-15f0e3c714d5}", org.mozilla.interfaces.IPCIDeviceAttachment.class);
        return qiobj == null ? null : new IPCIDeviceAttachment(qiobj);
    }
}

// ##### ENDFILE "IPCIDeviceAttachment.java"


// ##### BEGINFILE "IMachine.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IMachine.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IMachine extends IUnknown
{

    public IMachine(org.mozilla.interfaces.IMachine wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IMachine getTypedWrapped()
    {
        return (org.mozilla.interfaces.IMachine) getWrapped();
    }
    public org.virtualbox_4_3.IVirtualBox getParent()
    {
        try
        {
            org.mozilla.interfaces.IVirtualBox retVal = getTypedWrapped().getParent();
            return (retVal != null) ? new org.virtualbox_4_3.IVirtualBox(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public byte[] getIcon()
    {
        try
        {
            byte[] retVal = getTypedWrapped().getIcon(null);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setIcon(byte[] value)
    {
        try
        {
            getTypedWrapped().setIcon(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getAccessible()
    {
        try
        {
            boolean retVal = getTypedWrapped().getAccessible();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IVirtualBoxErrorInfo getAccessError()
    {
        try
        {
            org.mozilla.interfaces.IVirtualBoxErrorInfo retVal = getTypedWrapped().getAccessError();
            return (retVal != null) ? new org.virtualbox_4_3.IVirtualBoxErrorInfo(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getName()
    {
        try
        {
            String retVal = getTypedWrapped().getName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setName(String value)
    {
        try
        {
            getTypedWrapped().setName(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getDescription()
    {
        try
        {
            String retVal = getTypedWrapped().getDescription();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setDescription(String value)
    {
        try
        {
            getTypedWrapped().setDescription(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getId()
    {
        try
        {
            String retVal = getTypedWrapped().getId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getGroups()
    {
        try
        {
            String[] retVal = getTypedWrapped().getGroups(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setGroups(List<String> value)
    {
        try
        {
            getTypedWrapped().setGroups(Helper.unwrapStr(value));
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getOSTypeId()
    {
        try
        {
            String retVal = getTypedWrapped().getOSTypeId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setOSTypeId(String value)
    {
        try
        {
            getTypedWrapped().setOSTypeId(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getHardwareVersion()
    {
        try
        {
            String retVal = getTypedWrapped().getHardwareVersion();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setHardwareVersion(String value)
    {
        try
        {
            getTypedWrapped().setHardwareVersion(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getHardwareUUID()
    {
        try
        {
            String retVal = getTypedWrapped().getHardwareUUID();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setHardwareUUID(String value)
    {
        try
        {
            getTypedWrapped().setHardwareUUID(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getCPUCount()
    {
        try
        {
            long retVal = getTypedWrapped().getCPUCount();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setCPUCount(Long value)
    {
        try
        {
            getTypedWrapped().setCPUCount(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getCPUHotPlugEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getCPUHotPlugEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setCPUHotPlugEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setCPUHotPlugEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getCPUExecutionCap()
    {
        try
        {
            long retVal = getTypedWrapped().getCPUExecutionCap();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setCPUExecutionCap(Long value)
    {
        try
        {
            getTypedWrapped().setCPUExecutionCap(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getMemorySize()
    {
        try
        {
            long retVal = getTypedWrapped().getMemorySize();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setMemorySize(Long value)
    {
        try
        {
            getTypedWrapped().setMemorySize(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getMemoryBalloonSize()
    {
        try
        {
            long retVal = getTypedWrapped().getMemoryBalloonSize();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setMemoryBalloonSize(Long value)
    {
        try
        {
            getTypedWrapped().setMemoryBalloonSize(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getPageFusionEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getPageFusionEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setPageFusionEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setPageFusionEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.GraphicsControllerType getGraphicsControllerType()
    {
        try
        {
            long retVal = getTypedWrapped().getGraphicsControllerType();
            return org.virtualbox_4_3.GraphicsControllerType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setGraphicsControllerType(org.virtualbox_4_3.GraphicsControllerType value)
    {
        try
        {
            getTypedWrapped().setGraphicsControllerType(value.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getVRAMSize()
    {
        try
        {
            long retVal = getTypedWrapped().getVRAMSize();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setVRAMSize(Long value)
    {
        try
        {
            getTypedWrapped().setVRAMSize(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getAccelerate3DEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getAccelerate3DEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setAccelerate3DEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setAccelerate3DEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getAccelerate2DVideoEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getAccelerate2DVideoEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setAccelerate2DVideoEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setAccelerate2DVideoEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getMonitorCount()
    {
        try
        {
            long retVal = getTypedWrapped().getMonitorCount();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setMonitorCount(Long value)
    {
        try
        {
            getTypedWrapped().setMonitorCount(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getVideoCaptureEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getVideoCaptureEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setVideoCaptureEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setVideoCaptureEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<Boolean> getVideoCaptureScreens()
    {
        try
        {
            boolean[] retVal = getTypedWrapped().getVideoCaptureScreens(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setVideoCaptureScreens(List<Boolean> value)
    {
        try
        {
            getTypedWrapped().setVideoCaptureScreens(Helper.unwrapBoolean(value));
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getVideoCaptureFile()
    {
        try
        {
            String retVal = getTypedWrapped().getVideoCaptureFile();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setVideoCaptureFile(String value)
    {
        try
        {
            getTypedWrapped().setVideoCaptureFile(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getVideoCaptureWidth()
    {
        try
        {
            long retVal = getTypedWrapped().getVideoCaptureWidth();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setVideoCaptureWidth(Long value)
    {
        try
        {
            getTypedWrapped().setVideoCaptureWidth(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getVideoCaptureHeight()
    {
        try
        {
            long retVal = getTypedWrapped().getVideoCaptureHeight();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setVideoCaptureHeight(Long value)
    {
        try
        {
            getTypedWrapped().setVideoCaptureHeight(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getVideoCaptureRate()
    {
        try
        {
            long retVal = getTypedWrapped().getVideoCaptureRate();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setVideoCaptureRate(Long value)
    {
        try
        {
            getTypedWrapped().setVideoCaptureRate(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getVideoCaptureFPS()
    {
        try
        {
            long retVal = getTypedWrapped().getVideoCaptureFPS();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setVideoCaptureFPS(Long value)
    {
        try
        {
            getTypedWrapped().setVideoCaptureFPS(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IBIOSSettings getBIOSSettings()
    {
        try
        {
            org.mozilla.interfaces.IBIOSSettings retVal = getTypedWrapped().getBIOSSettings();
            return (retVal != null) ? new org.virtualbox_4_3.IBIOSSettings(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.FirmwareType getFirmwareType()
    {
        try
        {
            long retVal = getTypedWrapped().getFirmwareType();
            return org.virtualbox_4_3.FirmwareType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setFirmwareType(org.virtualbox_4_3.FirmwareType value)
    {
        try
        {
            getTypedWrapped().setFirmwareType(value.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.PointingHIDType getPointingHIDType()
    {
        try
        {
            long retVal = getTypedWrapped().getPointingHIDType();
            return org.virtualbox_4_3.PointingHIDType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setPointingHIDType(org.virtualbox_4_3.PointingHIDType value)
    {
        try
        {
            getTypedWrapped().setPointingHIDType(value.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.KeyboardHIDType getKeyboardHIDType()
    {
        try
        {
            long retVal = getTypedWrapped().getKeyboardHIDType();
            return org.virtualbox_4_3.KeyboardHIDType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setKeyboardHIDType(org.virtualbox_4_3.KeyboardHIDType value)
    {
        try
        {
            getTypedWrapped().setKeyboardHIDType(value.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getHPETEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getHPETEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setHPETEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setHPETEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.ChipsetType getChipsetType()
    {
        try
        {
            long retVal = getTypedWrapped().getChipsetType();
            return org.virtualbox_4_3.ChipsetType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setChipsetType(org.virtualbox_4_3.ChipsetType value)
    {
        try
        {
            getTypedWrapped().setChipsetType(value.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getSnapshotFolder()
    {
        try
        {
            String retVal = getTypedWrapped().getSnapshotFolder();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setSnapshotFolder(String value)
    {
        try
        {
            getTypedWrapped().setSnapshotFolder(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IVRDEServer getVRDEServer()
    {
        try
        {
            org.mozilla.interfaces.IVRDEServer retVal = getTypedWrapped().getVRDEServer();
            return (retVal != null) ? new org.virtualbox_4_3.IVRDEServer(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getEmulatedUSBCardReaderEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getEmulatedUSBCardReaderEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setEmulatedUSBCardReaderEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setEmulatedUSBCardReaderEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IMediumAttachment> getMediumAttachments()
    {
        try
        {
            org.mozilla.interfaces.IMediumAttachment[] retVal = getTypedWrapped().getMediumAttachments(null);
            return Helper.wrap2(org.virtualbox_4_3.IMediumAttachment.class, org.mozilla.interfaces.IMediumAttachment.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IUSBController> getUSBControllers()
    {
        try
        {
            org.mozilla.interfaces.IUSBController[] retVal = getTypedWrapped().getUSBControllers(null);
            return Helper.wrap2(org.virtualbox_4_3.IUSBController.class, org.mozilla.interfaces.IUSBController.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IUSBDeviceFilters getUSBDeviceFilters()
    {
        try
        {
            org.mozilla.interfaces.IUSBDeviceFilters retVal = getTypedWrapped().getUSBDeviceFilters();
            return (retVal != null) ? new org.virtualbox_4_3.IUSBDeviceFilters(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IAudioAdapter getAudioAdapter()
    {
        try
        {
            org.mozilla.interfaces.IAudioAdapter retVal = getTypedWrapped().getAudioAdapter();
            return (retVal != null) ? new org.virtualbox_4_3.IAudioAdapter(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IStorageController> getStorageControllers()
    {
        try
        {
            org.mozilla.interfaces.IStorageController[] retVal = getTypedWrapped().getStorageControllers(null);
            return Helper.wrap2(org.virtualbox_4_3.IStorageController.class, org.mozilla.interfaces.IStorageController.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getSettingsFilePath()
    {
        try
        {
            String retVal = getTypedWrapped().getSettingsFilePath();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getSettingsModified()
    {
        try
        {
            boolean retVal = getTypedWrapped().getSettingsModified();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.SessionState getSessionState()
    {
        try
        {
            long retVal = getTypedWrapped().getSessionState();
            return org.virtualbox_4_3.SessionState.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getSessionType()
    {
        try
        {
            String retVal = getTypedWrapped().getSessionType();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getSessionPID()
    {
        try
        {
            long retVal = getTypedWrapped().getSessionPID();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.MachineState getState()
    {
        try
        {
            long retVal = getTypedWrapped().getState();
            return org.virtualbox_4_3.MachineState.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getLastStateChange()
    {
        try
        {
            long retVal = getTypedWrapped().getLastStateChange();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getStateFilePath()
    {
        try
        {
            String retVal = getTypedWrapped().getStateFilePath();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getLogFolder()
    {
        try
        {
            String retVal = getTypedWrapped().getLogFolder();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.ISnapshot getCurrentSnapshot()
    {
        try
        {
            org.mozilla.interfaces.ISnapshot retVal = getTypedWrapped().getCurrentSnapshot();
            return (retVal != null) ? new org.virtualbox_4_3.ISnapshot(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getSnapshotCount()
    {
        try
        {
            long retVal = getTypedWrapped().getSnapshotCount();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getCurrentStateModified()
    {
        try
        {
            boolean retVal = getTypedWrapped().getCurrentStateModified();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.ISharedFolder> getSharedFolders()
    {
        try
        {
            org.mozilla.interfaces.ISharedFolder[] retVal = getTypedWrapped().getSharedFolders(null);
            return Helper.wrap2(org.virtualbox_4_3.ISharedFolder.class, org.mozilla.interfaces.ISharedFolder.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.ClipboardMode getClipboardMode()
    {
        try
        {
            long retVal = getTypedWrapped().getClipboardMode();
            return org.virtualbox_4_3.ClipboardMode.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setClipboardMode(org.virtualbox_4_3.ClipboardMode value)
    {
        try
        {
            getTypedWrapped().setClipboardMode(value.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.DragAndDropMode getDragAndDropMode()
    {
        try
        {
            long retVal = getTypedWrapped().getDragAndDropMode();
            return org.virtualbox_4_3.DragAndDropMode.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setDragAndDropMode(org.virtualbox_4_3.DragAndDropMode value)
    {
        try
        {
            getTypedWrapped().setDragAndDropMode(value.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getGuestPropertyNotificationPatterns()
    {
        try
        {
            String retVal = getTypedWrapped().getGuestPropertyNotificationPatterns();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setGuestPropertyNotificationPatterns(String value)
    {
        try
        {
            getTypedWrapped().setGuestPropertyNotificationPatterns(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getTeleporterEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getTeleporterEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setTeleporterEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setTeleporterEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getTeleporterPort()
    {
        try
        {
            long retVal = getTypedWrapped().getTeleporterPort();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setTeleporterPort(Long value)
    {
        try
        {
            getTypedWrapped().setTeleporterPort(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getTeleporterAddress()
    {
        try
        {
            String retVal = getTypedWrapped().getTeleporterAddress();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setTeleporterAddress(String value)
    {
        try
        {
            getTypedWrapped().setTeleporterAddress(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getTeleporterPassword()
    {
        try
        {
            String retVal = getTypedWrapped().getTeleporterPassword();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setTeleporterPassword(String value)
    {
        try
        {
            getTypedWrapped().setTeleporterPassword(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.FaultToleranceState getFaultToleranceState()
    {
        try
        {
            long retVal = getTypedWrapped().getFaultToleranceState();
            return org.virtualbox_4_3.FaultToleranceState.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setFaultToleranceState(org.virtualbox_4_3.FaultToleranceState value)
    {
        try
        {
            getTypedWrapped().setFaultToleranceState(value.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getFaultTolerancePort()
    {
        try
        {
            long retVal = getTypedWrapped().getFaultTolerancePort();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setFaultTolerancePort(Long value)
    {
        try
        {
            getTypedWrapped().setFaultTolerancePort(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getFaultToleranceAddress()
    {
        try
        {
            String retVal = getTypedWrapped().getFaultToleranceAddress();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setFaultToleranceAddress(String value)
    {
        try
        {
            getTypedWrapped().setFaultToleranceAddress(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getFaultTolerancePassword()
    {
        try
        {
            String retVal = getTypedWrapped().getFaultTolerancePassword();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setFaultTolerancePassword(String value)
    {
        try
        {
            getTypedWrapped().setFaultTolerancePassword(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getFaultToleranceSyncInterval()
    {
        try
        {
            long retVal = getTypedWrapped().getFaultToleranceSyncInterval();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setFaultToleranceSyncInterval(Long value)
    {
        try
        {
            getTypedWrapped().setFaultToleranceSyncInterval(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getRTCUseUTC()
    {
        try
        {
            boolean retVal = getTypedWrapped().getRTCUseUTC();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setRTCUseUTC(Boolean value)
    {
        try
        {
            getTypedWrapped().setRTCUseUTC(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getIOCacheEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getIOCacheEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setIOCacheEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setIOCacheEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getIOCacheSize()
    {
        try
        {
            long retVal = getTypedWrapped().getIOCacheSize();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setIOCacheSize(Long value)
    {
        try
        {
            getTypedWrapped().setIOCacheSize(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IPCIDeviceAttachment> getPCIDeviceAssignments()
    {
        try
        {
            org.mozilla.interfaces.IPCIDeviceAttachment[] retVal = getTypedWrapped().getPCIDeviceAssignments(null);
            return Helper.wrap2(org.virtualbox_4_3.IPCIDeviceAttachment.class, org.mozilla.interfaces.IPCIDeviceAttachment.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IBandwidthControl getBandwidthControl()
    {
        try
        {
            org.mozilla.interfaces.IBandwidthControl retVal = getTypedWrapped().getBandwidthControl();
            return (retVal != null) ? new org.virtualbox_4_3.IBandwidthControl(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getTracingEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getTracingEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setTracingEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setTracingEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getTracingConfig()
    {
        try
        {
            String retVal = getTypedWrapped().getTracingConfig();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setTracingConfig(String value)
    {
        try
        {
            getTypedWrapped().setTracingConfig(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getAllowTracingToAccessVM()
    {
        try
        {
            boolean retVal = getTypedWrapped().getAllowTracingToAccessVM();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setAllowTracingToAccessVM(Boolean value)
    {
        try
        {
            getTypedWrapped().setAllowTracingToAccessVM(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getAutostartEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getAutostartEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setAutostartEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setAutostartEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getAutostartDelay()
    {
        try
        {
            long retVal = getTypedWrapped().getAutostartDelay();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setAutostartDelay(Long value)
    {
        try
        {
            getTypedWrapped().setAutostartDelay(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.AutostopType getAutostopType()
    {
        try
        {
            long retVal = getTypedWrapped().getAutostopType();
            return org.virtualbox_4_3.AutostopType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setAutostopType(org.virtualbox_4_3.AutostopType value)
    {
        try
        {
            getTypedWrapped().setAutostopType(value.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getDefaultFrontend()
    {
        try
        {
            String retVal = getTypedWrapped().getDefaultFrontend();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setDefaultFrontend(String value)
    {
        try
        {
            getTypedWrapped().setDefaultFrontend(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getUSBProxyAvailable()
    {
        try
        {
            boolean retVal = getTypedWrapped().getUSBProxyAvailable();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IMachine queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IMachine qiobj = Helper.queryInterface(nsobj, "{480cf695-2d8d-4256-9c7c-cce4184fa048}", org.mozilla.interfaces.IMachine.class);
        return qiobj == null ? null : new IMachine(qiobj);
    }
    public void lockMachine(org.virtualbox_4_3.ISession session, org.virtualbox_4_3.LockType lockType)
    {
        try
        {
            getTypedWrapped().lockMachine((session != null) ? session.getTypedWrapped() : null, lockType.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress launchVMProcess(org.virtualbox_4_3.ISession session, String type, String environment)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().launchVMProcess((session != null) ? session.getTypedWrapped() : null, type, environment);
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setBootOrder(Long position, org.virtualbox_4_3.DeviceType device)
    {
        try
        {
            getTypedWrapped().setBootOrder(position, device.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.DeviceType getBootOrder(Long position)
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().getBootOrder(position);
            return org.virtualbox_4_3.DeviceType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void attachDevice(String name, Integer controllerPort, Integer device, org.virtualbox_4_3.DeviceType type, org.virtualbox_4_3.IMedium medium)
    {
        try
        {
            getTypedWrapped().attachDevice(name, controllerPort, device, type.value(), (medium != null) ? medium.getTypedWrapped() : null);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void attachDeviceWithoutMedium(String name, Integer controllerPort, Integer device, org.virtualbox_4_3.DeviceType type)
    {
        try
        {
            getTypedWrapped().attachDeviceWithoutMedium(name, controllerPort, device, type.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void detachDevice(String name, Integer controllerPort, Integer device)
    {
        try
        {
            getTypedWrapped().detachDevice(name, controllerPort, device);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void passthroughDevice(String name, Integer controllerPort, Integer device, Boolean passthrough)
    {
        try
        {
            getTypedWrapped().passthroughDevice(name, controllerPort, device, passthrough);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void temporaryEjectDevice(String name, Integer controllerPort, Integer device, Boolean temporaryEject)
    {
        try
        {
            getTypedWrapped().temporaryEjectDevice(name, controllerPort, device, temporaryEject);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void nonRotationalDevice(String name, Integer controllerPort, Integer device, Boolean nonRotational)
    {
        try
        {
            getTypedWrapped().nonRotationalDevice(name, controllerPort, device, nonRotational);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setAutoDiscardForDevice(String name, Integer controllerPort, Integer device, Boolean discard)
    {
        try
        {
            getTypedWrapped().setAutoDiscardForDevice(name, controllerPort, device, discard);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setHotPluggableForDevice(String name, Integer controllerPort, Integer device, Boolean hotPluggable)
    {
        try
        {
            getTypedWrapped().setHotPluggableForDevice(name, controllerPort, device, hotPluggable);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setBandwidthGroupForDevice(String name, Integer controllerPort, Integer device, org.virtualbox_4_3.IBandwidthGroup bandwidthGroup)
    {
        try
        {
            getTypedWrapped().setBandwidthGroupForDevice(name, controllerPort, device, (bandwidthGroup != null) ? bandwidthGroup.getTypedWrapped() : null);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setNoBandwidthGroupForDevice(String name, Integer controllerPort, Integer device)
    {
        try
        {
            getTypedWrapped().setNoBandwidthGroupForDevice(name, controllerPort, device);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void unmountMedium(String name, Integer controllerPort, Integer device, Boolean force)
    {
        try
        {
            getTypedWrapped().unmountMedium(name, controllerPort, device, force);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void mountMedium(String name, Integer controllerPort, Integer device, org.virtualbox_4_3.IMedium medium, Boolean force)
    {
        try
        {
            getTypedWrapped().mountMedium(name, controllerPort, device, (medium != null) ? medium.getTypedWrapped() : null, force);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IMedium getMedium(String name, Integer controllerPort, Integer device)
    {
        try
        {
            org.mozilla.interfaces.IMedium retVal;
            retVal = getTypedWrapped().getMedium(name, controllerPort, device);
            return (retVal != null) ? new org.virtualbox_4_3.IMedium(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IMediumAttachment> getMediumAttachmentsOfController(String name)
    {
        try
        {
            org.mozilla.interfaces.IMediumAttachment[] retVal;
            retVal = getTypedWrapped().getMediumAttachmentsOfController(name, null);
            return Helper.wrap2(org.virtualbox_4_3.IMediumAttachment.class, org.mozilla.interfaces.IMediumAttachment.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IMediumAttachment getMediumAttachment(String name, Integer controllerPort, Integer device)
    {
        try
        {
            org.mozilla.interfaces.IMediumAttachment retVal;
            retVal = getTypedWrapped().getMediumAttachment(name, controllerPort, device);
            return (retVal != null) ? new org.virtualbox_4_3.IMediumAttachment(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void attachHostPCIDevice(Integer hostAddress, Integer desiredGuestAddress, Boolean tryToUnbind)
    {
        try
        {
            getTypedWrapped().attachHostPCIDevice(hostAddress, desiredGuestAddress, tryToUnbind);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void detachHostPCIDevice(Integer hostAddress)
    {
        try
        {
            getTypedWrapped().detachHostPCIDevice(hostAddress);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.INetworkAdapter getNetworkAdapter(Long slot)
    {
        try
        {
            org.mozilla.interfaces.INetworkAdapter retVal;
            retVal = getTypedWrapped().getNetworkAdapter(slot);
            return (retVal != null) ? new org.virtualbox_4_3.INetworkAdapter(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IStorageController addStorageController(String name, org.virtualbox_4_3.StorageBus connectionType)
    {
        try
        {
            org.mozilla.interfaces.IStorageController retVal;
            retVal = getTypedWrapped().addStorageController(name, connectionType.value());
            return (retVal != null) ? new org.virtualbox_4_3.IStorageController(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IStorageController getStorageControllerByName(String name)
    {
        try
        {
            org.mozilla.interfaces.IStorageController retVal;
            retVal = getTypedWrapped().getStorageControllerByName(name);
            return (retVal != null) ? new org.virtualbox_4_3.IStorageController(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IStorageController getStorageControllerByInstance(Long instance)
    {
        try
        {
            org.mozilla.interfaces.IStorageController retVal;
            retVal = getTypedWrapped().getStorageControllerByInstance(instance);
            return (retVal != null) ? new org.virtualbox_4_3.IStorageController(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void removeStorageController(String name)
    {
        try
        {
            getTypedWrapped().removeStorageController(name);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setStorageControllerBootable(String name, Boolean bootable)
    {
        try
        {
            getTypedWrapped().setStorageControllerBootable(name, bootable);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IUSBController addUSBController(String name, org.virtualbox_4_3.USBControllerType type)
    {
        try
        {
            org.mozilla.interfaces.IUSBController retVal;
            retVal = getTypedWrapped().addUSBController(name, type.value());
            return (retVal != null) ? new org.virtualbox_4_3.IUSBController(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void removeUSBController(String name)
    {
        try
        {
            getTypedWrapped().removeUSBController(name);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IUSBController getUSBControllerByName(String name)
    {
        try
        {
            org.mozilla.interfaces.IUSBController retVal;
            retVal = getTypedWrapped().getUSBControllerByName(name);
            return (retVal != null) ? new org.virtualbox_4_3.IUSBController(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getUSBControllerCountByType(org.virtualbox_4_3.USBControllerType type)
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().getUSBControllerCountByType(type.value());
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.ISerialPort getSerialPort(Long slot)
    {
        try
        {
            org.mozilla.interfaces.ISerialPort retVal;
            retVal = getTypedWrapped().getSerialPort(slot);
            return (retVal != null) ? new org.virtualbox_4_3.ISerialPort(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IParallelPort getParallelPort(Long slot)
    {
        try
        {
            org.mozilla.interfaces.IParallelPort retVal;
            retVal = getTypedWrapped().getParallelPort(slot);
            return (retVal != null) ? new org.virtualbox_4_3.IParallelPort(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getExtraDataKeys()
    {
        try
        {
            String[] retVal;
            retVal = getTypedWrapped().getExtraDataKeys(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getExtraData(String key)
    {
        try
        {
            String retVal;
            retVal = getTypedWrapped().getExtraData(key);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setExtraData(String key, String value)
    {
        try
        {
            getTypedWrapped().setExtraData(key, value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getCPUProperty(org.virtualbox_4_3.CPUPropertyType property)
    {
        try
        {
            boolean retVal;
            retVal = getTypedWrapped().getCPUProperty(property.value());
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setCPUProperty(org.virtualbox_4_3.CPUPropertyType property, Boolean value)
    {
        try
        {
            getTypedWrapped().setCPUProperty(property.value(), value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void getCPUIDLeaf(Long id, Holder<Long> valEax, Holder<Long> valEbx, Holder<Long> valEcx, Holder<Long> valEdx)
    {
        try
        {
        long[] tmp_valEax = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_valEbx = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_valEcx = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_valEdx = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
            getTypedWrapped().getCPUIDLeaf(id, tmp_valEax, tmp_valEbx, tmp_valEcx, tmp_valEdx);
        valEax.value = tmp_valEax[0];
        valEbx.value = tmp_valEbx[0];
        valEcx.value = tmp_valEcx[0];
        valEdx.value = tmp_valEdx[0];
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setCPUIDLeaf(Long id, Long valEax, Long valEbx, Long valEcx, Long valEdx)
    {
        try
        {
            getTypedWrapped().setCPUIDLeaf(id, valEax, valEbx, valEcx, valEdx);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void removeCPUIDLeaf(Long id)
    {
        try
        {
            getTypedWrapped().removeCPUIDLeaf(id);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void removeAllCPUIDLeaves()
    {
        try
        {
            getTypedWrapped().removeAllCPUIDLeaves();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getHWVirtExProperty(org.virtualbox_4_3.HWVirtExPropertyType property)
    {
        try
        {
            boolean retVal;
            retVal = getTypedWrapped().getHWVirtExProperty(property.value());
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setHWVirtExProperty(org.virtualbox_4_3.HWVirtExPropertyType property, Boolean value)
    {
        try
        {
            getTypedWrapped().setHWVirtExProperty(property.value(), value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress setSettingsFilePath(String settingsFilePath)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().setSettingsFilePath(settingsFilePath);
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void saveSettings()
    {
        try
        {
            getTypedWrapped().saveSettings();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void discardSettings()
    {
        try
        {
            getTypedWrapped().discardSettings();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IMedium> unregister(org.virtualbox_4_3.CleanupMode cleanupMode)
    {
        try
        {
            org.mozilla.interfaces.IMedium[] retVal;
            retVal = getTypedWrapped().unregister(cleanupMode.value(), null);
            return Helper.wrap2(org.virtualbox_4_3.IMedium.class, org.mozilla.interfaces.IMedium.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress deleteConfig(List<org.virtualbox_4_3.IMedium> media)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().deleteConfig(media != null ? media.size() : 0, Helper.unwrap2(org.virtualbox_4_3.IMedium.class, org.mozilla.interfaces.IMedium.class, media));
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IVirtualSystemDescription exportTo(org.virtualbox_4_3.IAppliance appliance, String location)
    {
        try
        {
            org.mozilla.interfaces.IVirtualSystemDescription retVal;
            retVal = getTypedWrapped().exportTo((appliance != null) ? appliance.getTypedWrapped() : null, location);
            return (retVal != null) ? new org.virtualbox_4_3.IVirtualSystemDescription(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.ISnapshot findSnapshot(String nameOrId)
    {
        try
        {
            org.mozilla.interfaces.ISnapshot retVal;
            retVal = getTypedWrapped().findSnapshot(nameOrId);
            return (retVal != null) ? new org.virtualbox_4_3.ISnapshot(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void createSharedFolder(String name, String hostPath, Boolean writable, Boolean automount)
    {
        try
        {
            getTypedWrapped().createSharedFolder(name, hostPath, writable, automount);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void removeSharedFolder(String name)
    {
        try
        {
            getTypedWrapped().removeSharedFolder(name);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean canShowConsoleWindow()
    {
        try
        {
            boolean retVal;
            retVal = getTypedWrapped().canShowConsoleWindow();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long showConsoleWindow()
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().showConsoleWindow();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void getGuestProperty(String name, Holder<String> value, Holder<Long> timestamp, Holder<String> flags)
    {
        try
        {
        String[] tmp_value = (String[])java.lang.reflect.Array.newInstance(String.class, 1);
        long[] tmp_timestamp = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        String[] tmp_flags = (String[])java.lang.reflect.Array.newInstance(String.class, 1);
            getTypedWrapped().getGuestProperty(name, tmp_value, tmp_timestamp, tmp_flags);
        value.value = tmp_value[0];
        timestamp.value = tmp_timestamp[0];
        flags.value = tmp_flags[0];
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getGuestPropertyValue(String property)
    {
        try
        {
            String retVal;
            retVal = getTypedWrapped().getGuestPropertyValue(property);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getGuestPropertyTimestamp(String property)
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().getGuestPropertyTimestamp(property);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setGuestProperty(String property, String value, String flags)
    {
        try
        {
            getTypedWrapped().setGuestProperty(property, value, flags);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setGuestPropertyValue(String property, String value)
    {
        try
        {
            getTypedWrapped().setGuestPropertyValue(property, value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void deleteGuestProperty(String name)
    {
        try
        {
            getTypedWrapped().deleteGuestProperty(name);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void enumerateGuestProperties(String patterns, Holder<List<String>> names, Holder<List<String>> values, Holder<List<Long>> timestamps, Holder<List<String>> flags)
    {
        try
        {
        String[][] tmp_names = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
        String[][] tmp_values = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
        long[][] tmp_timestamps = (long[][])java.lang.reflect.Array.newInstance(long[].class, 1);
        String[][] tmp_flags = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
            getTypedWrapped().enumerateGuestProperties(patterns, null, tmp_names, null, tmp_values, null, tmp_timestamps, null, tmp_flags);
        names.value = Helper.wrap(tmp_names[0]);
        values.value = Helper.wrap(tmp_values[0]);
        timestamps.value = Helper.wrap(tmp_timestamps[0]);
        flags.value = Helper.wrap(tmp_flags[0]);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void querySavedGuestScreenInfo(Long screenId, Holder<Long> originX, Holder<Long> originY, Holder<Long> width, Holder<Long> height, Holder<Boolean> enabled)
    {
        try
        {
        long[] tmp_originX = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_originY = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_width = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_height = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        boolean[] tmp_enabled = (boolean[])java.lang.reflect.Array.newInstance(boolean.class, 1);
            getTypedWrapped().querySavedGuestScreenInfo(screenId, tmp_originX, tmp_originY, tmp_width, tmp_height, tmp_enabled);
        originX.value = tmp_originX[0];
        originY.value = tmp_originY[0];
        width.value = tmp_width[0];
        height.value = tmp_height[0];
        enabled.value = tmp_enabled[0];
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void querySavedThumbnailSize(Long screenId, Holder<Long> size, Holder<Long> width, Holder<Long> height)
    {
        try
        {
        long[] tmp_size = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_width = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_height = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
            getTypedWrapped().querySavedThumbnailSize(screenId, tmp_size, tmp_width, tmp_height);
        size.value = tmp_size[0];
        width.value = tmp_width[0];
        height.value = tmp_height[0];
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public byte[] readSavedThumbnailToArray(Long screenId, Boolean BGR, Holder<Long> width, Holder<Long> height)
    {
        try
        {
        long[] tmp_width = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_height = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
            byte[] retVal;
            retVal = getTypedWrapped().readSavedThumbnailToArray(screenId, BGR, tmp_width, tmp_height, null);
        width.value = tmp_width[0];
        height.value = tmp_height[0];
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public byte[] readSavedThumbnailPNGToArray(Long screenId, Holder<Long> width, Holder<Long> height)
    {
        try
        {
        long[] tmp_width = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_height = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
            byte[] retVal;
            retVal = getTypedWrapped().readSavedThumbnailPNGToArray(screenId, tmp_width, tmp_height, null);
        width.value = tmp_width[0];
        height.value = tmp_height[0];
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void querySavedScreenshotPNGSize(Long screenId, Holder<Long> size, Holder<Long> width, Holder<Long> height)
    {
        try
        {
        long[] tmp_size = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_width = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_height = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
            getTypedWrapped().querySavedScreenshotPNGSize(screenId, tmp_size, tmp_width, tmp_height);
        size.value = tmp_size[0];
        width.value = tmp_width[0];
        height.value = tmp_height[0];
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public byte[] readSavedScreenshotPNGToArray(Long screenId, Holder<Long> width, Holder<Long> height)
    {
        try
        {
        long[] tmp_width = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_height = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
            byte[] retVal;
            retVal = getTypedWrapped().readSavedScreenshotPNGToArray(screenId, tmp_width, tmp_height, null);
        width.value = tmp_width[0];
        height.value = tmp_height[0];
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void hotPlugCPU(Long cpu)
    {
        try
        {
            getTypedWrapped().hotPlugCPU(cpu);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void hotUnplugCPU(Long cpu)
    {
        try
        {
            getTypedWrapped().hotUnplugCPU(cpu);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getCPUStatus(Long cpu)
    {
        try
        {
            boolean retVal;
            retVal = getTypedWrapped().getCPUStatus(cpu);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String queryLogFilename(Long idx)
    {
        try
        {
            String retVal;
            retVal = getTypedWrapped().queryLogFilename(idx);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public byte[] readLog(Long idx, Long offset, Long size)
    {
        try
        {
            byte[] retVal;
            retVal = getTypedWrapped().readLog(idx, offset, size, null);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress cloneTo(org.virtualbox_4_3.IMachine target, org.virtualbox_4_3.CloneMode mode, List<org.virtualbox_4_3.CloneOptions> options)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().cloneTo((target != null) ? target.getTypedWrapped() : null, mode.value(), options != null ? options.size() : 0, Helper.unwrapEnum(org.virtualbox_4_3.CloneOptions.class, options));
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IMachine.java"


// ##### BEGINFILE "IEmulatedUSB.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IEmulatedUSB.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IEmulatedUSB extends IUnknown
{

    public IEmulatedUSB(org.mozilla.interfaces.IEmulatedUSB wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IEmulatedUSB getTypedWrapped()
    {
        return (org.mozilla.interfaces.IEmulatedUSB) getWrapped();
    }
    public List<String> getWebcams()
    {
        try
        {
            String[] retVal = getTypedWrapped().getWebcams(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IEmulatedUSB queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IEmulatedUSB qiobj = Helper.queryInterface(nsobj, "{38cc4dfd-8bb2-4d40-aebe-699eead8c2dd}", org.mozilla.interfaces.IEmulatedUSB.class);
        return qiobj == null ? null : new IEmulatedUSB(qiobj);
    }
    public void webcamAttach(String path, String settings)
    {
        try
        {
            getTypedWrapped().webcamAttach(path, settings);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void webcamDetach(String path)
    {
        try
        {
            getTypedWrapped().webcamDetach(path);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IEmulatedUSB.java"


// ##### BEGINFILE "IVRDEServerInfo.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IVRDEServerInfo.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IVRDEServerInfo extends IUnknown
{

    public IVRDEServerInfo(org.mozilla.interfaces.IVRDEServerInfo wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IVRDEServerInfo getTypedWrapped()
    {
        return (org.mozilla.interfaces.IVRDEServerInfo) getWrapped();
    }
    public Boolean getActive()
    {
        try
        {
            boolean retVal = getTypedWrapped().getActive();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getPort()
    {
        try
        {
            int retVal = getTypedWrapped().getPort();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getNumberOfClients()
    {
        try
        {
            long retVal = getTypedWrapped().getNumberOfClients();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getBeginTime()
    {
        try
        {
            long retVal = getTypedWrapped().getBeginTime();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getEndTime()
    {
        try
        {
            long retVal = getTypedWrapped().getEndTime();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getBytesSent()
    {
        try
        {
            long retVal = getTypedWrapped().getBytesSent();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getBytesSentTotal()
    {
        try
        {
            long retVal = getTypedWrapped().getBytesSentTotal();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getBytesReceived()
    {
        try
        {
            long retVal = getTypedWrapped().getBytesReceived();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getBytesReceivedTotal()
    {
        try
        {
            long retVal = getTypedWrapped().getBytesReceivedTotal();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getUser()
    {
        try
        {
            String retVal = getTypedWrapped().getUser();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getDomain()
    {
        try
        {
            String retVal = getTypedWrapped().getDomain();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getClientName()
    {
        try
        {
            String retVal = getTypedWrapped().getClientName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getClientIP()
    {
        try
        {
            String retVal = getTypedWrapped().getClientIP();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getClientVersion()
    {
        try
        {
            long retVal = getTypedWrapped().getClientVersion();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getEncryptionStyle()
    {
        try
        {
            long retVal = getTypedWrapped().getEncryptionStyle();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IVRDEServerInfo queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IVRDEServerInfo qiobj = Helper.queryInterface(nsobj, "{714434a1-58c3-4aab-9049-7652c5df113b}", org.mozilla.interfaces.IVRDEServerInfo.class);
        return qiobj == null ? null : new IVRDEServerInfo(qiobj);
    }
}

// ##### ENDFILE "IVRDEServerInfo.java"


// ##### BEGINFILE "IConsole.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IConsole.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IConsole extends IUnknown
{

    public IConsole(org.mozilla.interfaces.IConsole wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IConsole getTypedWrapped()
    {
        return (org.mozilla.interfaces.IConsole) getWrapped();
    }
    public org.virtualbox_4_3.IMachine getMachine()
    {
        try
        {
            org.mozilla.interfaces.IMachine retVal = getTypedWrapped().getMachine();
            return (retVal != null) ? new org.virtualbox_4_3.IMachine(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.MachineState getState()
    {
        try
        {
            long retVal = getTypedWrapped().getState();
            return org.virtualbox_4_3.MachineState.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IGuest getGuest()
    {
        try
        {
            org.mozilla.interfaces.IGuest retVal = getTypedWrapped().getGuest();
            return (retVal != null) ? new org.virtualbox_4_3.IGuest(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IKeyboard getKeyboard()
    {
        try
        {
            org.mozilla.interfaces.IKeyboard retVal = getTypedWrapped().getKeyboard();
            return (retVal != null) ? new org.virtualbox_4_3.IKeyboard(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IMouse getMouse()
    {
        try
        {
            org.mozilla.interfaces.IMouse retVal = getTypedWrapped().getMouse();
            return (retVal != null) ? new org.virtualbox_4_3.IMouse(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IDisplay getDisplay()
    {
        try
        {
            org.mozilla.interfaces.IDisplay retVal = getTypedWrapped().getDisplay();
            return (retVal != null) ? new org.virtualbox_4_3.IDisplay(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IMachineDebugger getDebugger()
    {
        try
        {
            org.mozilla.interfaces.IMachineDebugger retVal = getTypedWrapped().getDebugger();
            return (retVal != null) ? new org.virtualbox_4_3.IMachineDebugger(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IUSBDevice> getUSBDevices()
    {
        try
        {
            org.mozilla.interfaces.IUSBDevice[] retVal = getTypedWrapped().getUSBDevices(null);
            return Helper.wrap2(org.virtualbox_4_3.IUSBDevice.class, org.mozilla.interfaces.IUSBDevice.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IHostUSBDevice> getRemoteUSBDevices()
    {
        try
        {
            org.mozilla.interfaces.IHostUSBDevice[] retVal = getTypedWrapped().getRemoteUSBDevices(null);
            return Helper.wrap2(org.virtualbox_4_3.IHostUSBDevice.class, org.mozilla.interfaces.IHostUSBDevice.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.ISharedFolder> getSharedFolders()
    {
        try
        {
            org.mozilla.interfaces.ISharedFolder[] retVal = getTypedWrapped().getSharedFolders(null);
            return Helper.wrap2(org.virtualbox_4_3.ISharedFolder.class, org.mozilla.interfaces.ISharedFolder.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IVRDEServerInfo getVRDEServerInfo()
    {
        try
        {
            org.mozilla.interfaces.IVRDEServerInfo retVal = getTypedWrapped().getVRDEServerInfo();
            return (retVal != null) ? new org.virtualbox_4_3.IVRDEServerInfo(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IEventSource getEventSource()
    {
        try
        {
            org.mozilla.interfaces.IEventSource retVal = getTypedWrapped().getEventSource();
            return (retVal != null) ? new org.virtualbox_4_3.IEventSource(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IPCIDeviceAttachment> getAttachedPCIDevices()
    {
        try
        {
            org.mozilla.interfaces.IPCIDeviceAttachment[] retVal = getTypedWrapped().getAttachedPCIDevices(null);
            return Helper.wrap2(org.virtualbox_4_3.IPCIDeviceAttachment.class, org.mozilla.interfaces.IPCIDeviceAttachment.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getUseHostClipboard()
    {
        try
        {
            boolean retVal = getTypedWrapped().getUseHostClipboard();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setUseHostClipboard(Boolean value)
    {
        try
        {
            getTypedWrapped().setUseHostClipboard(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IEmulatedUSB getEmulatedUSB()
    {
        try
        {
            org.mozilla.interfaces.IEmulatedUSB retVal = getTypedWrapped().getEmulatedUSB();
            return (retVal != null) ? new org.virtualbox_4_3.IEmulatedUSB(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IConsole queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IConsole qiobj = Helper.queryInterface(nsobj, "{8ab7c520-2442-4b66-8d74-4ff1e195d2b6}", org.mozilla.interfaces.IConsole.class);
        return qiobj == null ? null : new IConsole(qiobj);
    }
    public org.virtualbox_4_3.IProgress powerUp()
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().powerUp();
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress powerUpPaused()
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().powerUpPaused();
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress powerDown()
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().powerDown();
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void reset()
    {
        try
        {
            getTypedWrapped().reset();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void pause()
    {
        try
        {
            getTypedWrapped().pause();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void resume()
    {
        try
        {
            getTypedWrapped().resume();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void powerButton()
    {
        try
        {
            getTypedWrapped().powerButton();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void sleepButton()
    {
        try
        {
            getTypedWrapped().sleepButton();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getPowerButtonHandled()
    {
        try
        {
            boolean retVal;
            retVal = getTypedWrapped().getPowerButtonHandled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getGuestEnteredACPIMode()
    {
        try
        {
            boolean retVal;
            retVal = getTypedWrapped().getGuestEnteredACPIMode();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress saveState()
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().saveState();
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void adoptSavedState(String savedStateFile)
    {
        try
        {
            getTypedWrapped().adoptSavedState(savedStateFile);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void discardSavedState(Boolean fRemoveFile)
    {
        try
        {
            getTypedWrapped().discardSavedState(fRemoveFile);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.DeviceActivity getDeviceActivity(org.virtualbox_4_3.DeviceType type)
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().getDeviceActivity(type.value());
            return org.virtualbox_4_3.DeviceActivity.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void attachUSBDevice(String id)
    {
        try
        {
            getTypedWrapped().attachUSBDevice(id);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IUSBDevice detachUSBDevice(String id)
    {
        try
        {
            org.mozilla.interfaces.IUSBDevice retVal;
            retVal = getTypedWrapped().detachUSBDevice(id);
            return (retVal != null) ? new org.virtualbox_4_3.IUSBDevice(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IUSBDevice findUSBDeviceByAddress(String name)
    {
        try
        {
            org.mozilla.interfaces.IUSBDevice retVal;
            retVal = getTypedWrapped().findUSBDeviceByAddress(name);
            return (retVal != null) ? new org.virtualbox_4_3.IUSBDevice(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IUSBDevice findUSBDeviceById(String id)
    {
        try
        {
            org.mozilla.interfaces.IUSBDevice retVal;
            retVal = getTypedWrapped().findUSBDeviceById(id);
            return (retVal != null) ? new org.virtualbox_4_3.IUSBDevice(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void createSharedFolder(String name, String hostPath, Boolean writable, Boolean automount)
    {
        try
        {
            getTypedWrapped().createSharedFolder(name, hostPath, writable, automount);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void removeSharedFolder(String name)
    {
        try
        {
            getTypedWrapped().removeSharedFolder(name);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress takeSnapshot(String name, String description)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().takeSnapshot(name, description);
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress deleteSnapshot(String id)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().deleteSnapshot(id);
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress deleteSnapshotAndAllChildren(String id)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().deleteSnapshotAndAllChildren(id);
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress deleteSnapshotRange(String startId, String endId)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().deleteSnapshotRange(startId, endId);
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress restoreSnapshot(org.virtualbox_4_3.ISnapshot snapshot)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().restoreSnapshot((snapshot != null) ? snapshot.getTypedWrapped() : null);
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress teleport(String hostname, Long tcpport, String password, Long maxDowntime)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().teleport(hostname, tcpport, password, maxDowntime);
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IConsole.java"


// ##### BEGINFILE "IHostNetworkInterface.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IHostNetworkInterface.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IHostNetworkInterface extends IUnknown
{

    public IHostNetworkInterface(org.mozilla.interfaces.IHostNetworkInterface wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IHostNetworkInterface getTypedWrapped()
    {
        return (org.mozilla.interfaces.IHostNetworkInterface) getWrapped();
    }
    public String getName()
    {
        try
        {
            String retVal = getTypedWrapped().getName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getShortName()
    {
        try
        {
            String retVal = getTypedWrapped().getShortName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getId()
    {
        try
        {
            String retVal = getTypedWrapped().getId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getNetworkName()
    {
        try
        {
            String retVal = getTypedWrapped().getNetworkName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getDHCPEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getDHCPEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getIPAddress()
    {
        try
        {
            String retVal = getTypedWrapped().getIPAddress();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getNetworkMask()
    {
        try
        {
            String retVal = getTypedWrapped().getNetworkMask();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getIPV6Supported()
    {
        try
        {
            boolean retVal = getTypedWrapped().getIPV6Supported();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getIPV6Address()
    {
        try
        {
            String retVal = getTypedWrapped().getIPV6Address();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getIPV6NetworkMaskPrefixLength()
    {
        try
        {
            long retVal = getTypedWrapped().getIPV6NetworkMaskPrefixLength();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getHardwareAddress()
    {
        try
        {
            String retVal = getTypedWrapped().getHardwareAddress();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.HostNetworkInterfaceMediumType getMediumType()
    {
        try
        {
            long retVal = getTypedWrapped().getMediumType();
            return org.virtualbox_4_3.HostNetworkInterfaceMediumType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.HostNetworkInterfaceStatus getStatus()
    {
        try
        {
            long retVal = getTypedWrapped().getStatus();
            return org.virtualbox_4_3.HostNetworkInterfaceStatus.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.HostNetworkInterfaceType getInterfaceType()
    {
        try
        {
            long retVal = getTypedWrapped().getInterfaceType();
            return org.virtualbox_4_3.HostNetworkInterfaceType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IHostNetworkInterface queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IHostNetworkInterface qiobj = Helper.queryInterface(nsobj, "{f6e556f9-d598-409b-898c-8ba99d9b05ae}", org.mozilla.interfaces.IHostNetworkInterface.class);
        return qiobj == null ? null : new IHostNetworkInterface(qiobj);
    }
    public void enableStaticIPConfig(String IPAddress, String networkMask)
    {
        try
        {
            getTypedWrapped().enableStaticIPConfig(IPAddress, networkMask);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void enableStaticIPConfigV6(String IPV6Address, Long IPV6NetworkMaskPrefixLength)
    {
        try
        {
            getTypedWrapped().enableStaticIPConfigV6(IPV6Address, IPV6NetworkMaskPrefixLength);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void enableDynamicIPConfig()
    {
        try
        {
            getTypedWrapped().enableDynamicIPConfig();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void DHCPRediscover()
    {
        try
        {
            getTypedWrapped().DHCPRediscover();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IHostNetworkInterface.java"


// ##### BEGINFILE "IHostVideoInputDevice.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IHostVideoInputDevice.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IHostVideoInputDevice extends IUnknown
{

    public IHostVideoInputDevice(org.mozilla.interfaces.IHostVideoInputDevice wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IHostVideoInputDevice getTypedWrapped()
    {
        return (org.mozilla.interfaces.IHostVideoInputDevice) getWrapped();
    }
    public String getName()
    {
        try
        {
            String retVal = getTypedWrapped().getName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getPath()
    {
        try
        {
            String retVal = getTypedWrapped().getPath();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getAlias()
    {
        try
        {
            String retVal = getTypedWrapped().getAlias();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IHostVideoInputDevice queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IHostVideoInputDevice qiobj = Helper.queryInterface(nsobj, "{a1ceae44-d65e-4156-9359-d390f93ee9a0}", org.mozilla.interfaces.IHostVideoInputDevice.class);
        return qiobj == null ? null : new IHostVideoInputDevice(qiobj);
    }
}

// ##### ENDFILE "IHostVideoInputDevice.java"


// ##### BEGINFILE "IHost.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IHost.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IHost extends IUnknown
{

    public IHost(org.mozilla.interfaces.IHost wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IHost getTypedWrapped()
    {
        return (org.mozilla.interfaces.IHost) getWrapped();
    }
    public List<org.virtualbox_4_3.IMedium> getDVDDrives()
    {
        try
        {
            org.mozilla.interfaces.IMedium[] retVal = getTypedWrapped().getDVDDrives(null);
            return Helper.wrap2(org.virtualbox_4_3.IMedium.class, org.mozilla.interfaces.IMedium.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IMedium> getFloppyDrives()
    {
        try
        {
            org.mozilla.interfaces.IMedium[] retVal = getTypedWrapped().getFloppyDrives(null);
            return Helper.wrap2(org.virtualbox_4_3.IMedium.class, org.mozilla.interfaces.IMedium.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IHostUSBDevice> getUSBDevices()
    {
        try
        {
            org.mozilla.interfaces.IHostUSBDevice[] retVal = getTypedWrapped().getUSBDevices(null);
            return Helper.wrap2(org.virtualbox_4_3.IHostUSBDevice.class, org.mozilla.interfaces.IHostUSBDevice.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IHostUSBDeviceFilter> getUSBDeviceFilters()
    {
        try
        {
            org.mozilla.interfaces.IHostUSBDeviceFilter[] retVal = getTypedWrapped().getUSBDeviceFilters(null);
            return Helper.wrap2(org.virtualbox_4_3.IHostUSBDeviceFilter.class, org.mozilla.interfaces.IHostUSBDeviceFilter.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IHostNetworkInterface> getNetworkInterfaces()
    {
        try
        {
            org.mozilla.interfaces.IHostNetworkInterface[] retVal = getTypedWrapped().getNetworkInterfaces(null);
            return Helper.wrap2(org.virtualbox_4_3.IHostNetworkInterface.class, org.mozilla.interfaces.IHostNetworkInterface.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getNameServers()
    {
        try
        {
            String[] retVal = getTypedWrapped().getNameServers(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getDomainName()
    {
        try
        {
            String retVal = getTypedWrapped().getDomainName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getSearchStrings()
    {
        try
        {
            String[] retVal = getTypedWrapped().getSearchStrings(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getProcessorCount()
    {
        try
        {
            long retVal = getTypedWrapped().getProcessorCount();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getProcessorOnlineCount()
    {
        try
        {
            long retVal = getTypedWrapped().getProcessorOnlineCount();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getProcessorCoreCount()
    {
        try
        {
            long retVal = getTypedWrapped().getProcessorCoreCount();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getProcessorOnlineCoreCount()
    {
        try
        {
            long retVal = getTypedWrapped().getProcessorOnlineCoreCount();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getMemorySize()
    {
        try
        {
            long retVal = getTypedWrapped().getMemorySize();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getMemoryAvailable()
    {
        try
        {
            long retVal = getTypedWrapped().getMemoryAvailable();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getOperatingSystem()
    {
        try
        {
            String retVal = getTypedWrapped().getOperatingSystem();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getOSVersion()
    {
        try
        {
            String retVal = getTypedWrapped().getOSVersion();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getUTCTime()
    {
        try
        {
            long retVal = getTypedWrapped().getUTCTime();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getAcceleration3DAvailable()
    {
        try
        {
            boolean retVal = getTypedWrapped().getAcceleration3DAvailable();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IHostVideoInputDevice> getVideoInputDevices()
    {
        try
        {
            org.mozilla.interfaces.IHostVideoInputDevice[] retVal = getTypedWrapped().getVideoInputDevices(null);
            return Helper.wrap2(org.virtualbox_4_3.IHostVideoInputDevice.class, org.mozilla.interfaces.IHostVideoInputDevice.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IHost queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IHost qiobj = Helper.queryInterface(nsobj, "{93269330-48ca-4096-b4a2-1189df336267}", org.mozilla.interfaces.IHost.class);
        return qiobj == null ? null : new IHost(qiobj);
    }
    public Long getProcessorSpeed(Long cpuId)
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().getProcessorSpeed(cpuId);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getProcessorFeature(org.virtualbox_4_3.ProcessorFeature feature)
    {
        try
        {
            boolean retVal;
            retVal = getTypedWrapped().getProcessorFeature(feature.value());
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getProcessorDescription(Long cpuId)
    {
        try
        {
            String retVal;
            retVal = getTypedWrapped().getProcessorDescription(cpuId);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void getProcessorCPUIDLeaf(Long cpuId, Long leaf, Long subLeaf, Holder<Long> valEax, Holder<Long> valEbx, Holder<Long> valEcx, Holder<Long> valEdx)
    {
        try
        {
        long[] tmp_valEax = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_valEbx = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_valEcx = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_valEdx = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
            getTypedWrapped().getProcessorCPUIDLeaf(cpuId, leaf, subLeaf, tmp_valEax, tmp_valEbx, tmp_valEcx, tmp_valEdx);
        valEax.value = tmp_valEax[0];
        valEbx.value = tmp_valEbx[0];
        valEcx.value = tmp_valEcx[0];
        valEdx.value = tmp_valEdx[0];
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress createHostOnlyNetworkInterface(Holder<org.virtualbox_4_3.IHostNetworkInterface> hostInterface)
    {
        try
        {
        org.mozilla.interfaces.IHostNetworkInterface[] tmp_hostInterface = (org.mozilla.interfaces.IHostNetworkInterface[])java.lang.reflect.Array.newInstance(org.mozilla.interfaces.IHostNetworkInterface.class, 1);
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().createHostOnlyNetworkInterface(tmp_hostInterface);
        hostInterface.value = (tmp_hostInterface[0] != null) ? new org.virtualbox_4_3.IHostNetworkInterface(tmp_hostInterface[0]) : null;
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress removeHostOnlyNetworkInterface(String id)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().removeHostOnlyNetworkInterface(id);
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IHostUSBDeviceFilter createUSBDeviceFilter(String name)
    {
        try
        {
            org.mozilla.interfaces.IHostUSBDeviceFilter retVal;
            retVal = getTypedWrapped().createUSBDeviceFilter(name);
            return (retVal != null) ? new org.virtualbox_4_3.IHostUSBDeviceFilter(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void insertUSBDeviceFilter(Long position, org.virtualbox_4_3.IHostUSBDeviceFilter filter)
    {
        try
        {
            getTypedWrapped().insertUSBDeviceFilter(position, (filter != null) ? filter.getTypedWrapped() : null);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void removeUSBDeviceFilter(Long position)
    {
        try
        {
            getTypedWrapped().removeUSBDeviceFilter(position);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IMedium findHostDVDDrive(String name)
    {
        try
        {
            org.mozilla.interfaces.IMedium retVal;
            retVal = getTypedWrapped().findHostDVDDrive(name);
            return (retVal != null) ? new org.virtualbox_4_3.IMedium(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IMedium findHostFloppyDrive(String name)
    {
        try
        {
            org.mozilla.interfaces.IMedium retVal;
            retVal = getTypedWrapped().findHostFloppyDrive(name);
            return (retVal != null) ? new org.virtualbox_4_3.IMedium(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IHostNetworkInterface findHostNetworkInterfaceByName(String name)
    {
        try
        {
            org.mozilla.interfaces.IHostNetworkInterface retVal;
            retVal = getTypedWrapped().findHostNetworkInterfaceByName(name);
            return (retVal != null) ? new org.virtualbox_4_3.IHostNetworkInterface(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IHostNetworkInterface findHostNetworkInterfaceById(String id)
    {
        try
        {
            org.mozilla.interfaces.IHostNetworkInterface retVal;
            retVal = getTypedWrapped().findHostNetworkInterfaceById(id);
            return (retVal != null) ? new org.virtualbox_4_3.IHostNetworkInterface(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IHostNetworkInterface> findHostNetworkInterfacesOfType(org.virtualbox_4_3.HostNetworkInterfaceType type)
    {
        try
        {
            org.mozilla.interfaces.IHostNetworkInterface[] retVal;
            retVal = getTypedWrapped().findHostNetworkInterfacesOfType(type.value(), null);
            return Helper.wrap2(org.virtualbox_4_3.IHostNetworkInterface.class, org.mozilla.interfaces.IHostNetworkInterface.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IHostUSBDevice findUSBDeviceById(String id)
    {
        try
        {
            org.mozilla.interfaces.IHostUSBDevice retVal;
            retVal = getTypedWrapped().findUSBDeviceById(id);
            return (retVal != null) ? new org.virtualbox_4_3.IHostUSBDevice(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IHostUSBDevice findUSBDeviceByAddress(String name)
    {
        try
        {
            org.mozilla.interfaces.IHostUSBDevice retVal;
            retVal = getTypedWrapped().findUSBDeviceByAddress(name);
            return (retVal != null) ? new org.virtualbox_4_3.IHostUSBDevice(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String generateMACAddress()
    {
        try
        {
            String retVal;
            retVal = getTypedWrapped().generateMACAddress();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IHost.java"


// ##### BEGINFILE "ISystemProperties.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ISystemProperties.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class ISystemProperties extends IUnknown
{

    public ISystemProperties(org.mozilla.interfaces.ISystemProperties wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.ISystemProperties getTypedWrapped()
    {
        return (org.mozilla.interfaces.ISystemProperties) getWrapped();
    }
    public Long getMinGuestRAM()
    {
        try
        {
            long retVal = getTypedWrapped().getMinGuestRAM();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getMaxGuestRAM()
    {
        try
        {
            long retVal = getTypedWrapped().getMaxGuestRAM();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getMinGuestVRAM()
    {
        try
        {
            long retVal = getTypedWrapped().getMinGuestVRAM();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getMaxGuestVRAM()
    {
        try
        {
            long retVal = getTypedWrapped().getMaxGuestVRAM();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getMinGuestCPUCount()
    {
        try
        {
            long retVal = getTypedWrapped().getMinGuestCPUCount();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getMaxGuestCPUCount()
    {
        try
        {
            long retVal = getTypedWrapped().getMaxGuestCPUCount();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getMaxGuestMonitors()
    {
        try
        {
            long retVal = getTypedWrapped().getMaxGuestMonitors();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getInfoVDSize()
    {
        try
        {
            long retVal = getTypedWrapped().getInfoVDSize();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getSerialPortCount()
    {
        try
        {
            long retVal = getTypedWrapped().getSerialPortCount();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getParallelPortCount()
    {
        try
        {
            long retVal = getTypedWrapped().getParallelPortCount();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getMaxBootPosition()
    {
        try
        {
            long retVal = getTypedWrapped().getMaxBootPosition();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getExclusiveHwVirt()
    {
        try
        {
            boolean retVal = getTypedWrapped().getExclusiveHwVirt();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setExclusiveHwVirt(Boolean value)
    {
        try
        {
            getTypedWrapped().setExclusiveHwVirt(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getDefaultMachineFolder()
    {
        try
        {
            String retVal = getTypedWrapped().getDefaultMachineFolder();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setDefaultMachineFolder(String value)
    {
        try
        {
            getTypedWrapped().setDefaultMachineFolder(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getLoggingLevel()
    {
        try
        {
            String retVal = getTypedWrapped().getLoggingLevel();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setLoggingLevel(String value)
    {
        try
        {
            getTypedWrapped().setLoggingLevel(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IMediumFormat> getMediumFormats()
    {
        try
        {
            org.mozilla.interfaces.IMediumFormat[] retVal = getTypedWrapped().getMediumFormats(null);
            return Helper.wrap2(org.virtualbox_4_3.IMediumFormat.class, org.mozilla.interfaces.IMediumFormat.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getDefaultHardDiskFormat()
    {
        try
        {
            String retVal = getTypedWrapped().getDefaultHardDiskFormat();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setDefaultHardDiskFormat(String value)
    {
        try
        {
            getTypedWrapped().setDefaultHardDiskFormat(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getFreeDiskSpaceWarning()
    {
        try
        {
            long retVal = getTypedWrapped().getFreeDiskSpaceWarning();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setFreeDiskSpaceWarning(Long value)
    {
        try
        {
            getTypedWrapped().setFreeDiskSpaceWarning(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getFreeDiskSpacePercentWarning()
    {
        try
        {
            long retVal = getTypedWrapped().getFreeDiskSpacePercentWarning();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setFreeDiskSpacePercentWarning(Long value)
    {
        try
        {
            getTypedWrapped().setFreeDiskSpacePercentWarning(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getFreeDiskSpaceError()
    {
        try
        {
            long retVal = getTypedWrapped().getFreeDiskSpaceError();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setFreeDiskSpaceError(Long value)
    {
        try
        {
            getTypedWrapped().setFreeDiskSpaceError(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getFreeDiskSpacePercentError()
    {
        try
        {
            long retVal = getTypedWrapped().getFreeDiskSpacePercentError();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setFreeDiskSpacePercentError(Long value)
    {
        try
        {
            getTypedWrapped().setFreeDiskSpacePercentError(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getVRDEAuthLibrary()
    {
        try
        {
            String retVal = getTypedWrapped().getVRDEAuthLibrary();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setVRDEAuthLibrary(String value)
    {
        try
        {
            getTypedWrapped().setVRDEAuthLibrary(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getWebServiceAuthLibrary()
    {
        try
        {
            String retVal = getTypedWrapped().getWebServiceAuthLibrary();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setWebServiceAuthLibrary(String value)
    {
        try
        {
            getTypedWrapped().setWebServiceAuthLibrary(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getDefaultVRDEExtPack()
    {
        try
        {
            String retVal = getTypedWrapped().getDefaultVRDEExtPack();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setDefaultVRDEExtPack(String value)
    {
        try
        {
            getTypedWrapped().setDefaultVRDEExtPack(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getLogHistoryCount()
    {
        try
        {
            long retVal = getTypedWrapped().getLogHistoryCount();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setLogHistoryCount(Long value)
    {
        try
        {
            getTypedWrapped().setLogHistoryCount(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.AudioDriverType getDefaultAudioDriver()
    {
        try
        {
            long retVal = getTypedWrapped().getDefaultAudioDriver();
            return org.virtualbox_4_3.AudioDriverType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getAutostartDatabasePath()
    {
        try
        {
            String retVal = getTypedWrapped().getAutostartDatabasePath();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setAutostartDatabasePath(String value)
    {
        try
        {
            getTypedWrapped().setAutostartDatabasePath(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getDefaultAdditionsISO()
    {
        try
        {
            String retVal = getTypedWrapped().getDefaultAdditionsISO();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setDefaultAdditionsISO(String value)
    {
        try
        {
            getTypedWrapped().setDefaultAdditionsISO(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getDefaultFrontend()
    {
        try
        {
            String retVal = getTypedWrapped().getDefaultFrontend();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setDefaultFrontend(String value)
    {
        try
        {
            getTypedWrapped().setDefaultFrontend(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static ISystemProperties queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.ISystemProperties qiobj = Helper.queryInterface(nsobj, "{1254a96a-ae57-4484-946a-22d86c1f98af}", org.mozilla.interfaces.ISystemProperties.class);
        return qiobj == null ? null : new ISystemProperties(qiobj);
    }
    public Long getMaxNetworkAdapters(org.virtualbox_4_3.ChipsetType chipset)
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().getMaxNetworkAdapters(chipset.value());
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getMaxNetworkAdaptersOfType(org.virtualbox_4_3.ChipsetType chipset, org.virtualbox_4_3.NetworkAttachmentType type)
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().getMaxNetworkAdaptersOfType(chipset.value(), type.value());
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getMaxDevicesPerPortForStorageBus(org.virtualbox_4_3.StorageBus bus)
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().getMaxDevicesPerPortForStorageBus(bus.value());
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getMinPortCountForStorageBus(org.virtualbox_4_3.StorageBus bus)
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().getMinPortCountForStorageBus(bus.value());
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getMaxPortCountForStorageBus(org.virtualbox_4_3.StorageBus bus)
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().getMaxPortCountForStorageBus(bus.value());
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getMaxInstancesOfStorageBus(org.virtualbox_4_3.ChipsetType chipset, org.virtualbox_4_3.StorageBus bus)
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().getMaxInstancesOfStorageBus(chipset.value(), bus.value());
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.DeviceType> getDeviceTypesForStorageBus(org.virtualbox_4_3.StorageBus bus)
    {
        try
        {
            long[] retVal;
            retVal = getTypedWrapped().getDeviceTypesForStorageBus(bus.value(), null);
            return Helper.wrapEnum(org.virtualbox_4_3.DeviceType.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getDefaultIoCacheSettingForStorageController(org.virtualbox_4_3.StorageControllerType controllerType)
    {
        try
        {
            boolean retVal;
            retVal = getTypedWrapped().getDefaultIoCacheSettingForStorageController(controllerType.value());
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getMaxInstancesOfUSBControllerType(org.virtualbox_4_3.ChipsetType chipset, org.virtualbox_4_3.USBControllerType type)
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().getMaxInstancesOfUSBControllerType(chipset.value(), type.value());
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "ISystemProperties.java"


// ##### BEGINFILE "IGuestOSType.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestOSType.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestOSType extends IUnknown
{

    public IGuestOSType(org.mozilla.interfaces.IGuestOSType wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestOSType getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestOSType) getWrapped();
    }
    public String getFamilyId()
    {
        try
        {
            String retVal = getTypedWrapped().getFamilyId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getFamilyDescription()
    {
        try
        {
            String retVal = getTypedWrapped().getFamilyDescription();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getId()
    {
        try
        {
            String retVal = getTypedWrapped().getId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getDescription()
    {
        try
        {
            String retVal = getTypedWrapped().getDescription();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getIs64Bit()
    {
        try
        {
            boolean retVal = getTypedWrapped().getIs64Bit();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getRecommendedIOAPIC()
    {
        try
        {
            boolean retVal = getTypedWrapped().getRecommendedIOAPIC();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getRecommendedVirtEx()
    {
        try
        {
            boolean retVal = getTypedWrapped().getRecommendedVirtEx();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getRecommendedRAM()
    {
        try
        {
            long retVal = getTypedWrapped().getRecommendedRAM();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getRecommendedVRAM()
    {
        try
        {
            long retVal = getTypedWrapped().getRecommendedVRAM();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getRecommended2DVideoAcceleration()
    {
        try
        {
            boolean retVal = getTypedWrapped().getRecommended2DVideoAcceleration();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getRecommended3DAcceleration()
    {
        try
        {
            boolean retVal = getTypedWrapped().getRecommended3DAcceleration();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getRecommendedHDD()
    {
        try
        {
            long retVal = getTypedWrapped().getRecommendedHDD();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.NetworkAdapterType getAdapterType()
    {
        try
        {
            long retVal = getTypedWrapped().getAdapterType();
            return org.virtualbox_4_3.NetworkAdapterType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getRecommendedPAE()
    {
        try
        {
            boolean retVal = getTypedWrapped().getRecommendedPAE();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.StorageControllerType getRecommendedDVDStorageController()
    {
        try
        {
            long retVal = getTypedWrapped().getRecommendedDVDStorageController();
            return org.virtualbox_4_3.StorageControllerType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.StorageBus getRecommendedDVDStorageBus()
    {
        try
        {
            long retVal = getTypedWrapped().getRecommendedDVDStorageBus();
            return org.virtualbox_4_3.StorageBus.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.StorageControllerType getRecommendedHDStorageController()
    {
        try
        {
            long retVal = getTypedWrapped().getRecommendedHDStorageController();
            return org.virtualbox_4_3.StorageControllerType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.StorageBus getRecommendedHDStorageBus()
    {
        try
        {
            long retVal = getTypedWrapped().getRecommendedHDStorageBus();
            return org.virtualbox_4_3.StorageBus.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.FirmwareType getRecommendedFirmware()
    {
        try
        {
            long retVal = getTypedWrapped().getRecommendedFirmware();
            return org.virtualbox_4_3.FirmwareType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getRecommendedUSBHID()
    {
        try
        {
            boolean retVal = getTypedWrapped().getRecommendedUSBHID();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getRecommendedHPET()
    {
        try
        {
            boolean retVal = getTypedWrapped().getRecommendedHPET();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getRecommendedUSBTablet()
    {
        try
        {
            boolean retVal = getTypedWrapped().getRecommendedUSBTablet();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getRecommendedRTCUseUTC()
    {
        try
        {
            boolean retVal = getTypedWrapped().getRecommendedRTCUseUTC();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.ChipsetType getRecommendedChipset()
    {
        try
        {
            long retVal = getTypedWrapped().getRecommendedChipset();
            return org.virtualbox_4_3.ChipsetType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.AudioControllerType getRecommendedAudioController()
    {
        try
        {
            long retVal = getTypedWrapped().getRecommendedAudioController();
            return org.virtualbox_4_3.AudioControllerType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getRecommendedFloppy()
    {
        try
        {
            boolean retVal = getTypedWrapped().getRecommendedFloppy();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getRecommendedUSB()
    {
        try
        {
            boolean retVal = getTypedWrapped().getRecommendedUSB();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IGuestOSType queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestOSType qiobj = Helper.queryInterface(nsobj, "{6d968f9a-858b-4c50-bf17-241f069e94c2}", org.mozilla.interfaces.IGuestOSType.class);
        return qiobj == null ? null : new IGuestOSType(qiobj);
    }
}

// ##### ENDFILE "IGuestOSType.java"


// ##### BEGINFILE "IAdditionsFacility.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IAdditionsFacility.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IAdditionsFacility extends IUnknown
{

    public IAdditionsFacility(org.mozilla.interfaces.IAdditionsFacility wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IAdditionsFacility getTypedWrapped()
    {
        return (org.mozilla.interfaces.IAdditionsFacility) getWrapped();
    }
    public org.virtualbox_4_3.AdditionsFacilityClass getClassType()
    {
        try
        {
            long retVal = getTypedWrapped().getClassType();
            return org.virtualbox_4_3.AdditionsFacilityClass.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getLastUpdated()
    {
        try
        {
            long retVal = getTypedWrapped().getLastUpdated();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getName()
    {
        try
        {
            String retVal = getTypedWrapped().getName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.AdditionsFacilityStatus getStatus()
    {
        try
        {
            long retVal = getTypedWrapped().getStatus();
            return org.virtualbox_4_3.AdditionsFacilityStatus.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.AdditionsFacilityType getType()
    {
        try
        {
            long retVal = getTypedWrapped().getType();
            return org.virtualbox_4_3.AdditionsFacilityType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IAdditionsFacility queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IAdditionsFacility qiobj = Helper.queryInterface(nsobj, "{54992946-6af1-4e49-98ec-58b558b7291e}", org.mozilla.interfaces.IAdditionsFacility.class);
        return qiobj == null ? null : new IAdditionsFacility(qiobj);
    }
}

// ##### ENDFILE "IAdditionsFacility.java"


// ##### BEGINFILE "IGuestSession.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestSession.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestSession extends IUnknown
{

    public IGuestSession(org.mozilla.interfaces.IGuestSession wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestSession getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestSession) getWrapped();
    }
    public String getUser()
    {
        try
        {
            String retVal = getTypedWrapped().getUser();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getDomain()
    {
        try
        {
            String retVal = getTypedWrapped().getDomain();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getName()
    {
        try
        {
            String retVal = getTypedWrapped().getName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getId()
    {
        try
        {
            long retVal = getTypedWrapped().getId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getTimeout()
    {
        try
        {
            long retVal = getTypedWrapped().getTimeout();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setTimeout(Long value)
    {
        try
        {
            getTypedWrapped().setTimeout(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getProtocolVersion()
    {
        try
        {
            long retVal = getTypedWrapped().getProtocolVersion();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.GuestSessionStatus getStatus()
    {
        try
        {
            long retVal = getTypedWrapped().getStatus();
            return org.virtualbox_4_3.GuestSessionStatus.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getEnvironment()
    {
        try
        {
            String[] retVal = getTypedWrapped().getEnvironment(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setEnvironment(List<String> value)
    {
        try
        {
            getTypedWrapped().setEnvironment(Helper.unwrapStr(value));
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IGuestProcess> getProcesses()
    {
        try
        {
            org.mozilla.interfaces.IGuestProcess[] retVal = getTypedWrapped().getProcesses(null);
            return Helper.wrap2(org.virtualbox_4_3.IGuestProcess.class, org.mozilla.interfaces.IGuestProcess.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IGuestDirectory> getDirectories()
    {
        try
        {
            org.mozilla.interfaces.IGuestDirectory[] retVal = getTypedWrapped().getDirectories(null);
            return Helper.wrap2(org.virtualbox_4_3.IGuestDirectory.class, org.mozilla.interfaces.IGuestDirectory.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IGuestFile> getFiles()
    {
        try
        {
            org.mozilla.interfaces.IGuestFile[] retVal = getTypedWrapped().getFiles(null);
            return Helper.wrap2(org.virtualbox_4_3.IGuestFile.class, org.mozilla.interfaces.IGuestFile.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IEventSource getEventSource()
    {
        try
        {
            org.mozilla.interfaces.IEventSource retVal = getTypedWrapped().getEventSource();
            return (retVal != null) ? new org.virtualbox_4_3.IEventSource(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IGuestSession queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestSession qiobj = Helper.queryInterface(nsobj, "{5b28703c-07b6-4fcb-afba-ac199b309752}", org.mozilla.interfaces.IGuestSession.class);
        return qiobj == null ? null : new IGuestSession(qiobj);
    }
    public void close()
    {
        try
        {
            getTypedWrapped().close();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress copyFrom(String source, String dest, List<org.virtualbox_4_3.CopyFileFlag> flags)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().copyFrom(source, dest, flags != null ? flags.size() : 0, Helper.unwrapEnum(org.virtualbox_4_3.CopyFileFlag.class, flags));
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress copyTo(String source, String dest, List<org.virtualbox_4_3.CopyFileFlag> flags)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().copyTo(source, dest, flags != null ? flags.size() : 0, Helper.unwrapEnum(org.virtualbox_4_3.CopyFileFlag.class, flags));
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void directoryCreate(String path, Long mode, List<org.virtualbox_4_3.DirectoryCreateFlag> flags)
    {
        try
        {
            getTypedWrapped().directoryCreate(path, mode, flags != null ? flags.size() : 0, Helper.unwrapEnum(org.virtualbox_4_3.DirectoryCreateFlag.class, flags));
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String directoryCreateTemp(String templateName, Long mode, String path, Boolean secure)
    {
        try
        {
            String retVal;
            retVal = getTypedWrapped().directoryCreateTemp(templateName, mode, path, secure);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean directoryExists(String path)
    {
        try
        {
            boolean retVal;
            retVal = getTypedWrapped().directoryExists(path);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IGuestDirectory directoryOpen(String path, String filter, List<org.virtualbox_4_3.DirectoryOpenFlag> flags)
    {
        try
        {
            org.mozilla.interfaces.IGuestDirectory retVal;
            retVal = getTypedWrapped().directoryOpen(path, filter, flags != null ? flags.size() : 0, Helper.unwrapEnum(org.virtualbox_4_3.DirectoryOpenFlag.class, flags));
            return (retVal != null) ? new org.virtualbox_4_3.IGuestDirectory(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IGuestFsObjInfo directoryQueryInfo(String path)
    {
        try
        {
            org.mozilla.interfaces.IGuestFsObjInfo retVal;
            retVal = getTypedWrapped().directoryQueryInfo(path);
            return (retVal != null) ? new org.virtualbox_4_3.IGuestFsObjInfo(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void directoryRemove(String path)
    {
        try
        {
            getTypedWrapped().directoryRemove(path);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress directoryRemoveRecursive(String path, List<org.virtualbox_4_3.DirectoryRemoveRecFlag> flags)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().directoryRemoveRecursive(path, flags != null ? flags.size() : 0, Helper.unwrapEnum(org.virtualbox_4_3.DirectoryRemoveRecFlag.class, flags));
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void directoryRename(String source, String dest, List<org.virtualbox_4_3.PathRenameFlag> flags)
    {
        try
        {
            getTypedWrapped().directoryRename(source, dest, flags != null ? flags.size() : 0, Helper.unwrapEnum(org.virtualbox_4_3.PathRenameFlag.class, flags));
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void directorySetACL(String path, String acl)
    {
        try
        {
            getTypedWrapped().directorySetACL(path, acl);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void environmentClear()
    {
        try
        {
            getTypedWrapped().environmentClear();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String environmentGet(String name)
    {
        try
        {
            String retVal;
            retVal = getTypedWrapped().environmentGet(name);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void environmentSet(String name, String value)
    {
        try
        {
            getTypedWrapped().environmentSet(name, value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void environmentUnset(String name)
    {
        try
        {
            getTypedWrapped().environmentUnset(name);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IGuestFile fileCreateTemp(String templateName, Long mode, String path, Boolean secure)
    {
        try
        {
            org.mozilla.interfaces.IGuestFile retVal;
            retVal = getTypedWrapped().fileCreateTemp(templateName, mode, path, secure);
            return (retVal != null) ? new org.virtualbox_4_3.IGuestFile(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean fileExists(String path)
    {
        try
        {
            boolean retVal;
            retVal = getTypedWrapped().fileExists(path);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void fileRemove(String path)
    {
        try
        {
            getTypedWrapped().fileRemove(path);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IGuestFile fileOpen(String path, String openMode, String disposition, Long creationMode)
    {
        try
        {
            org.mozilla.interfaces.IGuestFile retVal;
            retVal = getTypedWrapped().fileOpen(path, openMode, disposition, creationMode);
            return (retVal != null) ? new org.virtualbox_4_3.IGuestFile(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IGuestFile fileOpenEx(String path, String openMode, String disposition, String sharingMode, Long creationMode, Long offset)
    {
        try
        {
            org.mozilla.interfaces.IGuestFile retVal;
            retVal = getTypedWrapped().fileOpenEx(path, openMode, disposition, sharingMode, creationMode, offset);
            return (retVal != null) ? new org.virtualbox_4_3.IGuestFile(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IGuestFsObjInfo fileQueryInfo(String path)
    {
        try
        {
            org.mozilla.interfaces.IGuestFsObjInfo retVal;
            retVal = getTypedWrapped().fileQueryInfo(path);
            return (retVal != null) ? new org.virtualbox_4_3.IGuestFsObjInfo(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long fileQuerySize(String path)
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().fileQuerySize(path);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void fileRename(String source, String dest, List<org.virtualbox_4_3.PathRenameFlag> flags)
    {
        try
        {
            getTypedWrapped().fileRename(source, dest, flags != null ? flags.size() : 0, Helper.unwrapEnum(org.virtualbox_4_3.PathRenameFlag.class, flags));
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void fileSetACL(String file, String acl)
    {
        try
        {
            getTypedWrapped().fileSetACL(file, acl);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IGuestProcess processCreate(String command, List<String> arguments, List<String> environment, List<org.virtualbox_4_3.ProcessCreateFlag> flags, Long timeoutMS)
    {
        try
        {
            org.mozilla.interfaces.IGuestProcess retVal;
            retVal = getTypedWrapped().processCreate(command, arguments != null ? arguments.size() : 0, Helper.unwrapStr(arguments), environment != null ? environment.size() : 0, Helper.unwrapStr(environment), flags != null ? flags.size() : 0, Helper.unwrapEnum(org.virtualbox_4_3.ProcessCreateFlag.class, flags), timeoutMS);
            return (retVal != null) ? new org.virtualbox_4_3.IGuestProcess(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IGuestProcess processCreateEx(String command, List<String> arguments, List<String> environment, List<org.virtualbox_4_3.ProcessCreateFlag> flags, Long timeoutMS, org.virtualbox_4_3.ProcessPriority priority, List<Integer> affinity)
    {
        try
        {
            org.mozilla.interfaces.IGuestProcess retVal;
            retVal = getTypedWrapped().processCreateEx(command, arguments != null ? arguments.size() : 0, Helper.unwrapStr(arguments), environment != null ? environment.size() : 0, Helper.unwrapStr(environment), flags != null ? flags.size() : 0, Helper.unwrapEnum(org.virtualbox_4_3.ProcessCreateFlag.class, flags), timeoutMS, priority.value(), affinity != null ? affinity.size() : 0, Helper.unwrapInteger(affinity));
            return (retVal != null) ? new org.virtualbox_4_3.IGuestProcess(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IGuestProcess processGet(Long pid)
    {
        try
        {
            org.mozilla.interfaces.IGuestProcess retVal;
            retVal = getTypedWrapped().processGet(pid);
            return (retVal != null) ? new org.virtualbox_4_3.IGuestProcess(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void symlinkCreate(String source, String target, org.virtualbox_4_3.SymlinkType type)
    {
        try
        {
            getTypedWrapped().symlinkCreate(source, target, type.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean symlinkExists(String symlink)
    {
        try
        {
            boolean retVal;
            retVal = getTypedWrapped().symlinkExists(symlink);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String symlinkRead(String symlink, List<org.virtualbox_4_3.SymlinkReadFlag> flags)
    {
        try
        {
            String retVal;
            retVal = getTypedWrapped().symlinkRead(symlink, flags != null ? flags.size() : 0, Helper.unwrapEnum(org.virtualbox_4_3.SymlinkReadFlag.class, flags));
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void symlinkRemoveDirectory(String path)
    {
        try
        {
            getTypedWrapped().symlinkRemoveDirectory(path);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void symlinkRemoveFile(String file)
    {
        try
        {
            getTypedWrapped().symlinkRemoveFile(file);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.GuestSessionWaitResult waitFor(Long waitFor, Long timeoutMS)
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().waitFor(waitFor, timeoutMS);
            return org.virtualbox_4_3.GuestSessionWaitResult.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.GuestSessionWaitResult waitForArray(List<org.virtualbox_4_3.GuestSessionWaitForFlag> waitFor, Long timeoutMS)
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().waitForArray(waitFor != null ? waitFor.size() : 0, Helper.unwrapEnum(org.virtualbox_4_3.GuestSessionWaitForFlag.class, waitFor), timeoutMS);
            return org.virtualbox_4_3.GuestSessionWaitResult.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IGuestSession.java"


// ##### BEGINFILE "IProcess.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IProcess.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IProcess extends IUnknown
{

    public IProcess(org.mozilla.interfaces.IProcess wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IProcess getTypedWrapped()
    {
        return (org.mozilla.interfaces.IProcess) getWrapped();
    }
    public List<String> getArguments()
    {
        try
        {
            String[] retVal = getTypedWrapped().getArguments(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getEnvironment()
    {
        try
        {
            String[] retVal = getTypedWrapped().getEnvironment(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IEventSource getEventSource()
    {
        try
        {
            org.mozilla.interfaces.IEventSource retVal = getTypedWrapped().getEventSource();
            return (retVal != null) ? new org.virtualbox_4_3.IEventSource(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getExecutablePath()
    {
        try
        {
            String retVal = getTypedWrapped().getExecutablePath();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getExitCode()
    {
        try
        {
            int retVal = getTypedWrapped().getExitCode();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getName()
    {
        try
        {
            String retVal = getTypedWrapped().getName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getPID()
    {
        try
        {
            long retVal = getTypedWrapped().getPID();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.ProcessStatus getStatus()
    {
        try
        {
            long retVal = getTypedWrapped().getStatus();
            return org.virtualbox_4_3.ProcessStatus.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IProcess queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IProcess qiobj = Helper.queryInterface(nsobj, "{5a4fe06d-8cb1-40ff-ac9e-9676e32f706e}", org.mozilla.interfaces.IProcess.class);
        return qiobj == null ? null : new IProcess(qiobj);
    }
    public org.virtualbox_4_3.ProcessWaitResult waitFor(Long waitFor, Long timeoutMS)
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().waitFor(waitFor, timeoutMS);
            return org.virtualbox_4_3.ProcessWaitResult.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.ProcessWaitResult waitForArray(List<org.virtualbox_4_3.ProcessWaitForFlag> waitFor, Long timeoutMS)
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().waitForArray(waitFor != null ? waitFor.size() : 0, Helper.unwrapEnum(org.virtualbox_4_3.ProcessWaitForFlag.class, waitFor), timeoutMS);
            return org.virtualbox_4_3.ProcessWaitResult.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public byte[] read(Long handle, Long toRead, Long timeoutMS)
    {
        try
        {
            byte[] retVal;
            retVal = getTypedWrapped().read(handle, toRead, timeoutMS, null);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long write(Long handle, Long flags, byte[] data, Long timeoutMS)
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().write(handle, flags, data, timeoutMS);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long writeArray(Long handle, List<org.virtualbox_4_3.ProcessInputFlag> flags, byte[] data, Long timeoutMS)
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().writeArray(handle, flags != null ? flags.size() : 0, Helper.unwrapEnum(org.virtualbox_4_3.ProcessInputFlag.class, flags), data, timeoutMS);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void terminate()
    {
        try
        {
            getTypedWrapped().terminate();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IProcess.java"


// ##### BEGINFILE "IGuestProcess.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestProcess.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestProcess extends IProcess
{

    public IGuestProcess(org.mozilla.interfaces.IGuestProcess wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestProcess getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestProcess) getWrapped();
    }
    public static IGuestProcess queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestProcess qiobj = Helper.queryInterface(nsobj, "{dfa39a36-5d43-4840-a025-67ea956b3111}", org.mozilla.interfaces.IGuestProcess.class);
        return qiobj == null ? null : new IGuestProcess(qiobj);
    }
}

// ##### ENDFILE "IGuestProcess.java"


// ##### BEGINFILE "IDirectory.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IDirectory.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IDirectory extends IUnknown
{

    public IDirectory(org.mozilla.interfaces.IDirectory wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IDirectory getTypedWrapped()
    {
        return (org.mozilla.interfaces.IDirectory) getWrapped();
    }
    public String getDirectoryName()
    {
        try
        {
            String retVal = getTypedWrapped().getDirectoryName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getFilter()
    {
        try
        {
            String retVal = getTypedWrapped().getFilter();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IDirectory queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IDirectory qiobj = Helper.queryInterface(nsobj, "{1b70dd03-26d7-483a-8877-89bbb0f87b70}", org.mozilla.interfaces.IDirectory.class);
        return qiobj == null ? null : new IDirectory(qiobj);
    }
    public void close()
    {
        try
        {
            getTypedWrapped().close();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IFsObjInfo read()
    {
        try
        {
            org.mozilla.interfaces.IFsObjInfo retVal;
            retVal = getTypedWrapped().read();
            return (retVal != null) ? new org.virtualbox_4_3.IFsObjInfo(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IDirectory.java"


// ##### BEGINFILE "IGuestDirectory.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestDirectory.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestDirectory extends IDirectory
{

    public IGuestDirectory(org.mozilla.interfaces.IGuestDirectory wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestDirectory getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestDirectory) getWrapped();
    }
    public static IGuestDirectory queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestDirectory qiobj = Helper.queryInterface(nsobj, "{af4a8ce0-0725-42b7-8826-46e3c7ba7357}", org.mozilla.interfaces.IGuestDirectory.class);
        return qiobj == null ? null : new IGuestDirectory(qiobj);
    }
}

// ##### ENDFILE "IGuestDirectory.java"


// ##### BEGINFILE "IFile.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IFile.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IFile extends IUnknown
{

    public IFile(org.mozilla.interfaces.IFile wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IFile getTypedWrapped()
    {
        return (org.mozilla.interfaces.IFile) getWrapped();
    }
    public Long getCreationMode()
    {
        try
        {
            long retVal = getTypedWrapped().getCreationMode();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getDisposition()
    {
        try
        {
            String retVal = getTypedWrapped().getDisposition();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IEventSource getEventSource()
    {
        try
        {
            org.mozilla.interfaces.IEventSource retVal = getTypedWrapped().getEventSource();
            return (retVal != null) ? new org.virtualbox_4_3.IEventSource(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getFileName()
    {
        try
        {
            String retVal = getTypedWrapped().getFileName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getId()
    {
        try
        {
            long retVal = getTypedWrapped().getId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getInitialSize()
    {
        try
        {
            long retVal = getTypedWrapped().getInitialSize();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getOpenMode()
    {
        try
        {
            String retVal = getTypedWrapped().getOpenMode();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getOffset()
    {
        try
        {
            long retVal = getTypedWrapped().getOffset();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.FileStatus getStatus()
    {
        try
        {
            long retVal = getTypedWrapped().getStatus();
            return org.virtualbox_4_3.FileStatus.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IFile queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IFile qiobj = Helper.queryInterface(nsobj, "{5ec56ea3-b55d-4bdb-8c4f-5f9fb26b894b}", org.mozilla.interfaces.IFile.class);
        return qiobj == null ? null : new IFile(qiobj);
    }
    public void close()
    {
        try
        {
            getTypedWrapped().close();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IFsObjInfo queryInfo()
    {
        try
        {
            org.mozilla.interfaces.IFsObjInfo retVal;
            retVal = getTypedWrapped().queryInfo();
            return (retVal != null) ? new org.virtualbox_4_3.IFsObjInfo(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public byte[] read(Long toRead, Long timeoutMS)
    {
        try
        {
            byte[] retVal;
            retVal = getTypedWrapped().read(toRead, timeoutMS, null);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public byte[] readAt(Long offset, Long toRead, Long timeoutMS)
    {
        try
        {
            byte[] retVal;
            retVal = getTypedWrapped().readAt(offset, toRead, timeoutMS, null);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void seek(Long offset, org.virtualbox_4_3.FileSeekType whence)
    {
        try
        {
            getTypedWrapped().seek(offset, whence.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setACL(String acl)
    {
        try
        {
            getTypedWrapped().setACL(acl);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long write(byte[] data, Long timeoutMS)
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().write(data, timeoutMS);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long writeAt(Long offset, byte[] data, Long timeoutMS)
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().writeAt(offset, data, timeoutMS);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IFile.java"


// ##### BEGINFILE "IGuestFile.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestFile.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestFile extends IFile
{

    public IGuestFile(org.mozilla.interfaces.IGuestFile wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestFile getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestFile) getWrapped();
    }
    public static IGuestFile queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestFile qiobj = Helper.queryInterface(nsobj, "{60661aec-145f-4d11-b80e-8ea151598093}", org.mozilla.interfaces.IGuestFile.class);
        return qiobj == null ? null : new IGuestFile(qiobj);
    }
}

// ##### ENDFILE "IGuestFile.java"


// ##### BEGINFILE "IFsObjInfo.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IFsObjInfo.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IFsObjInfo extends IUnknown
{

    public IFsObjInfo(org.mozilla.interfaces.IFsObjInfo wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IFsObjInfo getTypedWrapped()
    {
        return (org.mozilla.interfaces.IFsObjInfo) getWrapped();
    }
    public Long getAccessTime()
    {
        try
        {
            long retVal = getTypedWrapped().getAccessTime();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getAllocatedSize()
    {
        try
        {
            long retVal = getTypedWrapped().getAllocatedSize();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getBirthTime()
    {
        try
        {
            long retVal = getTypedWrapped().getBirthTime();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getChangeTime()
    {
        try
        {
            long retVal = getTypedWrapped().getChangeTime();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getDeviceNumber()
    {
        try
        {
            long retVal = getTypedWrapped().getDeviceNumber();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getFileAttributes()
    {
        try
        {
            String retVal = getTypedWrapped().getFileAttributes();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getGenerationId()
    {
        try
        {
            long retVal = getTypedWrapped().getGenerationId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getGID()
    {
        try
        {
            long retVal = getTypedWrapped().getGID();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getGroupName()
    {
        try
        {
            String retVal = getTypedWrapped().getGroupName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getHardLinks()
    {
        try
        {
            long retVal = getTypedWrapped().getHardLinks();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getModificationTime()
    {
        try
        {
            long retVal = getTypedWrapped().getModificationTime();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getName()
    {
        try
        {
            String retVal = getTypedWrapped().getName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getNodeId()
    {
        try
        {
            long retVal = getTypedWrapped().getNodeId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getNodeIdDevice()
    {
        try
        {
            long retVal = getTypedWrapped().getNodeIdDevice();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getObjectSize()
    {
        try
        {
            long retVal = getTypedWrapped().getObjectSize();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.FsObjType getType()
    {
        try
        {
            long retVal = getTypedWrapped().getType();
            return org.virtualbox_4_3.FsObjType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getUID()
    {
        try
        {
            long retVal = getTypedWrapped().getUID();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getUserFlags()
    {
        try
        {
            long retVal = getTypedWrapped().getUserFlags();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getUserName()
    {
        try
        {
            String retVal = getTypedWrapped().getUserName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IFsObjInfo queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IFsObjInfo qiobj = Helper.queryInterface(nsobj, "{4047ba30-7006-4966-ae86-94164e5e20eb}", org.mozilla.interfaces.IFsObjInfo.class);
        return qiobj == null ? null : new IFsObjInfo(qiobj);
    }
}

// ##### ENDFILE "IFsObjInfo.java"


// ##### BEGINFILE "IGuestFsObjInfo.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestFsObjInfo.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestFsObjInfo extends IFsObjInfo
{

    public IGuestFsObjInfo(org.mozilla.interfaces.IGuestFsObjInfo wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestFsObjInfo getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestFsObjInfo) getWrapped();
    }
    public static IGuestFsObjInfo queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestFsObjInfo qiobj = Helper.queryInterface(nsobj, "{d5cf678e-3484-4e4a-ac55-329e15462e18}", org.mozilla.interfaces.IGuestFsObjInfo.class);
        return qiobj == null ? null : new IGuestFsObjInfo(qiobj);
    }
}

// ##### ENDFILE "IGuestFsObjInfo.java"


// ##### BEGINFILE "IGuest.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuest.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuest extends IUnknown
{

    public IGuest(org.mozilla.interfaces.IGuest wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuest getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuest) getWrapped();
    }
    public String getOSTypeId()
    {
        try
        {
            String retVal = getTypedWrapped().getOSTypeId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.AdditionsRunLevelType getAdditionsRunLevel()
    {
        try
        {
            long retVal = getTypedWrapped().getAdditionsRunLevel();
            return org.virtualbox_4_3.AdditionsRunLevelType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getAdditionsVersion()
    {
        try
        {
            String retVal = getTypedWrapped().getAdditionsVersion();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getAdditionsRevision()
    {
        try
        {
            long retVal = getTypedWrapped().getAdditionsRevision();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IEventSource getEventSource()
    {
        try
        {
            org.mozilla.interfaces.IEventSource retVal = getTypedWrapped().getEventSource();
            return (retVal != null) ? new org.virtualbox_4_3.IEventSource(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IAdditionsFacility> getFacilities()
    {
        try
        {
            org.mozilla.interfaces.IAdditionsFacility[] retVal = getTypedWrapped().getFacilities(null);
            return Helper.wrap2(org.virtualbox_4_3.IAdditionsFacility.class, org.mozilla.interfaces.IAdditionsFacility.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IGuestSession> getSessions()
    {
        try
        {
            org.mozilla.interfaces.IGuestSession[] retVal = getTypedWrapped().getSessions(null);
            return Helper.wrap2(org.virtualbox_4_3.IGuestSession.class, org.mozilla.interfaces.IGuestSession.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getMemoryBalloonSize()
    {
        try
        {
            long retVal = getTypedWrapped().getMemoryBalloonSize();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setMemoryBalloonSize(Long value)
    {
        try
        {
            getTypedWrapped().setMemoryBalloonSize(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getStatisticsUpdateInterval()
    {
        try
        {
            long retVal = getTypedWrapped().getStatisticsUpdateInterval();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setStatisticsUpdateInterval(Long value)
    {
        try
        {
            getTypedWrapped().setStatisticsUpdateInterval(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IGuest queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuest qiobj = Helper.queryInterface(nsobj, "{8011a1b1-6adb-4ffb-a37e-20abdaee4650}", org.mozilla.interfaces.IGuest.class);
        return qiobj == null ? null : new IGuest(qiobj);
    }
    public void internalGetStatistics(Holder<Long> cpuUser, Holder<Long> cpuKernel, Holder<Long> cpuIdle, Holder<Long> memTotal, Holder<Long> memFree, Holder<Long> memBalloon, Holder<Long> memShared, Holder<Long> memCache, Holder<Long> pagedTotal, Holder<Long> memAllocTotal, Holder<Long> memFreeTotal, Holder<Long> memBalloonTotal, Holder<Long> memSharedTotal)
    {
        try
        {
        long[] tmp_cpuUser = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_cpuKernel = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_cpuIdle = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_memTotal = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_memFree = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_memBalloon = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_memShared = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_memCache = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_pagedTotal = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_memAllocTotal = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_memFreeTotal = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_memBalloonTotal = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_memSharedTotal = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
            getTypedWrapped().internalGetStatistics(tmp_cpuUser, tmp_cpuKernel, tmp_cpuIdle, tmp_memTotal, tmp_memFree, tmp_memBalloon, tmp_memShared, tmp_memCache, tmp_pagedTotal, tmp_memAllocTotal, tmp_memFreeTotal, tmp_memBalloonTotal, tmp_memSharedTotal);
        cpuUser.value = tmp_cpuUser[0];
        cpuKernel.value = tmp_cpuKernel[0];
        cpuIdle.value = tmp_cpuIdle[0];
        memTotal.value = tmp_memTotal[0];
        memFree.value = tmp_memFree[0];
        memBalloon.value = tmp_memBalloon[0];
        memShared.value = tmp_memShared[0];
        memCache.value = tmp_memCache[0];
        pagedTotal.value = tmp_pagedTotal[0];
        memAllocTotal.value = tmp_memAllocTotal[0];
        memFreeTotal.value = tmp_memFreeTotal[0];
        memBalloonTotal.value = tmp_memBalloonTotal[0];
        memSharedTotal.value = tmp_memSharedTotal[0];
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.AdditionsFacilityStatus getFacilityStatus(org.virtualbox_4_3.AdditionsFacilityType facility, Holder<Long> timestamp)
    {
        try
        {
        long[] tmp_timestamp = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
            long retVal;
            retVal = getTypedWrapped().getFacilityStatus(facility.value(), tmp_timestamp);
        timestamp.value = tmp_timestamp[0];
            return org.virtualbox_4_3.AdditionsFacilityStatus.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getAdditionsStatus(org.virtualbox_4_3.AdditionsRunLevelType level)
    {
        try
        {
            boolean retVal;
            retVal = getTypedWrapped().getAdditionsStatus(level.value());
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setCredentials(String userName, String password, String domain, Boolean allowInteractiveLogon)
    {
        try
        {
            getTypedWrapped().setCredentials(userName, password, domain, allowInteractiveLogon);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.DragAndDropAction dragHGEnter(Long screenId, Long y, Long x, org.virtualbox_4_3.DragAndDropAction defaultAction, List<org.virtualbox_4_3.DragAndDropAction> allowedActions, List<String> formats)
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().dragHGEnter(screenId, y, x, defaultAction.value(), allowedActions != null ? allowedActions.size() : 0, Helper.unwrapEnum(org.virtualbox_4_3.DragAndDropAction.class, allowedActions), formats != null ? formats.size() : 0, Helper.unwrapStr(formats));
            return org.virtualbox_4_3.DragAndDropAction.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.DragAndDropAction dragHGMove(Long screenId, Long x, Long y, org.virtualbox_4_3.DragAndDropAction defaultAction, List<org.virtualbox_4_3.DragAndDropAction> allowedActions, List<String> formats)
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().dragHGMove(screenId, x, y, defaultAction.value(), allowedActions != null ? allowedActions.size() : 0, Helper.unwrapEnum(org.virtualbox_4_3.DragAndDropAction.class, allowedActions), formats != null ? formats.size() : 0, Helper.unwrapStr(formats));
            return org.virtualbox_4_3.DragAndDropAction.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void dragHGLeave(Long screenId)
    {
        try
        {
            getTypedWrapped().dragHGLeave(screenId);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.DragAndDropAction dragHGDrop(Long screenId, Long x, Long y, org.virtualbox_4_3.DragAndDropAction defaultAction, List<org.virtualbox_4_3.DragAndDropAction> allowedActions, List<String> formats, Holder<String> format)
    {
        try
        {
        String[] tmp_format = (String[])java.lang.reflect.Array.newInstance(String.class, 1);
            long retVal;
            retVal = getTypedWrapped().dragHGDrop(screenId, x, y, defaultAction.value(), allowedActions != null ? allowedActions.size() : 0, Helper.unwrapEnum(org.virtualbox_4_3.DragAndDropAction.class, allowedActions), formats != null ? formats.size() : 0, Helper.unwrapStr(formats), tmp_format);
        format.value = tmp_format[0];
            return org.virtualbox_4_3.DragAndDropAction.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress dragHGPutData(Long screenId, String format, byte[] data)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().dragHGPutData(screenId, format, data);
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.DragAndDropAction dragGHPending(Long screenId, Holder<List<String>> formats, Holder<List<org.virtualbox_4_3.DragAndDropAction>> allowedActions)
    {
        try
        {
        String[][] tmp_formats = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
        long[][] tmp_allowedActions = (long[][])java.lang.reflect.Array.newInstance(long[].class, 1);
            long retVal;
            retVal = getTypedWrapped().dragGHPending(screenId, null, tmp_formats, null, tmp_allowedActions);
        formats.value = Helper.wrap(tmp_formats[0]);
        allowedActions.value = Helper.wrapEnum(org.virtualbox_4_3.DragAndDropAction.class, tmp_allowedActions[0]);
            return org.virtualbox_4_3.DragAndDropAction.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress dragGHDropped(String format, org.virtualbox_4_3.DragAndDropAction action)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().dragGHDropped(format, action.value());
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public byte[] dragGHGetData()
    {
        try
        {
            byte[] retVal;
            retVal = getTypedWrapped().dragGHGetData(null);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IGuestSession createSession(String user, String password, String domain, String sessionName)
    {
        try
        {
            org.mozilla.interfaces.IGuestSession retVal;
            retVal = getTypedWrapped().createSession(user, password, domain, sessionName);
            return (retVal != null) ? new org.virtualbox_4_3.IGuestSession(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IGuestSession> findSession(String sessionName)
    {
        try
        {
            org.mozilla.interfaces.IGuestSession[] retVal;
            retVal = getTypedWrapped().findSession(sessionName, null);
            return Helper.wrap2(org.virtualbox_4_3.IGuestSession.class, org.mozilla.interfaces.IGuestSession.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress updateGuestAdditions(String source, List<String> arguments, List<org.virtualbox_4_3.AdditionsUpdateFlag> flags)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().updateGuestAdditions(source, arguments != null ? arguments.size() : 0, Helper.unwrapStr(arguments), flags != null ? flags.size() : 0, Helper.unwrapEnum(org.virtualbox_4_3.AdditionsUpdateFlag.class, flags));
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IGuest.java"


// ##### BEGINFILE "IProgress.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IProgress.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IProgress extends IUnknown
{

    public IProgress(org.mozilla.interfaces.IProgress wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IProgress getTypedWrapped()
    {
        return (org.mozilla.interfaces.IProgress) getWrapped();
    }
    public String getId()
    {
        try
        {
            String retVal = getTypedWrapped().getId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getDescription()
    {
        try
        {
            String retVal = getTypedWrapped().getDescription();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public IUnknown getInitiator()
    {
        try
        {
            nsISupports retVal = getTypedWrapped().getInitiator();
            return (retVal != null) ? new IUnknown(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getCancelable()
    {
        try
        {
            boolean retVal = getTypedWrapped().getCancelable();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getPercent()
    {
        try
        {
            long retVal = getTypedWrapped().getPercent();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getTimeRemaining()
    {
        try
        {
            int retVal = getTypedWrapped().getTimeRemaining();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getCompleted()
    {
        try
        {
            boolean retVal = getTypedWrapped().getCompleted();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getCanceled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getCanceled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getResultCode()
    {
        try
        {
            int retVal = getTypedWrapped().getResultCode();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IVirtualBoxErrorInfo getErrorInfo()
    {
        try
        {
            org.mozilla.interfaces.IVirtualBoxErrorInfo retVal = getTypedWrapped().getErrorInfo();
            return (retVal != null) ? new org.virtualbox_4_3.IVirtualBoxErrorInfo(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getOperationCount()
    {
        try
        {
            long retVal = getTypedWrapped().getOperationCount();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getOperation()
    {
        try
        {
            long retVal = getTypedWrapped().getOperation();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getOperationDescription()
    {
        try
        {
            String retVal = getTypedWrapped().getOperationDescription();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getOperationPercent()
    {
        try
        {
            long retVal = getTypedWrapped().getOperationPercent();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getOperationWeight()
    {
        try
        {
            long retVal = getTypedWrapped().getOperationWeight();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getTimeout()
    {
        try
        {
            long retVal = getTypedWrapped().getTimeout();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setTimeout(Long value)
    {
        try
        {
            getTypedWrapped().setTimeout(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IProgress queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IProgress qiobj = Helper.queryInterface(nsobj, "{c20238e4-3221-4d3f-8891-81ce92d9f913}", org.mozilla.interfaces.IProgress.class);
        return qiobj == null ? null : new IProgress(qiobj);
    }
    public void setCurrentOperationProgress(Long percent)
    {
        try
        {
            getTypedWrapped().setCurrentOperationProgress(percent);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setNextOperation(String nextOperationDescription, Long nextOperationsWeight)
    {
        try
        {
            getTypedWrapped().setNextOperation(nextOperationDescription, nextOperationsWeight);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void waitForCompletion(Integer timeout)
    {
        try
        {
            getTypedWrapped().waitForCompletion(timeout);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void waitForOperationCompletion(Long operation, Integer timeout)
    {
        try
        {
            getTypedWrapped().waitForOperationCompletion(operation, timeout);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void waitForAsyncProgressCompletion(org.virtualbox_4_3.IProgress pProgressAsync)
    {
        try
        {
            getTypedWrapped().waitForAsyncProgressCompletion((pProgressAsync != null) ? pProgressAsync.getTypedWrapped() : null);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void cancel()
    {
        try
        {
            getTypedWrapped().cancel();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IProgress.java"


// ##### BEGINFILE "ISnapshot.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ISnapshot.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class ISnapshot extends IUnknown
{

    public ISnapshot(org.mozilla.interfaces.ISnapshot wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.ISnapshot getTypedWrapped()
    {
        return (org.mozilla.interfaces.ISnapshot) getWrapped();
    }
    public String getId()
    {
        try
        {
            String retVal = getTypedWrapped().getId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getName()
    {
        try
        {
            String retVal = getTypedWrapped().getName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setName(String value)
    {
        try
        {
            getTypedWrapped().setName(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getDescription()
    {
        try
        {
            String retVal = getTypedWrapped().getDescription();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setDescription(String value)
    {
        try
        {
            getTypedWrapped().setDescription(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getTimeStamp()
    {
        try
        {
            long retVal = getTypedWrapped().getTimeStamp();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getOnline()
    {
        try
        {
            boolean retVal = getTypedWrapped().getOnline();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IMachine getMachine()
    {
        try
        {
            org.mozilla.interfaces.IMachine retVal = getTypedWrapped().getMachine();
            return (retVal != null) ? new org.virtualbox_4_3.IMachine(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.ISnapshot getParent()
    {
        try
        {
            org.mozilla.interfaces.ISnapshot retVal = getTypedWrapped().getParent();
            return (retVal != null) ? new org.virtualbox_4_3.ISnapshot(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.ISnapshot> getChildren()
    {
        try
        {
            org.mozilla.interfaces.ISnapshot[] retVal = getTypedWrapped().getChildren(null);
            return Helper.wrap2(org.virtualbox_4_3.ISnapshot.class, org.mozilla.interfaces.ISnapshot.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static ISnapshot queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.ISnapshot qiobj = Helper.queryInterface(nsobj, "{0472823b-c6e7-472a-8e9f-d732e86b8463}", org.mozilla.interfaces.ISnapshot.class);
        return qiobj == null ? null : new ISnapshot(qiobj);
    }
    public Long getChildrenCount()
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().getChildrenCount();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "ISnapshot.java"


// ##### BEGINFILE "IMediumAttachment.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IMediumAttachment.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IMediumAttachment extends IUnknown
{

    public IMediumAttachment(org.mozilla.interfaces.IMediumAttachment wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IMediumAttachment getTypedWrapped()
    {
        return (org.mozilla.interfaces.IMediumAttachment) getWrapped();
    }
    public org.virtualbox_4_3.IMedium getMedium()
    {
        try
        {
            org.mozilla.interfaces.IMedium retVal = getTypedWrapped().getMedium();
            return (retVal != null) ? new org.virtualbox_4_3.IMedium(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getController()
    {
        try
        {
            String retVal = getTypedWrapped().getController();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getPort()
    {
        try
        {
            int retVal = getTypedWrapped().getPort();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getDevice()
    {
        try
        {
            int retVal = getTypedWrapped().getDevice();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.DeviceType getType()
    {
        try
        {
            long retVal = getTypedWrapped().getType();
            return org.virtualbox_4_3.DeviceType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getPassthrough()
    {
        try
        {
            boolean retVal = getTypedWrapped().getPassthrough();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getTemporaryEject()
    {
        try
        {
            boolean retVal = getTypedWrapped().getTemporaryEject();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getIsEjected()
    {
        try
        {
            boolean retVal = getTypedWrapped().getIsEjected();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getNonRotational()
    {
        try
        {
            boolean retVal = getTypedWrapped().getNonRotational();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getDiscard()
    {
        try
        {
            boolean retVal = getTypedWrapped().getDiscard();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getHotPluggable()
    {
        try
        {
            boolean retVal = getTypedWrapped().getHotPluggable();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IBandwidthGroup getBandwidthGroup()
    {
        try
        {
            org.mozilla.interfaces.IBandwidthGroup retVal = getTypedWrapped().getBandwidthGroup();
            return (retVal != null) ? new org.virtualbox_4_3.IBandwidthGroup(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IMediumAttachment queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IMediumAttachment qiobj = Helper.queryInterface(nsobj, "{4b252567-5d4e-4db8-b3c8-569ec1c9236c}", org.mozilla.interfaces.IMediumAttachment.class);
        return qiobj == null ? null : new IMediumAttachment(qiobj);
    }
}

// ##### ENDFILE "IMediumAttachment.java"


// ##### BEGINFILE "IMedium.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IMedium.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IMedium extends IUnknown
{

    public IMedium(org.mozilla.interfaces.IMedium wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IMedium getTypedWrapped()
    {
        return (org.mozilla.interfaces.IMedium) getWrapped();
    }
    public String getId()
    {
        try
        {
            String retVal = getTypedWrapped().getId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getDescription()
    {
        try
        {
            String retVal = getTypedWrapped().getDescription();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setDescription(String value)
    {
        try
        {
            getTypedWrapped().setDescription(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.MediumState getState()
    {
        try
        {
            long retVal = getTypedWrapped().getState();
            return org.virtualbox_4_3.MediumState.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.MediumVariant> getVariant()
    {
        try
        {
            long[] retVal = getTypedWrapped().getVariant(null);
            return Helper.wrapEnum(org.virtualbox_4_3.MediumVariant.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getLocation()
    {
        try
        {
            String retVal = getTypedWrapped().getLocation();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getName()
    {
        try
        {
            String retVal = getTypedWrapped().getName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.DeviceType getDeviceType()
    {
        try
        {
            long retVal = getTypedWrapped().getDeviceType();
            return org.virtualbox_4_3.DeviceType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getHostDrive()
    {
        try
        {
            boolean retVal = getTypedWrapped().getHostDrive();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getSize()
    {
        try
        {
            long retVal = getTypedWrapped().getSize();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getFormat()
    {
        try
        {
            String retVal = getTypedWrapped().getFormat();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IMediumFormat getMediumFormat()
    {
        try
        {
            org.mozilla.interfaces.IMediumFormat retVal = getTypedWrapped().getMediumFormat();
            return (retVal != null) ? new org.virtualbox_4_3.IMediumFormat(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.MediumType getType()
    {
        try
        {
            long retVal = getTypedWrapped().getType();
            return org.virtualbox_4_3.MediumType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setType(org.virtualbox_4_3.MediumType value)
    {
        try
        {
            getTypedWrapped().setType(value.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.MediumType> getAllowedTypes()
    {
        try
        {
            long[] retVal = getTypedWrapped().getAllowedTypes(null);
            return Helper.wrapEnum(org.virtualbox_4_3.MediumType.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IMedium getParent()
    {
        try
        {
            org.mozilla.interfaces.IMedium retVal = getTypedWrapped().getParent();
            return (retVal != null) ? new org.virtualbox_4_3.IMedium(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IMedium> getChildren()
    {
        try
        {
            org.mozilla.interfaces.IMedium[] retVal = getTypedWrapped().getChildren(null);
            return Helper.wrap2(org.virtualbox_4_3.IMedium.class, org.mozilla.interfaces.IMedium.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IMedium getBase()
    {
        try
        {
            org.mozilla.interfaces.IMedium retVal = getTypedWrapped().getBase();
            return (retVal != null) ? new org.virtualbox_4_3.IMedium(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getReadOnly()
    {
        try
        {
            boolean retVal = getTypedWrapped().getReadOnly();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getLogicalSize()
    {
        try
        {
            long retVal = getTypedWrapped().getLogicalSize();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getAutoReset()
    {
        try
        {
            boolean retVal = getTypedWrapped().getAutoReset();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setAutoReset(Boolean value)
    {
        try
        {
            getTypedWrapped().setAutoReset(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getLastAccessError()
    {
        try
        {
            String retVal = getTypedWrapped().getLastAccessError();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getMachineIds()
    {
        try
        {
            String[] retVal = getTypedWrapped().getMachineIds(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IMedium queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IMedium qiobj = Helper.queryInterface(nsobj, "{05f2bbb6-a3a6-4fb9-9b49-6d0dda7142ac}", org.mozilla.interfaces.IMedium.class);
        return qiobj == null ? null : new IMedium(qiobj);
    }
    public void setIds(Boolean setImageId, String imageId, Boolean setParentId, String parentId)
    {
        try
        {
            getTypedWrapped().setIds(setImageId, imageId, setParentId, parentId);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.MediumState refreshState()
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().refreshState();
            return org.virtualbox_4_3.MediumState.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getSnapshotIds(String machineId)
    {
        try
        {
            String[] retVal;
            retVal = getTypedWrapped().getSnapshotIds(machineId, null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IToken lockRead()
    {
        try
        {
            org.mozilla.interfaces.IToken retVal;
            retVal = getTypedWrapped().lockRead();
            return (retVal != null) ? new org.virtualbox_4_3.IToken(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IToken lockWrite()
    {
        try
        {
            org.mozilla.interfaces.IToken retVal;
            retVal = getTypedWrapped().lockWrite();
            return (retVal != null) ? new org.virtualbox_4_3.IToken(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void close()
    {
        try
        {
            getTypedWrapped().close();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getProperty(String name)
    {
        try
        {
            String retVal;
            retVal = getTypedWrapped().getProperty(name);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setProperty(String name, String value)
    {
        try
        {
            getTypedWrapped().setProperty(name, value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getProperties(String names, Holder<List<String>> returnNames)
    {
        try
        {
        String[][] tmp_returnNames = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
            String[] retVal;
            retVal = getTypedWrapped().getProperties(names, null, tmp_returnNames, null);
        returnNames.value = Helper.wrap(tmp_returnNames[0]);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setProperties(List<String> names, List<String> values)
    {
        try
        {
            getTypedWrapped().setProperties(names != null ? names.size() : 0, Helper.unwrapStr(names), values != null ? values.size() : 0, Helper.unwrapStr(values));
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress createBaseStorage(Long logicalSize, List<org.virtualbox_4_3.MediumVariant> variant)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().createBaseStorage(logicalSize, variant != null ? variant.size() : 0, Helper.unwrapEnum(org.virtualbox_4_3.MediumVariant.class, variant));
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress deleteStorage()
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().deleteStorage();
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress createDiffStorage(org.virtualbox_4_3.IMedium target, List<org.virtualbox_4_3.MediumVariant> variant)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().createDiffStorage((target != null) ? target.getTypedWrapped() : null, variant != null ? variant.size() : 0, Helper.unwrapEnum(org.virtualbox_4_3.MediumVariant.class, variant));
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress mergeTo(org.virtualbox_4_3.IMedium target)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().mergeTo((target != null) ? target.getTypedWrapped() : null);
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress cloneTo(org.virtualbox_4_3.IMedium target, List<org.virtualbox_4_3.MediumVariant> variant, org.virtualbox_4_3.IMedium parent)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().cloneTo((target != null) ? target.getTypedWrapped() : null, variant != null ? variant.size() : 0, Helper.unwrapEnum(org.virtualbox_4_3.MediumVariant.class, variant), (parent != null) ? parent.getTypedWrapped() : null);
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress cloneToBase(org.virtualbox_4_3.IMedium target, List<org.virtualbox_4_3.MediumVariant> variant)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().cloneToBase((target != null) ? target.getTypedWrapped() : null, variant != null ? variant.size() : 0, Helper.unwrapEnum(org.virtualbox_4_3.MediumVariant.class, variant));
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress setLocation(String location)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().setLocation(location);
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress compact()
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().compact();
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress resize(Long logicalSize)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().resize(logicalSize);
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress reset()
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().reset();
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IMedium.java"


// ##### BEGINFILE "IMediumFormat.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IMediumFormat.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IMediumFormat extends IUnknown
{

    public IMediumFormat(org.mozilla.interfaces.IMediumFormat wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IMediumFormat getTypedWrapped()
    {
        return (org.mozilla.interfaces.IMediumFormat) getWrapped();
    }
    public String getId()
    {
        try
        {
            String retVal = getTypedWrapped().getId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getName()
    {
        try
        {
            String retVal = getTypedWrapped().getName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.MediumFormatCapabilities> getCapabilities()
    {
        try
        {
            long[] retVal = getTypedWrapped().getCapabilities(null);
            return Helper.wrapEnum(org.virtualbox_4_3.MediumFormatCapabilities.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IMediumFormat queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IMediumFormat qiobj = Helper.queryInterface(nsobj, "{6238e1cf-a17d-4ec1-8172-418bfb22b93a}", org.mozilla.interfaces.IMediumFormat.class);
        return qiobj == null ? null : new IMediumFormat(qiobj);
    }
    public void describeFileExtensions(Holder<List<String>> extensions, Holder<List<org.virtualbox_4_3.DeviceType>> types)
    {
        try
        {
        String[][] tmp_extensions = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
        long[][] tmp_types = (long[][])java.lang.reflect.Array.newInstance(long[].class, 1);
            getTypedWrapped().describeFileExtensions(null, tmp_extensions, null, tmp_types);
        extensions.value = Helper.wrap(tmp_extensions[0]);
        types.value = Helper.wrapEnum(org.virtualbox_4_3.DeviceType.class, tmp_types[0]);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void describeProperties(Holder<List<String>> names, Holder<List<String>> descriptions, Holder<List<org.virtualbox_4_3.DataType>> types, Holder<List<Long>> flags, Holder<List<String>> defaults)
    {
        try
        {
        String[][] tmp_names = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
        String[][] tmp_descriptions = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
        long[][] tmp_types = (long[][])java.lang.reflect.Array.newInstance(long[].class, 1);
        long[][] tmp_flags = (long[][])java.lang.reflect.Array.newInstance(long[].class, 1);
        String[][] tmp_defaults = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
            getTypedWrapped().describeProperties(null, tmp_names, null, tmp_descriptions, null, tmp_types, null, tmp_flags, null, tmp_defaults);
        names.value = Helper.wrap(tmp_names[0]);
        descriptions.value = Helper.wrap(tmp_descriptions[0]);
        types.value = Helper.wrapEnum(org.virtualbox_4_3.DataType.class, tmp_types[0]);
        flags.value = Helper.wrap(tmp_flags[0]);
        defaults.value = Helper.wrap(tmp_defaults[0]);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IMediumFormat.java"


// ##### BEGINFILE "IToken.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IToken.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IToken extends IUnknown
{

    public IToken(org.mozilla.interfaces.IToken wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IToken getTypedWrapped()
    {
        return (org.mozilla.interfaces.IToken) getWrapped();
    }
    public static IToken queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IToken qiobj = Helper.queryInterface(nsobj, "{3b1c4797-e289-4d4c-b74c-50c9b86a36f8}", org.mozilla.interfaces.IToken.class);
        return qiobj == null ? null : new IToken(qiobj);
    }
    public void abandon()
    {
        try
        {
            getTypedWrapped().abandon();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void dummy()
    {
        try
        {
            getTypedWrapped().dummy();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IToken.java"


// ##### BEGINFILE "IKeyboard.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IKeyboard.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IKeyboard extends IUnknown
{

    public IKeyboard(org.mozilla.interfaces.IKeyboard wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IKeyboard getTypedWrapped()
    {
        return (org.mozilla.interfaces.IKeyboard) getWrapped();
    }
    public org.virtualbox_4_3.IEventSource getEventSource()
    {
        try
        {
            org.mozilla.interfaces.IEventSource retVal = getTypedWrapped().getEventSource();
            return (retVal != null) ? new org.virtualbox_4_3.IEventSource(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IKeyboard queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IKeyboard qiobj = Helper.queryInterface(nsobj, "{f6916ec5-a881-4237-898f-7de58cf88672}", org.mozilla.interfaces.IKeyboard.class);
        return qiobj == null ? null : new IKeyboard(qiobj);
    }
    public void putScancode(Integer scancode)
    {
        try
        {
            getTypedWrapped().putScancode(scancode);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long putScancodes(List<Integer> scancodes)
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().putScancodes(scancodes != null ? scancodes.size() : 0, Helper.unwrapInteger(scancodes));
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void putCAD()
    {
        try
        {
            getTypedWrapped().putCAD();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IKeyboard.java"


// ##### BEGINFILE "IMouse.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IMouse.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IMouse extends IUnknown
{

    public IMouse(org.mozilla.interfaces.IMouse wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IMouse getTypedWrapped()
    {
        return (org.mozilla.interfaces.IMouse) getWrapped();
    }
    public Boolean getAbsoluteSupported()
    {
        try
        {
            boolean retVal = getTypedWrapped().getAbsoluteSupported();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getRelativeSupported()
    {
        try
        {
            boolean retVal = getTypedWrapped().getRelativeSupported();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getMultiTouchSupported()
    {
        try
        {
            boolean retVal = getTypedWrapped().getMultiTouchSupported();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getNeedsHostCursor()
    {
        try
        {
            boolean retVal = getTypedWrapped().getNeedsHostCursor();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IEventSource getEventSource()
    {
        try
        {
            org.mozilla.interfaces.IEventSource retVal = getTypedWrapped().getEventSource();
            return (retVal != null) ? new org.virtualbox_4_3.IEventSource(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IMouse queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IMouse qiobj = Helper.queryInterface(nsobj, "{ee770393-415f-4421-b2d5-28b73cacf86a}", org.mozilla.interfaces.IMouse.class);
        return qiobj == null ? null : new IMouse(qiobj);
    }
    public void putMouseEvent(Integer dx, Integer dy, Integer dz, Integer dw, Integer buttonState)
    {
        try
        {
            getTypedWrapped().putMouseEvent(dx, dy, dz, dw, buttonState);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void putMouseEventAbsolute(Integer x, Integer y, Integer dz, Integer dw, Integer buttonState)
    {
        try
        {
            getTypedWrapped().putMouseEventAbsolute(x, y, dz, dw, buttonState);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void putEventMultiTouch(Integer count, List<Long> contacts, Long scanTime)
    {
        try
        {
            getTypedWrapped().putEventMultiTouch(count, contacts != null ? contacts.size() : 0, Helper.unwrapULong(contacts), scanTime);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void putEventMultiTouchString(Integer count, String contacts, Long scanTime)
    {
        try
        {
            getTypedWrapped().putEventMultiTouchString(count, contacts, scanTime);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IMouse.java"


// ##### BEGINFILE "IFramebuffer.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IFramebuffer.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IFramebuffer extends IUnknown
{

    public IFramebuffer(org.mozilla.interfaces.IFramebuffer wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IFramebuffer getTypedWrapped()
    {
        return (org.mozilla.interfaces.IFramebuffer) getWrapped();
    }
    public Long getWidth()
    {
        try
        {
            long retVal = getTypedWrapped().getWidth();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getHeight()
    {
        try
        {
            long retVal = getTypedWrapped().getHeight();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getBitsPerPixel()
    {
        try
        {
            long retVal = getTypedWrapped().getBitsPerPixel();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getBytesPerLine()
    {
        try
        {
            long retVal = getTypedWrapped().getBytesPerLine();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getPixelFormat()
    {
        try
        {
            long retVal = getTypedWrapped().getPixelFormat();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getUsesGuestVRAM()
    {
        try
        {
            boolean retVal = getTypedWrapped().getUsesGuestVRAM();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getHeightReduction()
    {
        try
        {
            long retVal = getTypedWrapped().getHeightReduction();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IFramebufferOverlay getOverlay()
    {
        try
        {
            org.mozilla.interfaces.IFramebufferOverlay retVal = getTypedWrapped().getOverlay();
            return (retVal != null) ? new org.virtualbox_4_3.IFramebufferOverlay(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getWinId()
    {
        try
        {
            long retVal = getTypedWrapped().getWinId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IFramebuffer queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IFramebuffer qiobj = Helper.queryInterface(nsobj, "{e3f122c0-adab-4fc9-a8dc-da112fb48428}", org.mozilla.interfaces.IFramebuffer.class);
        return qiobj == null ? null : new IFramebuffer(qiobj);
    }
    public void lock()
    {
        try
        {
            getTypedWrapped().lock();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void unlock()
    {
        try
        {
            getTypedWrapped().unlock();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void notifyUpdate(Long x, Long y, Long width, Long height)
    {
        try
        {
            getTypedWrapped().notifyUpdate(x, y, width, height);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    // Skipping method requestResize for it has parameters with suppressed types
    public Boolean videoModeSupported(Long width, Long height, Long bpp)
    {
        try
        {
            boolean retVal;
            retVal = getTypedWrapped().videoModeSupported(width, height, bpp);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    // Skipping method getVisibleRegion for it has parameters with suppressed types
    // Skipping method setVisibleRegion for it has parameters with suppressed types
    // Skipping method processVHWACommand for it has parameters with suppressed types
    // Skipping method notify3DEvent for it has parameters with suppressed types
}

// ##### ENDFILE "IFramebuffer.java"


// ##### BEGINFILE "IFramebufferOverlay.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IFramebufferOverlay.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IFramebufferOverlay extends IFramebuffer
{

    public IFramebufferOverlay(org.mozilla.interfaces.IFramebufferOverlay wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IFramebufferOverlay getTypedWrapped()
    {
        return (org.mozilla.interfaces.IFramebufferOverlay) getWrapped();
    }
    public Long getX()
    {
        try
        {
            long retVal = getTypedWrapped().getX();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getY()
    {
        try
        {
            long retVal = getTypedWrapped().getY();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getVisible()
    {
        try
        {
            boolean retVal = getTypedWrapped().getVisible();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setVisible(Boolean value)
    {
        try
        {
            getTypedWrapped().setVisible(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getAlpha()
    {
        try
        {
            long retVal = getTypedWrapped().getAlpha();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setAlpha(Long value)
    {
        try
        {
            getTypedWrapped().setAlpha(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IFramebufferOverlay queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IFramebufferOverlay qiobj = Helper.queryInterface(nsobj, "{0bcc1c7e-e415-47d2-bfdb-e4c705fb0f47}", org.mozilla.interfaces.IFramebufferOverlay.class);
        return qiobj == null ? null : new IFramebufferOverlay(qiobj);
    }
    public void move(Long x, Long y)
    {
        try
        {
            getTypedWrapped().move(x, y);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IFramebufferOverlay.java"


// ##### BEGINFILE "IDisplay.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IDisplay.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IDisplay extends IUnknown
{

    public IDisplay(org.mozilla.interfaces.IDisplay wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IDisplay getTypedWrapped()
    {
        return (org.mozilla.interfaces.IDisplay) getWrapped();
    }
    public static IDisplay queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IDisplay qiobj = Helper.queryInterface(nsobj, "{480b372c-c0b5-4c23-9bd7-dcbb85b1594c}", org.mozilla.interfaces.IDisplay.class);
        return qiobj == null ? null : new IDisplay(qiobj);
    }
    public void getScreenResolution(Long screenId, Holder<Long> width, Holder<Long> height, Holder<Long> bitsPerPixel, Holder<Integer> xOrigin, Holder<Integer> yOrigin)
    {
        try
        {
        long[] tmp_width = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_height = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_bitsPerPixel = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        int[] tmp_xOrigin = (int[])java.lang.reflect.Array.newInstance(int.class, 1);
        int[] tmp_yOrigin = (int[])java.lang.reflect.Array.newInstance(int.class, 1);
            getTypedWrapped().getScreenResolution(screenId, tmp_width, tmp_height, tmp_bitsPerPixel, tmp_xOrigin, tmp_yOrigin);
        width.value = tmp_width[0];
        height.value = tmp_height[0];
        bitsPerPixel.value = tmp_bitsPerPixel[0];
        xOrigin.value = tmp_xOrigin[0];
        yOrigin.value = tmp_yOrigin[0];
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setFramebuffer(Long screenId, org.virtualbox_4_3.IFramebuffer framebuffer)
    {
        try
        {
            getTypedWrapped().setFramebuffer(screenId, (framebuffer != null) ? framebuffer.getTypedWrapped() : null);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void getFramebuffer(Long screenId, Holder<org.virtualbox_4_3.IFramebuffer> framebuffer, Holder<Integer> xOrigin, Holder<Integer> yOrigin)
    {
        try
        {
        org.mozilla.interfaces.IFramebuffer[] tmp_framebuffer = (org.mozilla.interfaces.IFramebuffer[])java.lang.reflect.Array.newInstance(org.mozilla.interfaces.IFramebuffer.class, 1);
        int[] tmp_xOrigin = (int[])java.lang.reflect.Array.newInstance(int.class, 1);
        int[] tmp_yOrigin = (int[])java.lang.reflect.Array.newInstance(int.class, 1);
            getTypedWrapped().getFramebuffer(screenId, tmp_framebuffer, tmp_xOrigin, tmp_yOrigin);
        framebuffer.value = (tmp_framebuffer[0] != null) ? new org.virtualbox_4_3.IFramebuffer(tmp_framebuffer[0]) : null;
        xOrigin.value = tmp_xOrigin[0];
        yOrigin.value = tmp_yOrigin[0];
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setVideoModeHint(Long display, Boolean enabled, Boolean changeOrigin, Integer originX, Integer originY, Long width, Long height, Long bitsPerPixel)
    {
        try
        {
            getTypedWrapped().setVideoModeHint(display, enabled, changeOrigin, originX, originY, width, height, bitsPerPixel);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setSeamlessMode(Boolean enabled)
    {
        try
        {
            getTypedWrapped().setSeamlessMode(enabled);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    // Skipping method takeScreenShot for it has parameters with suppressed types
    public byte[] takeScreenShotToArray(Long screenId, Long width, Long height)
    {
        try
        {
            byte[] retVal;
            retVal = getTypedWrapped().takeScreenShotToArray(screenId, width, height, null);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public byte[] takeScreenShotPNGToArray(Long screenId, Long width, Long height)
    {
        try
        {
            byte[] retVal;
            retVal = getTypedWrapped().takeScreenShotPNGToArray(screenId, width, height, null);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    // Skipping method drawToScreen for it has parameters with suppressed types
    public void invalidateAndUpdate()
    {
        try
        {
            getTypedWrapped().invalidateAndUpdate();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void resizeCompleted(Long screenId)
    {
        try
        {
            getTypedWrapped().resizeCompleted(screenId);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    // Skipping method completeVHWACommand for it has parameters with suppressed types
    public void viewportChanged(Long screenId, Long x, Long y, Long width, Long height)
    {
        try
        {
            getTypedWrapped().viewportChanged(screenId, x, y, width, height);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IDisplay.java"


// ##### BEGINFILE "INetworkAdapter.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * INetworkAdapter.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class INetworkAdapter extends IUnknown
{

    public INetworkAdapter(org.mozilla.interfaces.INetworkAdapter wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.INetworkAdapter getTypedWrapped()
    {
        return (org.mozilla.interfaces.INetworkAdapter) getWrapped();
    }
    public org.virtualbox_4_3.NetworkAdapterType getAdapterType()
    {
        try
        {
            long retVal = getTypedWrapped().getAdapterType();
            return org.virtualbox_4_3.NetworkAdapterType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setAdapterType(org.virtualbox_4_3.NetworkAdapterType value)
    {
        try
        {
            getTypedWrapped().setAdapterType(value.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getSlot()
    {
        try
        {
            long retVal = getTypedWrapped().getSlot();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getMACAddress()
    {
        try
        {
            String retVal = getTypedWrapped().getMACAddress();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setMACAddress(String value)
    {
        try
        {
            getTypedWrapped().setMACAddress(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.NetworkAttachmentType getAttachmentType()
    {
        try
        {
            long retVal = getTypedWrapped().getAttachmentType();
            return org.virtualbox_4_3.NetworkAttachmentType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setAttachmentType(org.virtualbox_4_3.NetworkAttachmentType value)
    {
        try
        {
            getTypedWrapped().setAttachmentType(value.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getBridgedInterface()
    {
        try
        {
            String retVal = getTypedWrapped().getBridgedInterface();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setBridgedInterface(String value)
    {
        try
        {
            getTypedWrapped().setBridgedInterface(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getHostOnlyInterface()
    {
        try
        {
            String retVal = getTypedWrapped().getHostOnlyInterface();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setHostOnlyInterface(String value)
    {
        try
        {
            getTypedWrapped().setHostOnlyInterface(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getInternalNetwork()
    {
        try
        {
            String retVal = getTypedWrapped().getInternalNetwork();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setInternalNetwork(String value)
    {
        try
        {
            getTypedWrapped().setInternalNetwork(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getNATNetwork()
    {
        try
        {
            String retVal = getTypedWrapped().getNATNetwork();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setNATNetwork(String value)
    {
        try
        {
            getTypedWrapped().setNATNetwork(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getGenericDriver()
    {
        try
        {
            String retVal = getTypedWrapped().getGenericDriver();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setGenericDriver(String value)
    {
        try
        {
            getTypedWrapped().setGenericDriver(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getCableConnected()
    {
        try
        {
            boolean retVal = getTypedWrapped().getCableConnected();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setCableConnected(Boolean value)
    {
        try
        {
            getTypedWrapped().setCableConnected(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getLineSpeed()
    {
        try
        {
            long retVal = getTypedWrapped().getLineSpeed();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setLineSpeed(Long value)
    {
        try
        {
            getTypedWrapped().setLineSpeed(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.NetworkAdapterPromiscModePolicy getPromiscModePolicy()
    {
        try
        {
            long retVal = getTypedWrapped().getPromiscModePolicy();
            return org.virtualbox_4_3.NetworkAdapterPromiscModePolicy.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setPromiscModePolicy(org.virtualbox_4_3.NetworkAdapterPromiscModePolicy value)
    {
        try
        {
            getTypedWrapped().setPromiscModePolicy(value.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getTraceEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getTraceEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setTraceEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setTraceEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getTraceFile()
    {
        try
        {
            String retVal = getTypedWrapped().getTraceFile();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setTraceFile(String value)
    {
        try
        {
            getTypedWrapped().setTraceFile(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.INATEngine getNATEngine()
    {
        try
        {
            org.mozilla.interfaces.INATEngine retVal = getTypedWrapped().getNATEngine();
            return (retVal != null) ? new org.virtualbox_4_3.INATEngine(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getBootPriority()
    {
        try
        {
            long retVal = getTypedWrapped().getBootPriority();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setBootPriority(Long value)
    {
        try
        {
            getTypedWrapped().setBootPriority(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IBandwidthGroup getBandwidthGroup()
    {
        try
        {
            org.mozilla.interfaces.IBandwidthGroup retVal = getTypedWrapped().getBandwidthGroup();
            return (retVal != null) ? new org.virtualbox_4_3.IBandwidthGroup(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setBandwidthGroup(org.virtualbox_4_3.IBandwidthGroup value)
    {
        try
        {
            getTypedWrapped().setBandwidthGroup((value != null) ? value.getTypedWrapped() : null);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static INetworkAdapter queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.INetworkAdapter qiobj = Helper.queryInterface(nsobj, "{efa0f965-63c7-4c60-afdf-b1cc9943b9c0}", org.mozilla.interfaces.INetworkAdapter.class);
        return qiobj == null ? null : new INetworkAdapter(qiobj);
    }
    public String getProperty(String key)
    {
        try
        {
            String retVal;
            retVal = getTypedWrapped().getProperty(key);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setProperty(String key, String value)
    {
        try
        {
            getTypedWrapped().setProperty(key, value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getProperties(String names, Holder<List<String>> returnNames)
    {
        try
        {
        String[][] tmp_returnNames = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
            String[] retVal;
            retVal = getTypedWrapped().getProperties(names, null, tmp_returnNames, null);
        returnNames.value = Helper.wrap(tmp_returnNames[0]);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "INetworkAdapter.java"


// ##### BEGINFILE "ISerialPort.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ISerialPort.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class ISerialPort extends IUnknown
{

    public ISerialPort(org.mozilla.interfaces.ISerialPort wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.ISerialPort getTypedWrapped()
    {
        return (org.mozilla.interfaces.ISerialPort) getWrapped();
    }
    public Long getSlot()
    {
        try
        {
            long retVal = getTypedWrapped().getSlot();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getIOBase()
    {
        try
        {
            long retVal = getTypedWrapped().getIOBase();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setIOBase(Long value)
    {
        try
        {
            getTypedWrapped().setIOBase(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getIRQ()
    {
        try
        {
            long retVal = getTypedWrapped().getIRQ();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setIRQ(Long value)
    {
        try
        {
            getTypedWrapped().setIRQ(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.PortMode getHostMode()
    {
        try
        {
            long retVal = getTypedWrapped().getHostMode();
            return org.virtualbox_4_3.PortMode.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setHostMode(org.virtualbox_4_3.PortMode value)
    {
        try
        {
            getTypedWrapped().setHostMode(value.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getServer()
    {
        try
        {
            boolean retVal = getTypedWrapped().getServer();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setServer(Boolean value)
    {
        try
        {
            getTypedWrapped().setServer(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getPath()
    {
        try
        {
            String retVal = getTypedWrapped().getPath();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setPath(String value)
    {
        try
        {
            getTypedWrapped().setPath(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static ISerialPort queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.ISerialPort qiobj = Helper.queryInterface(nsobj, "{937f6970-5103-4745-b78e-d28dcf1479a8}", org.mozilla.interfaces.ISerialPort.class);
        return qiobj == null ? null : new ISerialPort(qiobj);
    }
}

// ##### ENDFILE "ISerialPort.java"


// ##### BEGINFILE "IParallelPort.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IParallelPort.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IParallelPort extends IUnknown
{

    public IParallelPort(org.mozilla.interfaces.IParallelPort wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IParallelPort getTypedWrapped()
    {
        return (org.mozilla.interfaces.IParallelPort) getWrapped();
    }
    public Long getSlot()
    {
        try
        {
            long retVal = getTypedWrapped().getSlot();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getIOBase()
    {
        try
        {
            long retVal = getTypedWrapped().getIOBase();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setIOBase(Long value)
    {
        try
        {
            getTypedWrapped().setIOBase(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getIRQ()
    {
        try
        {
            long retVal = getTypedWrapped().getIRQ();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setIRQ(Long value)
    {
        try
        {
            getTypedWrapped().setIRQ(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getPath()
    {
        try
        {
            String retVal = getTypedWrapped().getPath();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setPath(String value)
    {
        try
        {
            getTypedWrapped().setPath(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IParallelPort queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IParallelPort qiobj = Helper.queryInterface(nsobj, "{0c925f06-dd10-4b77-8de8-294d738c3214}", org.mozilla.interfaces.IParallelPort.class);
        return qiobj == null ? null : new IParallelPort(qiobj);
    }
}

// ##### ENDFILE "IParallelPort.java"


// ##### BEGINFILE "IMachineDebugger.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IMachineDebugger.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IMachineDebugger extends IUnknown
{

    public IMachineDebugger(org.mozilla.interfaces.IMachineDebugger wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IMachineDebugger getTypedWrapped()
    {
        return (org.mozilla.interfaces.IMachineDebugger) getWrapped();
    }
    public Boolean getSingleStep()
    {
        try
        {
            boolean retVal = getTypedWrapped().getSingleStep();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setSingleStep(Boolean value)
    {
        try
        {
            getTypedWrapped().setSingleStep(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getRecompileUser()
    {
        try
        {
            boolean retVal = getTypedWrapped().getRecompileUser();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setRecompileUser(Boolean value)
    {
        try
        {
            getTypedWrapped().setRecompileUser(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getRecompileSupervisor()
    {
        try
        {
            boolean retVal = getTypedWrapped().getRecompileSupervisor();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setRecompileSupervisor(Boolean value)
    {
        try
        {
            getTypedWrapped().setRecompileSupervisor(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getExecuteAllInIEM()
    {
        try
        {
            boolean retVal = getTypedWrapped().getExecuteAllInIEM();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setExecuteAllInIEM(Boolean value)
    {
        try
        {
            getTypedWrapped().setExecuteAllInIEM(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getPATMEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getPATMEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setPATMEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setPATMEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getCSAMEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getCSAMEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setCSAMEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setCSAMEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getLogEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getLogEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setLogEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setLogEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getLogDbgFlags()
    {
        try
        {
            String retVal = getTypedWrapped().getLogDbgFlags();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getLogDbgGroups()
    {
        try
        {
            String retVal = getTypedWrapped().getLogDbgGroups();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getLogDbgDestinations()
    {
        try
        {
            String retVal = getTypedWrapped().getLogDbgDestinations();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getLogRelFlags()
    {
        try
        {
            String retVal = getTypedWrapped().getLogRelFlags();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getLogRelGroups()
    {
        try
        {
            String retVal = getTypedWrapped().getLogRelGroups();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getLogRelDestinations()
    {
        try
        {
            String retVal = getTypedWrapped().getLogRelDestinations();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getHWVirtExEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getHWVirtExEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getHWVirtExNestedPagingEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getHWVirtExNestedPagingEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getHWVirtExVPIDEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getHWVirtExVPIDEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getHWVirtExUXEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getHWVirtExUXEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getOSName()
    {
        try
        {
            String retVal = getTypedWrapped().getOSName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getOSVersion()
    {
        try
        {
            String retVal = getTypedWrapped().getOSVersion();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getPAEEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getPAEEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getVirtualTimeRate()
    {
        try
        {
            long retVal = getTypedWrapped().getVirtualTimeRate();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setVirtualTimeRate(Long value)
    {
        try
        {
            getTypedWrapped().setVirtualTimeRate(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getVM()
    {
        try
        {
            long retVal = getTypedWrapped().getVM();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IMachineDebugger queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IMachineDebugger qiobj = Helper.queryInterface(nsobj, "{5e4534dc-21b8-4f6b-8a08-eef50e1a0aa1}", org.mozilla.interfaces.IMachineDebugger.class);
        return qiobj == null ? null : new IMachineDebugger(qiobj);
    }
    public void dumpGuestCore(String filename, String compression)
    {
        try
        {
            getTypedWrapped().dumpGuestCore(filename, compression);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void dumpHostProcessCore(String filename, String compression)
    {
        try
        {
            getTypedWrapped().dumpHostProcessCore(filename, compression);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String info(String name, String args)
    {
        try
        {
            String retVal;
            retVal = getTypedWrapped().info(name, args);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void injectNMI()
    {
        try
        {
            getTypedWrapped().injectNMI();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void modifyLogGroups(String settings)
    {
        try
        {
            getTypedWrapped().modifyLogGroups(settings);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void modifyLogFlags(String settings)
    {
        try
        {
            getTypedWrapped().modifyLogFlags(settings);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void modifyLogDestinations(String settings)
    {
        try
        {
            getTypedWrapped().modifyLogDestinations(settings);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public byte[] readPhysicalMemory(Long address, Long size)
    {
        try
        {
            byte[] retVal;
            retVal = getTypedWrapped().readPhysicalMemory(address, size, null);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void writePhysicalMemory(Long address, Long size, byte[] bytes)
    {
        try
        {
            getTypedWrapped().writePhysicalMemory(address, size, bytes);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public byte[] readVirtualMemory(Long cpuId, Long address, Long size)
    {
        try
        {
            byte[] retVal;
            retVal = getTypedWrapped().readVirtualMemory(cpuId, address, size, null);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void writeVirtualMemory(Long cpuId, Long address, Long size, byte[] bytes)
    {
        try
        {
            getTypedWrapped().writeVirtualMemory(cpuId, address, size, bytes);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String detectOS()
    {
        try
        {
            String retVal;
            retVal = getTypedWrapped().detectOS();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getRegister(Long cpuId, String name)
    {
        try
        {
            String retVal;
            retVal = getTypedWrapped().getRegister(cpuId, name);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void getRegisters(Long cpuId, Holder<List<String>> names, Holder<List<String>> values)
    {
        try
        {
        String[][] tmp_names = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
        String[][] tmp_values = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
            getTypedWrapped().getRegisters(cpuId, null, tmp_names, null, tmp_values);
        names.value = Helper.wrap(tmp_names[0]);
        values.value = Helper.wrap(tmp_values[0]);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setRegister(Long cpuId, String name, String value)
    {
        try
        {
            getTypedWrapped().setRegister(cpuId, name, value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setRegisters(Long cpuId, List<String> names, List<String> values)
    {
        try
        {
            getTypedWrapped().setRegisters(cpuId, names != null ? names.size() : 0, Helper.unwrapStr(names), values != null ? values.size() : 0, Helper.unwrapStr(values));
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String dumpGuestStack(Long cpuId)
    {
        try
        {
            String retVal;
            retVal = getTypedWrapped().dumpGuestStack(cpuId);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void resetStats(String pattern)
    {
        try
        {
            getTypedWrapped().resetStats(pattern);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void dumpStats(String pattern)
    {
        try
        {
            getTypedWrapped().dumpStats(pattern);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getStats(String pattern, Boolean withDescriptions)
    {
        try
        {
            String retVal;
            retVal = getTypedWrapped().getStats(pattern, withDescriptions);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IMachineDebugger.java"


// ##### BEGINFILE "IUSBDeviceFilters.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IUSBDeviceFilters.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IUSBDeviceFilters extends IUnknown
{

    public IUSBDeviceFilters(org.mozilla.interfaces.IUSBDeviceFilters wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IUSBDeviceFilters getTypedWrapped()
    {
        return (org.mozilla.interfaces.IUSBDeviceFilters) getWrapped();
    }
    public List<org.virtualbox_4_3.IUSBDeviceFilter> getDeviceFilters()
    {
        try
        {
            org.mozilla.interfaces.IUSBDeviceFilter[] retVal = getTypedWrapped().getDeviceFilters(null);
            return Helper.wrap2(org.virtualbox_4_3.IUSBDeviceFilter.class, org.mozilla.interfaces.IUSBDeviceFilter.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IUSBDeviceFilters queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IUSBDeviceFilters qiobj = Helper.queryInterface(nsobj, "{2ab550b2-53cc-4c2e-ae07-0adf4114e75c}", org.mozilla.interfaces.IUSBDeviceFilters.class);
        return qiobj == null ? null : new IUSBDeviceFilters(qiobj);
    }
    public org.virtualbox_4_3.IUSBDeviceFilter createDeviceFilter(String name)
    {
        try
        {
            org.mozilla.interfaces.IUSBDeviceFilter retVal;
            retVal = getTypedWrapped().createDeviceFilter(name);
            return (retVal != null) ? new org.virtualbox_4_3.IUSBDeviceFilter(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void insertDeviceFilter(Long position, org.virtualbox_4_3.IUSBDeviceFilter filter)
    {
        try
        {
            getTypedWrapped().insertDeviceFilter(position, (filter != null) ? filter.getTypedWrapped() : null);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IUSBDeviceFilter removeDeviceFilter(Long position)
    {
        try
        {
            org.mozilla.interfaces.IUSBDeviceFilter retVal;
            retVal = getTypedWrapped().removeDeviceFilter(position);
            return (retVal != null) ? new org.virtualbox_4_3.IUSBDeviceFilter(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IUSBDeviceFilters.java"


// ##### BEGINFILE "IUSBController.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IUSBController.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IUSBController extends IUnknown
{

    public IUSBController(org.mozilla.interfaces.IUSBController wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IUSBController getTypedWrapped()
    {
        return (org.mozilla.interfaces.IUSBController) getWrapped();
    }
    public String getName()
    {
        try
        {
            String retVal = getTypedWrapped().getName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.USBControllerType getType()
    {
        try
        {
            long retVal = getTypedWrapped().getType();
            return org.virtualbox_4_3.USBControllerType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getUSBStandard()
    {
        try
        {
            int retVal = getTypedWrapped().getUSBStandard();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IUSBController queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IUSBController qiobj = Helper.queryInterface(nsobj, "{d2745291-65f7-4d75-9556-38047d802319}", org.mozilla.interfaces.IUSBController.class);
        return qiobj == null ? null : new IUSBController(qiobj);
    }
}

// ##### ENDFILE "IUSBController.java"


// ##### BEGINFILE "IUSBDevice.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IUSBDevice.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IUSBDevice extends IUnknown
{

    public IUSBDevice(org.mozilla.interfaces.IUSBDevice wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IUSBDevice getTypedWrapped()
    {
        return (org.mozilla.interfaces.IUSBDevice) getWrapped();
    }
    public String getId()
    {
        try
        {
            String retVal = getTypedWrapped().getId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getVendorId()
    {
        try
        {
            int retVal = getTypedWrapped().getVendorId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getProductId()
    {
        try
        {
            int retVal = getTypedWrapped().getProductId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getRevision()
    {
        try
        {
            int retVal = getTypedWrapped().getRevision();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getManufacturer()
    {
        try
        {
            String retVal = getTypedWrapped().getManufacturer();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getProduct()
    {
        try
        {
            String retVal = getTypedWrapped().getProduct();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getSerialNumber()
    {
        try
        {
            String retVal = getTypedWrapped().getSerialNumber();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getAddress()
    {
        try
        {
            String retVal = getTypedWrapped().getAddress();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getPort()
    {
        try
        {
            int retVal = getTypedWrapped().getPort();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getVersion()
    {
        try
        {
            int retVal = getTypedWrapped().getVersion();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getPortVersion()
    {
        try
        {
            int retVal = getTypedWrapped().getPortVersion();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getRemote()
    {
        try
        {
            boolean retVal = getTypedWrapped().getRemote();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IUSBDevice queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IUSBDevice qiobj = Helper.queryInterface(nsobj, "{f8967b0b-4483-400f-92b5-8b675d98a85b}", org.mozilla.interfaces.IUSBDevice.class);
        return qiobj == null ? null : new IUSBDevice(qiobj);
    }
}

// ##### ENDFILE "IUSBDevice.java"


// ##### BEGINFILE "IUSBDeviceFilter.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IUSBDeviceFilter.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IUSBDeviceFilter extends IUnknown
{

    public IUSBDeviceFilter(org.mozilla.interfaces.IUSBDeviceFilter wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IUSBDeviceFilter getTypedWrapped()
    {
        return (org.mozilla.interfaces.IUSBDeviceFilter) getWrapped();
    }
    public String getName()
    {
        try
        {
            String retVal = getTypedWrapped().getName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setName(String value)
    {
        try
        {
            getTypedWrapped().setName(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getActive()
    {
        try
        {
            boolean retVal = getTypedWrapped().getActive();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setActive(Boolean value)
    {
        try
        {
            getTypedWrapped().setActive(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getVendorId()
    {
        try
        {
            String retVal = getTypedWrapped().getVendorId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setVendorId(String value)
    {
        try
        {
            getTypedWrapped().setVendorId(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getProductId()
    {
        try
        {
            String retVal = getTypedWrapped().getProductId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setProductId(String value)
    {
        try
        {
            getTypedWrapped().setProductId(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getRevision()
    {
        try
        {
            String retVal = getTypedWrapped().getRevision();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setRevision(String value)
    {
        try
        {
            getTypedWrapped().setRevision(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getManufacturer()
    {
        try
        {
            String retVal = getTypedWrapped().getManufacturer();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setManufacturer(String value)
    {
        try
        {
            getTypedWrapped().setManufacturer(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getProduct()
    {
        try
        {
            String retVal = getTypedWrapped().getProduct();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setProduct(String value)
    {
        try
        {
            getTypedWrapped().setProduct(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getSerialNumber()
    {
        try
        {
            String retVal = getTypedWrapped().getSerialNumber();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setSerialNumber(String value)
    {
        try
        {
            getTypedWrapped().setSerialNumber(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getPort()
    {
        try
        {
            String retVal = getTypedWrapped().getPort();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setPort(String value)
    {
        try
        {
            getTypedWrapped().setPort(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getRemote()
    {
        try
        {
            String retVal = getTypedWrapped().getRemote();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setRemote(String value)
    {
        try
        {
            getTypedWrapped().setRemote(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getMaskedInterfaces()
    {
        try
        {
            long retVal = getTypedWrapped().getMaskedInterfaces();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setMaskedInterfaces(Long value)
    {
        try
        {
            getTypedWrapped().setMaskedInterfaces(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IUSBDeviceFilter queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IUSBDeviceFilter qiobj = Helper.queryInterface(nsobj, "{d6831fb4-1a94-4c2c-96ef-8d0d6192066d}", org.mozilla.interfaces.IUSBDeviceFilter.class);
        return qiobj == null ? null : new IUSBDeviceFilter(qiobj);
    }
}

// ##### ENDFILE "IUSBDeviceFilter.java"


// ##### BEGINFILE "IHostUSBDevice.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IHostUSBDevice.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IHostUSBDevice extends IUSBDevice
{

    public IHostUSBDevice(org.mozilla.interfaces.IHostUSBDevice wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IHostUSBDevice getTypedWrapped()
    {
        return (org.mozilla.interfaces.IHostUSBDevice) getWrapped();
    }
    public org.virtualbox_4_3.USBDeviceState getState()
    {
        try
        {
            long retVal = getTypedWrapped().getState();
            return org.virtualbox_4_3.USBDeviceState.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IHostUSBDevice queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IHostUSBDevice qiobj = Helper.queryInterface(nsobj, "{173b4b44-d268-4334-a00d-b6521c9a740a}", org.mozilla.interfaces.IHostUSBDevice.class);
        return qiobj == null ? null : new IHostUSBDevice(qiobj);
    }
}

// ##### ENDFILE "IHostUSBDevice.java"


// ##### BEGINFILE "IHostUSBDeviceFilter.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IHostUSBDeviceFilter.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IHostUSBDeviceFilter extends IUSBDeviceFilter
{

    public IHostUSBDeviceFilter(org.mozilla.interfaces.IHostUSBDeviceFilter wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IHostUSBDeviceFilter getTypedWrapped()
    {
        return (org.mozilla.interfaces.IHostUSBDeviceFilter) getWrapped();
    }
    public org.virtualbox_4_3.USBDeviceFilterAction getAction()
    {
        try
        {
            long retVal = getTypedWrapped().getAction();
            return org.virtualbox_4_3.USBDeviceFilterAction.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setAction(org.virtualbox_4_3.USBDeviceFilterAction value)
    {
        try
        {
            getTypedWrapped().setAction(value.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IHostUSBDeviceFilter queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IHostUSBDeviceFilter qiobj = Helper.queryInterface(nsobj, "{4cc70246-d74a-400f-8222-3900489c0374}", org.mozilla.interfaces.IHostUSBDeviceFilter.class);
        return qiobj == null ? null : new IHostUSBDeviceFilter(qiobj);
    }
}

// ##### ENDFILE "IHostUSBDeviceFilter.java"


// ##### BEGINFILE "IAudioAdapter.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IAudioAdapter.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IAudioAdapter extends IUnknown
{

    public IAudioAdapter(org.mozilla.interfaces.IAudioAdapter wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IAudioAdapter getTypedWrapped()
    {
        return (org.mozilla.interfaces.IAudioAdapter) getWrapped();
    }
    public Boolean getEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.AudioControllerType getAudioController()
    {
        try
        {
            long retVal = getTypedWrapped().getAudioController();
            return org.virtualbox_4_3.AudioControllerType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setAudioController(org.virtualbox_4_3.AudioControllerType value)
    {
        try
        {
            getTypedWrapped().setAudioController(value.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.AudioDriverType getAudioDriver()
    {
        try
        {
            long retVal = getTypedWrapped().getAudioDriver();
            return org.virtualbox_4_3.AudioDriverType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setAudioDriver(org.virtualbox_4_3.AudioDriverType value)
    {
        try
        {
            getTypedWrapped().setAudioDriver(value.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IAudioAdapter queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IAudioAdapter qiobj = Helper.queryInterface(nsobj, "{921873db-5f3f-4b69-91f9-7be9e535a2cb}", org.mozilla.interfaces.IAudioAdapter.class);
        return qiobj == null ? null : new IAudioAdapter(qiobj);
    }
}

// ##### ENDFILE "IAudioAdapter.java"


// ##### BEGINFILE "IVRDEServer.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IVRDEServer.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IVRDEServer extends IUnknown
{

    public IVRDEServer(org.mozilla.interfaces.IVRDEServer wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IVRDEServer getTypedWrapped()
    {
        return (org.mozilla.interfaces.IVRDEServer) getWrapped();
    }
    public Boolean getEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setEnabled(Boolean value)
    {
        try
        {
            getTypedWrapped().setEnabled(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.AuthType getAuthType()
    {
        try
        {
            long retVal = getTypedWrapped().getAuthType();
            return org.virtualbox_4_3.AuthType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setAuthType(org.virtualbox_4_3.AuthType value)
    {
        try
        {
            getTypedWrapped().setAuthType(value.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getAuthTimeout()
    {
        try
        {
            long retVal = getTypedWrapped().getAuthTimeout();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setAuthTimeout(Long value)
    {
        try
        {
            getTypedWrapped().setAuthTimeout(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getAllowMultiConnection()
    {
        try
        {
            boolean retVal = getTypedWrapped().getAllowMultiConnection();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setAllowMultiConnection(Boolean value)
    {
        try
        {
            getTypedWrapped().setAllowMultiConnection(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getReuseSingleConnection()
    {
        try
        {
            boolean retVal = getTypedWrapped().getReuseSingleConnection();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setReuseSingleConnection(Boolean value)
    {
        try
        {
            getTypedWrapped().setReuseSingleConnection(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getVRDEExtPack()
    {
        try
        {
            String retVal = getTypedWrapped().getVRDEExtPack();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setVRDEExtPack(String value)
    {
        try
        {
            getTypedWrapped().setVRDEExtPack(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getAuthLibrary()
    {
        try
        {
            String retVal = getTypedWrapped().getAuthLibrary();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setAuthLibrary(String value)
    {
        try
        {
            getTypedWrapped().setAuthLibrary(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getVRDEProperties()
    {
        try
        {
            String[] retVal = getTypedWrapped().getVRDEProperties(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IVRDEServer queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IVRDEServer qiobj = Helper.queryInterface(nsobj, "{d38de40a-c2c1-4e95-b5a4-167b05f5694c}", org.mozilla.interfaces.IVRDEServer.class);
        return qiobj == null ? null : new IVRDEServer(qiobj);
    }
    public void setVRDEProperty(String key, String value)
    {
        try
        {
            getTypedWrapped().setVRDEProperty(key, value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getVRDEProperty(String key)
    {
        try
        {
            String retVal;
            retVal = getTypedWrapped().getVRDEProperty(key);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IVRDEServer.java"


// ##### BEGINFILE "ISharedFolder.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ISharedFolder.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class ISharedFolder extends IUnknown
{

    public ISharedFolder(org.mozilla.interfaces.ISharedFolder wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.ISharedFolder getTypedWrapped()
    {
        return (org.mozilla.interfaces.ISharedFolder) getWrapped();
    }
    public String getName()
    {
        try
        {
            String retVal = getTypedWrapped().getName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getHostPath()
    {
        try
        {
            String retVal = getTypedWrapped().getHostPath();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getAccessible()
    {
        try
        {
            boolean retVal = getTypedWrapped().getAccessible();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getWritable()
    {
        try
        {
            boolean retVal = getTypedWrapped().getWritable();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getAutoMount()
    {
        try
        {
            boolean retVal = getTypedWrapped().getAutoMount();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getLastAccessError()
    {
        try
        {
            String retVal = getTypedWrapped().getLastAccessError();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static ISharedFolder queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.ISharedFolder qiobj = Helper.queryInterface(nsobj, "{8388da11-b559-4574-a5b7-2bd7acd5cef8}", org.mozilla.interfaces.ISharedFolder.class);
        return qiobj == null ? null : new ISharedFolder(qiobj);
    }
}

// ##### ENDFILE "ISharedFolder.java"


// ##### BEGINFILE "IInternalSessionControl.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IInternalSessionControl.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IInternalSessionControl extends IUnknown
{

    public IInternalSessionControl(org.mozilla.interfaces.IInternalSessionControl wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IInternalSessionControl getTypedWrapped()
    {
        return (org.mozilla.interfaces.IInternalSessionControl) getWrapped();
    }
    public static IInternalSessionControl queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IInternalSessionControl qiobj = Helper.queryInterface(nsobj, "{2d2124a7-0f62-4907-ae21-eee5a559bdde}", org.mozilla.interfaces.IInternalSessionControl.class);
        return qiobj == null ? null : new IInternalSessionControl(qiobj);
    }
    public Long getPID()
    {
        try
        {
            long retVal;
            retVal = getTypedWrapped().getPID();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IConsole getRemoteConsole()
    {
        try
        {
            org.mozilla.interfaces.IConsole retVal;
            retVal = getTypedWrapped().getRemoteConsole();
            return (retVal != null) ? new org.virtualbox_4_3.IConsole(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void assignRemoteMachine(org.virtualbox_4_3.IMachine machine, org.virtualbox_4_3.IConsole console)
    {
        try
        {
            getTypedWrapped().assignRemoteMachine((machine != null) ? machine.getTypedWrapped() : null, (console != null) ? console.getTypedWrapped() : null);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void updateMachineState(org.virtualbox_4_3.MachineState machineState)
    {
        try
        {
            getTypedWrapped().updateMachineState(machineState.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void uninitialize()
    {
        try
        {
            getTypedWrapped().uninitialize();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void onNetworkAdapterChange(org.virtualbox_4_3.INetworkAdapter networkAdapter, Boolean changeAdapter)
    {
        try
        {
            getTypedWrapped().onNetworkAdapterChange((networkAdapter != null) ? networkAdapter.getTypedWrapped() : null, changeAdapter);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void onSerialPortChange(org.virtualbox_4_3.ISerialPort serialPort)
    {
        try
        {
            getTypedWrapped().onSerialPortChange((serialPort != null) ? serialPort.getTypedWrapped() : null);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void onParallelPortChange(org.virtualbox_4_3.IParallelPort parallelPort)
    {
        try
        {
            getTypedWrapped().onParallelPortChange((parallelPort != null) ? parallelPort.getTypedWrapped() : null);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void onStorageControllerChange()
    {
        try
        {
            getTypedWrapped().onStorageControllerChange();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void onMediumChange(org.virtualbox_4_3.IMediumAttachment mediumAttachment, Boolean force)
    {
        try
        {
            getTypedWrapped().onMediumChange((mediumAttachment != null) ? mediumAttachment.getTypedWrapped() : null, force);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void onStorageDeviceChange(org.virtualbox_4_3.IMediumAttachment mediumAttachment, Boolean remove, Boolean silent)
    {
        try
        {
            getTypedWrapped().onStorageDeviceChange((mediumAttachment != null) ? mediumAttachment.getTypedWrapped() : null, remove, silent);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void onClipboardModeChange(org.virtualbox_4_3.ClipboardMode clipboardMode)
    {
        try
        {
            getTypedWrapped().onClipboardModeChange(clipboardMode.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void onDragAndDropModeChange(org.virtualbox_4_3.DragAndDropMode dragAndDropMode)
    {
        try
        {
            getTypedWrapped().onDragAndDropModeChange(dragAndDropMode.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void onCPUChange(Long cpu, Boolean add)
    {
        try
        {
            getTypedWrapped().onCPUChange(cpu, add);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void onCPUExecutionCapChange(Long executionCap)
    {
        try
        {
            getTypedWrapped().onCPUExecutionCapChange(executionCap);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void onVRDEServerChange(Boolean restart)
    {
        try
        {
            getTypedWrapped().onVRDEServerChange(restart);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void onVideoCaptureChange()
    {
        try
        {
            getTypedWrapped().onVideoCaptureChange();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void onUSBControllerChange()
    {
        try
        {
            getTypedWrapped().onUSBControllerChange();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void onSharedFolderChange(Boolean global)
    {
        try
        {
            getTypedWrapped().onSharedFolderChange(global);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void onUSBDeviceAttach(org.virtualbox_4_3.IUSBDevice device, org.virtualbox_4_3.IVirtualBoxErrorInfo error, Long maskedInterfaces)
    {
        try
        {
            getTypedWrapped().onUSBDeviceAttach((device != null) ? device.getTypedWrapped() : null, (error != null) ? error.getTypedWrapped() : null, maskedInterfaces);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void onUSBDeviceDetach(String id, org.virtualbox_4_3.IVirtualBoxErrorInfo error)
    {
        try
        {
            getTypedWrapped().onUSBDeviceDetach(id, (error != null) ? error.getTypedWrapped() : null);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void onShowWindow(Boolean check, Holder<Boolean> canShow, Holder<Long> winId)
    {
        try
        {
        boolean[] tmp_canShow = (boolean[])java.lang.reflect.Array.newInstance(boolean.class, 1);
        long[] tmp_winId = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
            getTypedWrapped().onShowWindow(check, tmp_canShow, tmp_winId);
        canShow.value = tmp_canShow[0];
        winId.value = tmp_winId[0];
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void onBandwidthGroupChange(org.virtualbox_4_3.IBandwidthGroup bandwidthGroup)
    {
        try
        {
            getTypedWrapped().onBandwidthGroupChange((bandwidthGroup != null) ? bandwidthGroup.getTypedWrapped() : null);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void accessGuestProperty(String name, String value, String flags, Boolean isSetter, Holder<String> retValue, Holder<Long> retTimestamp, Holder<String> retFlags)
    {
        try
        {
        String[] tmp_retValue = (String[])java.lang.reflect.Array.newInstance(String.class, 1);
        long[] tmp_retTimestamp = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        String[] tmp_retFlags = (String[])java.lang.reflect.Array.newInstance(String.class, 1);
            getTypedWrapped().accessGuestProperty(name, value, flags, isSetter, tmp_retValue, tmp_retTimestamp, tmp_retFlags);
        retValue.value = tmp_retValue[0];
        retTimestamp.value = tmp_retTimestamp[0];
        retFlags.value = tmp_retFlags[0];
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void enumerateGuestProperties(String patterns, Holder<List<String>> keys, Holder<List<String>> values, Holder<List<Long>> timestamps, Holder<List<String>> flags)
    {
        try
        {
        String[][] tmp_keys = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
        String[][] tmp_values = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
        long[][] tmp_timestamps = (long[][])java.lang.reflect.Array.newInstance(long[].class, 1);
        String[][] tmp_flags = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
            getTypedWrapped().enumerateGuestProperties(patterns, null, tmp_keys, null, tmp_values, null, tmp_timestamps, null, tmp_flags);
        keys.value = Helper.wrap(tmp_keys[0]);
        values.value = Helper.wrap(tmp_values[0]);
        timestamps.value = Helper.wrap(tmp_timestamps[0]);
        flags.value = Helper.wrap(tmp_flags[0]);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void onlineMergeMedium(org.virtualbox_4_3.IMediumAttachment mediumAttachment, Long sourceIdx, Long targetIdx, org.virtualbox_4_3.IProgress progress)
    {
        try
        {
            getTypedWrapped().onlineMergeMedium((mediumAttachment != null) ? mediumAttachment.getTypedWrapped() : null, sourceIdx, targetIdx, (progress != null) ? progress.getTypedWrapped() : null);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void enableVMMStatistics(Boolean enable)
    {
        try
        {
            getTypedWrapped().enableVMMStatistics(enable);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void pauseWithReason(org.virtualbox_4_3.Reason reason)
    {
        try
        {
            getTypedWrapped().pauseWithReason(reason.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void resumeWithReason(org.virtualbox_4_3.Reason reason)
    {
        try
        {
            getTypedWrapped().resumeWithReason(reason.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress saveStateWithReason(org.virtualbox_4_3.Reason reason)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().saveStateWithReason(reason.value());
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IInternalSessionControl.java"


// ##### BEGINFILE "ISession.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ISession.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class ISession extends IUnknown
{

    public ISession(org.mozilla.interfaces.ISession wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.ISession getTypedWrapped()
    {
        return (org.mozilla.interfaces.ISession) getWrapped();
    }
    public org.virtualbox_4_3.SessionState getState()
    {
        try
        {
            long retVal = getTypedWrapped().getState();
            return org.virtualbox_4_3.SessionState.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.SessionType getType()
    {
        try
        {
            long retVal = getTypedWrapped().getType();
            return org.virtualbox_4_3.SessionType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IMachine getMachine()
    {
        try
        {
            org.mozilla.interfaces.IMachine retVal = getTypedWrapped().getMachine();
            return (retVal != null) ? new org.virtualbox_4_3.IMachine(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IConsole getConsole()
    {
        try
        {
            org.mozilla.interfaces.IConsole retVal = getTypedWrapped().getConsole();
            return (retVal != null) ? new org.virtualbox_4_3.IConsole(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static ISession queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.ISession qiobj = Helper.queryInterface(nsobj, "{12F4DCDB-12B2-4EC1-B7CD-DDD9F6C5BF4D}", org.mozilla.interfaces.ISession.class);
        return qiobj == null ? null : new ISession(qiobj);
    }
    public void unlockMachine()
    {
        try
        {
            getTypedWrapped().unlockMachine();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "ISession.java"


// ##### BEGINFILE "IStorageController.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IStorageController.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IStorageController extends IUnknown
{

    public IStorageController(org.mozilla.interfaces.IStorageController wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IStorageController getTypedWrapped()
    {
        return (org.mozilla.interfaces.IStorageController) getWrapped();
    }
    public String getName()
    {
        try
        {
            String retVal = getTypedWrapped().getName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getMaxDevicesPerPortCount()
    {
        try
        {
            long retVal = getTypedWrapped().getMaxDevicesPerPortCount();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getMinPortCount()
    {
        try
        {
            long retVal = getTypedWrapped().getMinPortCount();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getMaxPortCount()
    {
        try
        {
            long retVal = getTypedWrapped().getMaxPortCount();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getInstance()
    {
        try
        {
            long retVal = getTypedWrapped().getInstance();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setInstance(Long value)
    {
        try
        {
            getTypedWrapped().setInstance(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getPortCount()
    {
        try
        {
            long retVal = getTypedWrapped().getPortCount();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setPortCount(Long value)
    {
        try
        {
            getTypedWrapped().setPortCount(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.StorageBus getBus()
    {
        try
        {
            long retVal = getTypedWrapped().getBus();
            return org.virtualbox_4_3.StorageBus.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.StorageControllerType getControllerType()
    {
        try
        {
            long retVal = getTypedWrapped().getControllerType();
            return org.virtualbox_4_3.StorageControllerType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setControllerType(org.virtualbox_4_3.StorageControllerType value)
    {
        try
        {
            getTypedWrapped().setControllerType(value.value());
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getUseHostIOCache()
    {
        try
        {
            boolean retVal = getTypedWrapped().getUseHostIOCache();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setUseHostIOCache(Boolean value)
    {
        try
        {
            getTypedWrapped().setUseHostIOCache(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getBootable()
    {
        try
        {
            boolean retVal = getTypedWrapped().getBootable();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IStorageController queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IStorageController qiobj = Helper.queryInterface(nsobj, "{a1556333-09b6-46d9-bfb7-fc239b7fbe1e}", org.mozilla.interfaces.IStorageController.class);
        return qiobj == null ? null : new IStorageController(qiobj);
    }
}

// ##### ENDFILE "IStorageController.java"


// ##### BEGINFILE "IPerformanceMetric.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IPerformanceMetric.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IPerformanceMetric extends IUnknown
{

    public IPerformanceMetric(org.mozilla.interfaces.IPerformanceMetric wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IPerformanceMetric getTypedWrapped()
    {
        return (org.mozilla.interfaces.IPerformanceMetric) getWrapped();
    }
    public String getMetricName()
    {
        try
        {
            String retVal = getTypedWrapped().getMetricName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public IUnknown getObject()
    {
        try
        {
            nsISupports retVal = getTypedWrapped().getObject();
            return (retVal != null) ? new IUnknown(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getDescription()
    {
        try
        {
            String retVal = getTypedWrapped().getDescription();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getPeriod()
    {
        try
        {
            long retVal = getTypedWrapped().getPeriod();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getCount()
    {
        try
        {
            long retVal = getTypedWrapped().getCount();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getUnit()
    {
        try
        {
            String retVal = getTypedWrapped().getUnit();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getMinimumValue()
    {
        try
        {
            int retVal = getTypedWrapped().getMinimumValue();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getMaximumValue()
    {
        try
        {
            int retVal = getTypedWrapped().getMaximumValue();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IPerformanceMetric queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IPerformanceMetric qiobj = Helper.queryInterface(nsobj, "{2a1a60ae-9345-4019-ad53-d34ba41cbfe9}", org.mozilla.interfaces.IPerformanceMetric.class);
        return qiobj == null ? null : new IPerformanceMetric(qiobj);
    }
}

// ##### ENDFILE "IPerformanceMetric.java"


// ##### BEGINFILE "IPerformanceCollector.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IPerformanceCollector.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IPerformanceCollector extends IUnknown
{

    public IPerformanceCollector(org.mozilla.interfaces.IPerformanceCollector wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IPerformanceCollector getTypedWrapped()
    {
        return (org.mozilla.interfaces.IPerformanceCollector) getWrapped();
    }
    public List<String> getMetricNames()
    {
        try
        {
            String[] retVal = getTypedWrapped().getMetricNames(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IPerformanceCollector queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IPerformanceCollector qiobj = Helper.queryInterface(nsobj, "{e22e1acb-ac4a-43bb-a31c-17321659b0c6}", org.mozilla.interfaces.IPerformanceCollector.class);
        return qiobj == null ? null : new IPerformanceCollector(qiobj);
    }
    public List<org.virtualbox_4_3.IPerformanceMetric> getMetrics(List<String> metricNames, List<IUnknown> objects)
    {
        try
        {
            org.mozilla.interfaces.IPerformanceMetric[] retVal;
            retVal = getTypedWrapped().getMetrics(metricNames != null ? metricNames.size() : 0, Helper.unwrapStr(metricNames), objects != null ? objects.size() : 0, Helper.unwrap2(IUnknown.class, nsISupports.class, objects), null);
            return Helper.wrap2(org.virtualbox_4_3.IPerformanceMetric.class, org.mozilla.interfaces.IPerformanceMetric.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IPerformanceMetric> setupMetrics(List<String> metricNames, List<IUnknown> objects, Long period, Long count)
    {
        try
        {
            org.mozilla.interfaces.IPerformanceMetric[] retVal;
            retVal = getTypedWrapped().setupMetrics(metricNames != null ? metricNames.size() : 0, Helper.unwrapStr(metricNames), objects != null ? objects.size() : 0, Helper.unwrap2(IUnknown.class, nsISupports.class, objects), period, count, null);
            return Helper.wrap2(org.virtualbox_4_3.IPerformanceMetric.class, org.mozilla.interfaces.IPerformanceMetric.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IPerformanceMetric> enableMetrics(List<String> metricNames, List<IUnknown> objects)
    {
        try
        {
            org.mozilla.interfaces.IPerformanceMetric[] retVal;
            retVal = getTypedWrapped().enableMetrics(metricNames != null ? metricNames.size() : 0, Helper.unwrapStr(metricNames), objects != null ? objects.size() : 0, Helper.unwrap2(IUnknown.class, nsISupports.class, objects), null);
            return Helper.wrap2(org.virtualbox_4_3.IPerformanceMetric.class, org.mozilla.interfaces.IPerformanceMetric.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IPerformanceMetric> disableMetrics(List<String> metricNames, List<IUnknown> objects)
    {
        try
        {
            org.mozilla.interfaces.IPerformanceMetric[] retVal;
            retVal = getTypedWrapped().disableMetrics(metricNames != null ? metricNames.size() : 0, Helper.unwrapStr(metricNames), objects != null ? objects.size() : 0, Helper.unwrap2(IUnknown.class, nsISupports.class, objects), null);
            return Helper.wrap2(org.virtualbox_4_3.IPerformanceMetric.class, org.mozilla.interfaces.IPerformanceMetric.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<Integer> queryMetricsData(List<String> metricNames, List<IUnknown> objects, Holder<List<String>> returnMetricNames, Holder<List<IUnknown>> returnObjects, Holder<List<String>> returnUnits, Holder<List<Long>> returnScales, Holder<List<Long>> returnSequenceNumbers, Holder<List<Long>> returnDataIndices, Holder<List<Long>> returnDataLengths)
    {
        try
        {
        String[][] tmp_returnMetricNames = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
        nsISupports[][] tmp_returnObjects = (nsISupports[][])java.lang.reflect.Array.newInstance(nsISupports[].class, 1);
        String[][] tmp_returnUnits = (String[][])java.lang.reflect.Array.newInstance(String[].class, 1);
        long[][] tmp_returnScales = (long[][])java.lang.reflect.Array.newInstance(long[].class, 1);
        long[][] tmp_returnSequenceNumbers = (long[][])java.lang.reflect.Array.newInstance(long[].class, 1);
        long[][] tmp_returnDataIndices = (long[][])java.lang.reflect.Array.newInstance(long[].class, 1);
        long[][] tmp_returnDataLengths = (long[][])java.lang.reflect.Array.newInstance(long[].class, 1);
            int[] retVal;
            retVal = getTypedWrapped().queryMetricsData(metricNames != null ? metricNames.size() : 0, Helper.unwrapStr(metricNames), objects != null ? objects.size() : 0, Helper.unwrap2(IUnknown.class, nsISupports.class, objects), null, tmp_returnMetricNames, null, tmp_returnObjects, null, tmp_returnUnits, null, tmp_returnScales, null, tmp_returnSequenceNumbers, null, tmp_returnDataIndices, null, tmp_returnDataLengths, null);
        returnMetricNames.value = Helper.wrap(tmp_returnMetricNames[0]);
        returnObjects.value = Helper.wrap2(IUnknown.class, nsISupports.class, tmp_returnObjects[0]);
        returnUnits.value = Helper.wrap(tmp_returnUnits[0]);
        returnScales.value = Helper.wrap(tmp_returnScales[0]);
        returnSequenceNumbers.value = Helper.wrap(tmp_returnSequenceNumbers[0]);
        returnDataIndices.value = Helper.wrap(tmp_returnDataIndices[0]);
        returnDataLengths.value = Helper.wrap(tmp_returnDataLengths[0]);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IPerformanceCollector.java"


// ##### BEGINFILE "INATEngine.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * INATEngine.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class INATEngine extends IUnknown
{

    public INATEngine(org.mozilla.interfaces.INATEngine wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.INATEngine getTypedWrapped()
    {
        return (org.mozilla.interfaces.INATEngine) getWrapped();
    }
    public String getNetwork()
    {
        try
        {
            String retVal = getTypedWrapped().getNetwork();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setNetwork(String value)
    {
        try
        {
            getTypedWrapped().setNetwork(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getHostIP()
    {
        try
        {
            String retVal = getTypedWrapped().getHostIP();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setHostIP(String value)
    {
        try
        {
            getTypedWrapped().setHostIP(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getTFTPPrefix()
    {
        try
        {
            String retVal = getTypedWrapped().getTFTPPrefix();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setTFTPPrefix(String value)
    {
        try
        {
            getTypedWrapped().setTFTPPrefix(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getTFTPBootFile()
    {
        try
        {
            String retVal = getTypedWrapped().getTFTPBootFile();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setTFTPBootFile(String value)
    {
        try
        {
            getTypedWrapped().setTFTPBootFile(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getTFTPNextServer()
    {
        try
        {
            String retVal = getTypedWrapped().getTFTPNextServer();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setTFTPNextServer(String value)
    {
        try
        {
            getTypedWrapped().setTFTPNextServer(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getAliasMode()
    {
        try
        {
            long retVal = getTypedWrapped().getAliasMode();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setAliasMode(Long value)
    {
        try
        {
            getTypedWrapped().setAliasMode(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getDNSPassDomain()
    {
        try
        {
            boolean retVal = getTypedWrapped().getDNSPassDomain();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setDNSPassDomain(Boolean value)
    {
        try
        {
            getTypedWrapped().setDNSPassDomain(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getDNSProxy()
    {
        try
        {
            boolean retVal = getTypedWrapped().getDNSProxy();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setDNSProxy(Boolean value)
    {
        try
        {
            getTypedWrapped().setDNSProxy(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getDNSUseHostResolver()
    {
        try
        {
            boolean retVal = getTypedWrapped().getDNSUseHostResolver();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setDNSUseHostResolver(Boolean value)
    {
        try
        {
            getTypedWrapped().setDNSUseHostResolver(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getRedirects()
    {
        try
        {
            String[] retVal = getTypedWrapped().getRedirects(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static INATEngine queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.INATEngine qiobj = Helper.queryInterface(nsobj, "{26451b99-3b2d-4dcb-8e4b-d63654218175}", org.mozilla.interfaces.INATEngine.class);
        return qiobj == null ? null : new INATEngine(qiobj);
    }
    public void setNetworkSettings(Long mtu, Long sockSnd, Long sockRcv, Long TcpWndSnd, Long TcpWndRcv)
    {
        try
        {
            getTypedWrapped().setNetworkSettings(mtu, sockSnd, sockRcv, TcpWndSnd, TcpWndRcv);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void getNetworkSettings(Holder<Long> mtu, Holder<Long> sockSnd, Holder<Long> sockRcv, Holder<Long> TcpWndSnd, Holder<Long> TcpWndRcv)
    {
        try
        {
        long[] tmp_mtu = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_sockSnd = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_sockRcv = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_TcpWndSnd = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
        long[] tmp_TcpWndRcv = (long[])java.lang.reflect.Array.newInstance(long.class, 1);
            getTypedWrapped().getNetworkSettings(tmp_mtu, tmp_sockSnd, tmp_sockRcv, tmp_TcpWndSnd, tmp_TcpWndRcv);
        mtu.value = tmp_mtu[0];
        sockSnd.value = tmp_sockSnd[0];
        sockRcv.value = tmp_sockRcv[0];
        TcpWndSnd.value = tmp_TcpWndSnd[0];
        TcpWndRcv.value = tmp_TcpWndRcv[0];
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void addRedirect(String name, org.virtualbox_4_3.NATProtocol proto, String hostIP, Integer hostPort, String guestIP, Integer guestPort)
    {
        try
        {
            getTypedWrapped().addRedirect(name, proto.value(), hostIP, hostPort, guestIP, guestPort);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void removeRedirect(String name)
    {
        try
        {
            getTypedWrapped().removeRedirect(name);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "INATEngine.java"


// ##### BEGINFILE "IExtPackPlugIn.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IExtPackPlugIn.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IExtPackPlugIn extends IUnknown
{

    public IExtPackPlugIn(org.mozilla.interfaces.IExtPackPlugIn wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IExtPackPlugIn getTypedWrapped()
    {
        return (org.mozilla.interfaces.IExtPackPlugIn) getWrapped();
    }
    public String getName()
    {
        try
        {
            String retVal = getTypedWrapped().getName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getDescription()
    {
        try
        {
            String retVal = getTypedWrapped().getDescription();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getFrontend()
    {
        try
        {
            String retVal = getTypedWrapped().getFrontend();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getModulePath()
    {
        try
        {
            String retVal = getTypedWrapped().getModulePath();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IExtPackPlugIn queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IExtPackPlugIn qiobj = Helper.queryInterface(nsobj, "{58000040-e718-4746-bbce-4b86d96da461}", org.mozilla.interfaces.IExtPackPlugIn.class);
        return qiobj == null ? null : new IExtPackPlugIn(qiobj);
    }
}

// ##### ENDFILE "IExtPackPlugIn.java"


// ##### BEGINFILE "IExtPackBase.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IExtPackBase.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IExtPackBase extends IUnknown
{

    public IExtPackBase(org.mozilla.interfaces.IExtPackBase wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IExtPackBase getTypedWrapped()
    {
        return (org.mozilla.interfaces.IExtPackBase) getWrapped();
    }
    public String getName()
    {
        try
        {
            String retVal = getTypedWrapped().getName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getDescription()
    {
        try
        {
            String retVal = getTypedWrapped().getDescription();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getVersion()
    {
        try
        {
            String retVal = getTypedWrapped().getVersion();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getRevision()
    {
        try
        {
            long retVal = getTypedWrapped().getRevision();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getEdition()
    {
        try
        {
            String retVal = getTypedWrapped().getEdition();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getVRDEModule()
    {
        try
        {
            String retVal = getTypedWrapped().getVRDEModule();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IExtPackPlugIn> getPlugIns()
    {
        try
        {
            org.mozilla.interfaces.IExtPackPlugIn[] retVal = getTypedWrapped().getPlugIns(null);
            return Helper.wrap2(org.virtualbox_4_3.IExtPackPlugIn.class, org.mozilla.interfaces.IExtPackPlugIn.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getUsable()
    {
        try
        {
            boolean retVal = getTypedWrapped().getUsable();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getWhyUnusable()
    {
        try
        {
            String retVal = getTypedWrapped().getWhyUnusable();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getShowLicense()
    {
        try
        {
            boolean retVal = getTypedWrapped().getShowLicense();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getLicense()
    {
        try
        {
            String retVal = getTypedWrapped().getLicense();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IExtPackBase queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IExtPackBase qiobj = Helper.queryInterface(nsobj, "{f79b75d8-2890-4f34-ffff-ffffa144e82c}", org.mozilla.interfaces.IExtPackBase.class);
        return qiobj == null ? null : new IExtPackBase(qiobj);
    }
    public String queryLicense(String preferredLocale, String preferredLanguage, String format)
    {
        try
        {
            String retVal;
            retVal = getTypedWrapped().queryLicense(preferredLocale, preferredLanguage, format);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IExtPackBase.java"


// ##### BEGINFILE "IExtPack.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IExtPack.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IExtPack extends IExtPackBase
{

    public IExtPack(org.mozilla.interfaces.IExtPack wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IExtPack getTypedWrapped()
    {
        return (org.mozilla.interfaces.IExtPack) getWrapped();
    }
    public static IExtPack queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IExtPack qiobj = Helper.queryInterface(nsobj, "{431685da-3618-4ebc-b038-833ba829b4b2}", org.mozilla.interfaces.IExtPack.class);
        return qiobj == null ? null : new IExtPack(qiobj);
    }
    public IUnknown queryObject(String objUuid)
    {
        try
        {
            nsISupports retVal;
            retVal = getTypedWrapped().queryObject(objUuid);
            return (retVal != null) ? new IUnknown(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IExtPack.java"


// ##### BEGINFILE "IExtPackFile.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IExtPackFile.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IExtPackFile extends IExtPackBase
{

    public IExtPackFile(org.mozilla.interfaces.IExtPackFile wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IExtPackFile getTypedWrapped()
    {
        return (org.mozilla.interfaces.IExtPackFile) getWrapped();
    }
    public String getFilePath()
    {
        try
        {
            String retVal = getTypedWrapped().getFilePath();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IExtPackFile queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IExtPackFile qiobj = Helper.queryInterface(nsobj, "{b6b49f55-efcc-4f08-b486-56e8d8afb10b}", org.mozilla.interfaces.IExtPackFile.class);
        return qiobj == null ? null : new IExtPackFile(qiobj);
    }
    public org.virtualbox_4_3.IProgress install(Boolean replace, String displayInfo)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().install(replace, displayInfo);
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IExtPackFile.java"


// ##### BEGINFILE "IExtPackManager.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IExtPackManager.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IExtPackManager extends IUnknown
{

    public IExtPackManager(org.mozilla.interfaces.IExtPackManager wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IExtPackManager getTypedWrapped()
    {
        return (org.mozilla.interfaces.IExtPackManager) getWrapped();
    }
    public List<org.virtualbox_4_3.IExtPack> getInstalledExtPacks()
    {
        try
        {
            org.mozilla.interfaces.IExtPack[] retVal = getTypedWrapped().getInstalledExtPacks(null);
            return Helper.wrap2(org.virtualbox_4_3.IExtPack.class, org.mozilla.interfaces.IExtPack.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IExtPackManager queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IExtPackManager qiobj = Helper.queryInterface(nsobj, "{3295e6ce-b051-47b2-9514-2c588bfe7554}", org.mozilla.interfaces.IExtPackManager.class);
        return qiobj == null ? null : new IExtPackManager(qiobj);
    }
    public org.virtualbox_4_3.IExtPack find(String name)
    {
        try
        {
            org.mozilla.interfaces.IExtPack retVal;
            retVal = getTypedWrapped().find(name);
            return (retVal != null) ? new org.virtualbox_4_3.IExtPack(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IExtPackFile openExtPackFile(String path)
    {
        try
        {
            org.mozilla.interfaces.IExtPackFile retVal;
            retVal = getTypedWrapped().openExtPackFile(path);
            return (retVal != null) ? new org.virtualbox_4_3.IExtPackFile(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IProgress uninstall(String name, Boolean forcedRemoval, String displayInfo)
    {
        try
        {
            org.mozilla.interfaces.IProgress retVal;
            retVal = getTypedWrapped().uninstall(name, forcedRemoval, displayInfo);
            return (retVal != null) ? new org.virtualbox_4_3.IProgress(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void cleanup()
    {
        try
        {
            getTypedWrapped().cleanup();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> queryAllPlugInsForFrontend(String frontendName)
    {
        try
        {
            String[] retVal;
            retVal = getTypedWrapped().queryAllPlugInsForFrontend(frontendName, null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean isExtPackUsable(String name)
    {
        try
        {
            boolean retVal;
            retVal = getTypedWrapped().isExtPackUsable(name);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IExtPackManager.java"


// ##### BEGINFILE "IBandwidthGroup.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IBandwidthGroup.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IBandwidthGroup extends IUnknown
{

    public IBandwidthGroup(org.mozilla.interfaces.IBandwidthGroup wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IBandwidthGroup getTypedWrapped()
    {
        return (org.mozilla.interfaces.IBandwidthGroup) getWrapped();
    }
    public String getName()
    {
        try
        {
            String retVal = getTypedWrapped().getName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.BandwidthGroupType getType()
    {
        try
        {
            long retVal = getTypedWrapped().getType();
            return org.virtualbox_4_3.BandwidthGroupType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getReference()
    {
        try
        {
            long retVal = getTypedWrapped().getReference();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getMaxBytesPerSec()
    {
        try
        {
            long retVal = getTypedWrapped().getMaxBytesPerSec();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setMaxBytesPerSec(Long value)
    {
        try
        {
            getTypedWrapped().setMaxBytesPerSec(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IBandwidthGroup queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IBandwidthGroup qiobj = Helper.queryInterface(nsobj, "{badea2d7-0261-4146-89f0-6a57cc34833d}", org.mozilla.interfaces.IBandwidthGroup.class);
        return qiobj == null ? null : new IBandwidthGroup(qiobj);
    }
}

// ##### ENDFILE "IBandwidthGroup.java"


// ##### BEGINFILE "IBandwidthControl.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IBandwidthControl.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IBandwidthControl extends IUnknown
{

    public IBandwidthControl(org.mozilla.interfaces.IBandwidthControl wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IBandwidthControl getTypedWrapped()
    {
        return (org.mozilla.interfaces.IBandwidthControl) getWrapped();
    }
    public Long getNumGroups()
    {
        try
        {
            long retVal = getTypedWrapped().getNumGroups();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IBandwidthControl queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IBandwidthControl qiobj = Helper.queryInterface(nsobj, "{e2eb3930-d2f4-4f87-be17-0707e30f019f}", org.mozilla.interfaces.IBandwidthControl.class);
        return qiobj == null ? null : new IBandwidthControl(qiobj);
    }
    public void createBandwidthGroup(String name, org.virtualbox_4_3.BandwidthGroupType type, Long maxBytesPerSec)
    {
        try
        {
            getTypedWrapped().createBandwidthGroup(name, type.value(), maxBytesPerSec);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void deleteBandwidthGroup(String name)
    {
        try
        {
            getTypedWrapped().deleteBandwidthGroup(name);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IBandwidthGroup getBandwidthGroup(String name)
    {
        try
        {
            org.mozilla.interfaces.IBandwidthGroup retVal;
            retVal = getTypedWrapped().getBandwidthGroup(name);
            return (retVal != null) ? new org.virtualbox_4_3.IBandwidthGroup(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<org.virtualbox_4_3.IBandwidthGroup> getAllBandwidthGroups()
    {
        try
        {
            org.mozilla.interfaces.IBandwidthGroup[] retVal;
            retVal = getTypedWrapped().getAllBandwidthGroups(null);
            return Helper.wrap2(org.virtualbox_4_3.IBandwidthGroup.class, org.mozilla.interfaces.IBandwidthGroup.class, retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IBandwidthControl.java"


// ##### BEGINFILE "IVirtualBoxClient.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IVirtualBoxClient.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IVirtualBoxClient extends IUnknown
{

    public IVirtualBoxClient(org.mozilla.interfaces.IVirtualBoxClient wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IVirtualBoxClient getTypedWrapped()
    {
        return (org.mozilla.interfaces.IVirtualBoxClient) getWrapped();
    }
    public org.virtualbox_4_3.IVirtualBox getVirtualBox()
    {
        try
        {
            org.mozilla.interfaces.IVirtualBox retVal = getTypedWrapped().getVirtualBox();
            return (retVal != null) ? new org.virtualbox_4_3.IVirtualBox(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.ISession getSession()
    {
        try
        {
            org.mozilla.interfaces.ISession retVal = getTypedWrapped().getSession();
            return (retVal != null) ? new org.virtualbox_4_3.ISession(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IEventSource getEventSource()
    {
        try
        {
            org.mozilla.interfaces.IEventSource retVal = getTypedWrapped().getEventSource();
            return (retVal != null) ? new org.virtualbox_4_3.IEventSource(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IVirtualBoxClient queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IVirtualBoxClient qiobj = Helper.queryInterface(nsobj, "{d191281f-b0cb-4d83-a8fa-0d9fd6ba234c}", org.mozilla.interfaces.IVirtualBoxClient.class);
        return qiobj == null ? null : new IVirtualBoxClient(qiobj);
    }
    public void checkMachineError(org.virtualbox_4_3.IMachine machine)
    {
        try
        {
            getTypedWrapped().checkMachineError((machine != null) ? machine.getTypedWrapped() : null);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IVirtualBoxClient.java"


// ##### BEGINFILE "IEventSource.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IEventSource.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IEventSource extends IUnknown
{

    public IEventSource(org.mozilla.interfaces.IEventSource wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IEventSource getTypedWrapped()
    {
        return (org.mozilla.interfaces.IEventSource) getWrapped();
    }
    public static IEventSource queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IEventSource qiobj = Helper.queryInterface(nsobj, "{9b6e1aee-35f3-4f4d-b5bb-ed0ecefd8538}", org.mozilla.interfaces.IEventSource.class);
        return qiobj == null ? null : new IEventSource(qiobj);
    }
    public org.virtualbox_4_3.IEventListener createListener()
    {
        try
        {
            org.mozilla.interfaces.IEventListener retVal;
            retVal = getTypedWrapped().createListener();
            return (retVal != null) ? new org.virtualbox_4_3.IEventListener(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IEventSource createAggregator(List<org.virtualbox_4_3.IEventSource> subordinates)
    {
        try
        {
            org.mozilla.interfaces.IEventSource retVal;
            retVal = getTypedWrapped().createAggregator(subordinates != null ? subordinates.size() : 0, Helper.unwrap2(org.virtualbox_4_3.IEventSource.class, org.mozilla.interfaces.IEventSource.class, subordinates));
            return (retVal != null) ? new org.virtualbox_4_3.IEventSource(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void registerListener(org.virtualbox_4_3.IEventListener listener, List<org.virtualbox_4_3.VBoxEventType> interesting, Boolean active)
    {
        try
        {
            getTypedWrapped().registerListener((listener != null) ? listener.getTypedWrapped() : null, interesting != null ? interesting.size() : 0, Helper.unwrapEnum(org.virtualbox_4_3.VBoxEventType.class, interesting), active);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void unregisterListener(org.virtualbox_4_3.IEventListener listener)
    {
        try
        {
            getTypedWrapped().unregisterListener((listener != null) ? listener.getTypedWrapped() : null);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean fireEvent(org.virtualbox_4_3.IEvent event, Integer timeout)
    {
        try
        {
            boolean retVal;
            retVal = getTypedWrapped().fireEvent((event != null) ? event.getTypedWrapped() : null, timeout);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IEvent getEvent(org.virtualbox_4_3.IEventListener listener, Integer timeout)
    {
        try
        {
            org.mozilla.interfaces.IEvent retVal;
            retVal = getTypedWrapped().getEvent((listener != null) ? listener.getTypedWrapped() : null, timeout);
            return (retVal != null) ? new org.virtualbox_4_3.IEvent(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void eventProcessed(org.virtualbox_4_3.IEventListener listener, org.virtualbox_4_3.IEvent event)
    {
        try
        {
            getTypedWrapped().eventProcessed((listener != null) ? listener.getTypedWrapped() : null, (event != null) ? event.getTypedWrapped() : null);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IEventSource.java"


// ##### BEGINFILE "IEventListener.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IEventListener.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IEventListener extends IUnknown
{

    public IEventListener(org.mozilla.interfaces.IEventListener wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IEventListener getTypedWrapped()
    {
        return (org.mozilla.interfaces.IEventListener) getWrapped();
    }
    public static IEventListener queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IEventListener qiobj = Helper.queryInterface(nsobj, "{67099191-32e7-4f6c-85ee-422304c71b90}", org.mozilla.interfaces.IEventListener.class);
        return qiobj == null ? null : new IEventListener(qiobj);
    }
    public void handleEvent(org.virtualbox_4_3.IEvent event)
    {
        try
        {
            getTypedWrapped().handleEvent((event != null) ? event.getTypedWrapped() : null);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IEventListener.java"


// ##### BEGINFILE "IEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IEvent extends IUnknown
{

    public IEvent(org.mozilla.interfaces.IEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IEvent) getWrapped();
    }
    public org.virtualbox_4_3.VBoxEventType getType()
    {
        try
        {
            long retVal = getTypedWrapped().getType();
            return org.virtualbox_4_3.VBoxEventType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IEventSource getSource()
    {
        try
        {
            org.mozilla.interfaces.IEventSource retVal = getTypedWrapped().getSource();
            return (retVal != null) ? new org.virtualbox_4_3.IEventSource(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getWaitable()
    {
        try
        {
            boolean retVal = getTypedWrapped().getWaitable();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IEvent qiobj = Helper.queryInterface(nsobj, "{0ca2adba-8f30-401b-a8cd-fe31dbe839c0}", org.mozilla.interfaces.IEvent.class);
        return qiobj == null ? null : new IEvent(qiobj);
    }
    public void setProcessed()
    {
        try
        {
            getTypedWrapped().setProcessed();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean waitProcessed(Integer timeout)
    {
        try
        {
            boolean retVal;
            retVal = getTypedWrapped().waitProcessed(timeout);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IEvent.java"


// ##### BEGINFILE "IReusableEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IReusableEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IReusableEvent extends IEvent
{

    public IReusableEvent(org.mozilla.interfaces.IReusableEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IReusableEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IReusableEvent) getWrapped();
    }
    public Long getGeneration()
    {
        try
        {
            long retVal = getTypedWrapped().getGeneration();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IReusableEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IReusableEvent qiobj = Helper.queryInterface(nsobj, "{69bfb134-80f6-4266-8e20-16371f68fa25}", org.mozilla.interfaces.IReusableEvent.class);
        return qiobj == null ? null : new IReusableEvent(qiobj);
    }
    public void reuse()
    {
        try
        {
            getTypedWrapped().reuse();
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IReusableEvent.java"


// ##### BEGINFILE "IMachineEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IMachineEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IMachineEvent extends IEvent
{

    public IMachineEvent(org.mozilla.interfaces.IMachineEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IMachineEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IMachineEvent) getWrapped();
    }
    public String getMachineId()
    {
        try
        {
            String retVal = getTypedWrapped().getMachineId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IMachineEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IMachineEvent qiobj = Helper.queryInterface(nsobj, "{92ed7b1a-0d96-40ed-ae46-a564d484325e}", org.mozilla.interfaces.IMachineEvent.class);
        return qiobj == null ? null : new IMachineEvent(qiobj);
    }
}

// ##### ENDFILE "IMachineEvent.java"


// ##### BEGINFILE "IMachineStateChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IMachineStateChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IMachineStateChangedEvent extends IMachineEvent
{

    public IMachineStateChangedEvent(org.mozilla.interfaces.IMachineStateChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IMachineStateChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IMachineStateChangedEvent) getWrapped();
    }
    public org.virtualbox_4_3.MachineState getState()
    {
        try
        {
            long retVal = getTypedWrapped().getState();
            return org.virtualbox_4_3.MachineState.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IMachineStateChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IMachineStateChangedEvent qiobj = Helper.queryInterface(nsobj, "{5748F794-48DF-438D-85EB-98FFD70D18C9}", org.mozilla.interfaces.IMachineStateChangedEvent.class);
        return qiobj == null ? null : new IMachineStateChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IMachineStateChangedEvent.java"


// ##### BEGINFILE "IMachineDataChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IMachineDataChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IMachineDataChangedEvent extends IMachineEvent
{

    public IMachineDataChangedEvent(org.mozilla.interfaces.IMachineDataChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IMachineDataChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IMachineDataChangedEvent) getWrapped();
    }
    public Boolean getTemporary()
    {
        try
        {
            boolean retVal = getTypedWrapped().getTemporary();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IMachineDataChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IMachineDataChangedEvent qiobj = Helper.queryInterface(nsobj, "{abe94809-2e88-4436-83d7-50f3e64d0503}", org.mozilla.interfaces.IMachineDataChangedEvent.class);
        return qiobj == null ? null : new IMachineDataChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IMachineDataChangedEvent.java"


// ##### BEGINFILE "IMediumRegisteredEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IMediumRegisteredEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IMediumRegisteredEvent extends IEvent
{

    public IMediumRegisteredEvent(org.mozilla.interfaces.IMediumRegisteredEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IMediumRegisteredEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IMediumRegisteredEvent) getWrapped();
    }
    public String getMediumId()
    {
        try
        {
            String retVal = getTypedWrapped().getMediumId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.DeviceType getMediumType()
    {
        try
        {
            long retVal = getTypedWrapped().getMediumType();
            return org.virtualbox_4_3.DeviceType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getRegistered()
    {
        try
        {
            boolean retVal = getTypedWrapped().getRegistered();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IMediumRegisteredEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IMediumRegisteredEvent qiobj = Helper.queryInterface(nsobj, "{53fac49a-b7f1-4a5a-a4ef-a11dd9c2a458}", org.mozilla.interfaces.IMediumRegisteredEvent.class);
        return qiobj == null ? null : new IMediumRegisteredEvent(qiobj);
    }
}

// ##### ENDFILE "IMediumRegisteredEvent.java"


// ##### BEGINFILE "IMachineRegisteredEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IMachineRegisteredEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IMachineRegisteredEvent extends IMachineEvent
{

    public IMachineRegisteredEvent(org.mozilla.interfaces.IMachineRegisteredEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IMachineRegisteredEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IMachineRegisteredEvent) getWrapped();
    }
    public Boolean getRegistered()
    {
        try
        {
            boolean retVal = getTypedWrapped().getRegistered();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IMachineRegisteredEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IMachineRegisteredEvent qiobj = Helper.queryInterface(nsobj, "{c354a762-3ff2-4f2e-8f09-07382ee25088}", org.mozilla.interfaces.IMachineRegisteredEvent.class);
        return qiobj == null ? null : new IMachineRegisteredEvent(qiobj);
    }
}

// ##### ENDFILE "IMachineRegisteredEvent.java"


// ##### BEGINFILE "ISessionStateChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ISessionStateChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class ISessionStateChangedEvent extends IMachineEvent
{

    public ISessionStateChangedEvent(org.mozilla.interfaces.ISessionStateChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.ISessionStateChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.ISessionStateChangedEvent) getWrapped();
    }
    public org.virtualbox_4_3.SessionState getState()
    {
        try
        {
            long retVal = getTypedWrapped().getState();
            return org.virtualbox_4_3.SessionState.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static ISessionStateChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.ISessionStateChangedEvent qiobj = Helper.queryInterface(nsobj, "{714a3eef-799a-4489-86cd-fe8e45b2ff8e}", org.mozilla.interfaces.ISessionStateChangedEvent.class);
        return qiobj == null ? null : new ISessionStateChangedEvent(qiobj);
    }
}

// ##### ENDFILE "ISessionStateChangedEvent.java"


// ##### BEGINFILE "IGuestPropertyChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestPropertyChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestPropertyChangedEvent extends IMachineEvent
{

    public IGuestPropertyChangedEvent(org.mozilla.interfaces.IGuestPropertyChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestPropertyChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestPropertyChangedEvent) getWrapped();
    }
    public String getName()
    {
        try
        {
            String retVal = getTypedWrapped().getName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getValue()
    {
        try
        {
            String retVal = getTypedWrapped().getValue();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getFlags()
    {
        try
        {
            String retVal = getTypedWrapped().getFlags();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IGuestPropertyChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestPropertyChangedEvent qiobj = Helper.queryInterface(nsobj, "{3f63597a-26f1-4edb-8dd2-6bddd0912368}", org.mozilla.interfaces.IGuestPropertyChangedEvent.class);
        return qiobj == null ? null : new IGuestPropertyChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IGuestPropertyChangedEvent.java"


// ##### BEGINFILE "ISnapshotEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ISnapshotEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class ISnapshotEvent extends IMachineEvent
{

    public ISnapshotEvent(org.mozilla.interfaces.ISnapshotEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.ISnapshotEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.ISnapshotEvent) getWrapped();
    }
    public String getSnapshotId()
    {
        try
        {
            String retVal = getTypedWrapped().getSnapshotId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static ISnapshotEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.ISnapshotEvent qiobj = Helper.queryInterface(nsobj, "{21637b0e-34b8-42d3-acfb-7e96daf77c22}", org.mozilla.interfaces.ISnapshotEvent.class);
        return qiobj == null ? null : new ISnapshotEvent(qiobj);
    }
}

// ##### ENDFILE "ISnapshotEvent.java"


// ##### BEGINFILE "ISnapshotTakenEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ISnapshotTakenEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class ISnapshotTakenEvent extends ISnapshotEvent
{

    public ISnapshotTakenEvent(org.mozilla.interfaces.ISnapshotTakenEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.ISnapshotTakenEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.ISnapshotTakenEvent) getWrapped();
    }
    public static ISnapshotTakenEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.ISnapshotTakenEvent qiobj = Helper.queryInterface(nsobj, "{d27c0b3d-6038-422c-b45e-6d4a0503d9f1}", org.mozilla.interfaces.ISnapshotTakenEvent.class);
        return qiobj == null ? null : new ISnapshotTakenEvent(qiobj);
    }
}

// ##### ENDFILE "ISnapshotTakenEvent.java"


// ##### BEGINFILE "ISnapshotDeletedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ISnapshotDeletedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class ISnapshotDeletedEvent extends ISnapshotEvent
{

    public ISnapshotDeletedEvent(org.mozilla.interfaces.ISnapshotDeletedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.ISnapshotDeletedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.ISnapshotDeletedEvent) getWrapped();
    }
    public static ISnapshotDeletedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.ISnapshotDeletedEvent qiobj = Helper.queryInterface(nsobj, "{c48f3401-4a9e-43f4-b7a7-54bd285e22f4}", org.mozilla.interfaces.ISnapshotDeletedEvent.class);
        return qiobj == null ? null : new ISnapshotDeletedEvent(qiobj);
    }
}

// ##### ENDFILE "ISnapshotDeletedEvent.java"


// ##### BEGINFILE "ISnapshotChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ISnapshotChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class ISnapshotChangedEvent extends ISnapshotEvent
{

    public ISnapshotChangedEvent(org.mozilla.interfaces.ISnapshotChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.ISnapshotChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.ISnapshotChangedEvent) getWrapped();
    }
    public static ISnapshotChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.ISnapshotChangedEvent qiobj = Helper.queryInterface(nsobj, "{07541941-8079-447a-a33e-47a69c7980db}", org.mozilla.interfaces.ISnapshotChangedEvent.class);
        return qiobj == null ? null : new ISnapshotChangedEvent(qiobj);
    }
}

// ##### ENDFILE "ISnapshotChangedEvent.java"


// ##### BEGINFILE "IMousePointerShapeChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IMousePointerShapeChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IMousePointerShapeChangedEvent extends IEvent
{

    public IMousePointerShapeChangedEvent(org.mozilla.interfaces.IMousePointerShapeChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IMousePointerShapeChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IMousePointerShapeChangedEvent) getWrapped();
    }
    public Boolean getVisible()
    {
        try
        {
            boolean retVal = getTypedWrapped().getVisible();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getAlpha()
    {
        try
        {
            boolean retVal = getTypedWrapped().getAlpha();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getXhot()
    {
        try
        {
            long retVal = getTypedWrapped().getXhot();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getYhot()
    {
        try
        {
            long retVal = getTypedWrapped().getYhot();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getWidth()
    {
        try
        {
            long retVal = getTypedWrapped().getWidth();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getHeight()
    {
        try
        {
            long retVal = getTypedWrapped().getHeight();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public byte[] getShape()
    {
        try
        {
            byte[] retVal = getTypedWrapped().getShape(null);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IMousePointerShapeChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IMousePointerShapeChangedEvent qiobj = Helper.queryInterface(nsobj, "{a6dcf6e8-416b-4181-8c4a-45ec95177aef}", org.mozilla.interfaces.IMousePointerShapeChangedEvent.class);
        return qiobj == null ? null : new IMousePointerShapeChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IMousePointerShapeChangedEvent.java"


// ##### BEGINFILE "IMouseCapabilityChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IMouseCapabilityChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IMouseCapabilityChangedEvent extends IEvent
{

    public IMouseCapabilityChangedEvent(org.mozilla.interfaces.IMouseCapabilityChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IMouseCapabilityChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IMouseCapabilityChangedEvent) getWrapped();
    }
    public Boolean getSupportsAbsolute()
    {
        try
        {
            boolean retVal = getTypedWrapped().getSupportsAbsolute();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getSupportsRelative()
    {
        try
        {
            boolean retVal = getTypedWrapped().getSupportsRelative();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getSupportsMultiTouch()
    {
        try
        {
            boolean retVal = getTypedWrapped().getSupportsMultiTouch();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getNeedsHostCursor()
    {
        try
        {
            boolean retVal = getTypedWrapped().getNeedsHostCursor();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IMouseCapabilityChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IMouseCapabilityChangedEvent qiobj = Helper.queryInterface(nsobj, "{70e7779a-e64a-4908-804e-371cad23a756}", org.mozilla.interfaces.IMouseCapabilityChangedEvent.class);
        return qiobj == null ? null : new IMouseCapabilityChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IMouseCapabilityChangedEvent.java"


// ##### BEGINFILE "IKeyboardLedsChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IKeyboardLedsChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IKeyboardLedsChangedEvent extends IEvent
{

    public IKeyboardLedsChangedEvent(org.mozilla.interfaces.IKeyboardLedsChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IKeyboardLedsChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IKeyboardLedsChangedEvent) getWrapped();
    }
    public Boolean getNumLock()
    {
        try
        {
            boolean retVal = getTypedWrapped().getNumLock();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getCapsLock()
    {
        try
        {
            boolean retVal = getTypedWrapped().getCapsLock();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getScrollLock()
    {
        try
        {
            boolean retVal = getTypedWrapped().getScrollLock();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IKeyboardLedsChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IKeyboardLedsChangedEvent qiobj = Helper.queryInterface(nsobj, "{6DDEF35E-4737-457B-99FC-BC52C851A44F}", org.mozilla.interfaces.IKeyboardLedsChangedEvent.class);
        return qiobj == null ? null : new IKeyboardLedsChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IKeyboardLedsChangedEvent.java"


// ##### BEGINFILE "IStateChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IStateChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IStateChangedEvent extends IEvent
{

    public IStateChangedEvent(org.mozilla.interfaces.IStateChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IStateChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IStateChangedEvent) getWrapped();
    }
    public org.virtualbox_4_3.MachineState getState()
    {
        try
        {
            long retVal = getTypedWrapped().getState();
            return org.virtualbox_4_3.MachineState.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IStateChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IStateChangedEvent qiobj = Helper.queryInterface(nsobj, "{4376693C-CF37-453B-9289-3B0F521CAF27}", org.mozilla.interfaces.IStateChangedEvent.class);
        return qiobj == null ? null : new IStateChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IStateChangedEvent.java"


// ##### BEGINFILE "IAdditionsStateChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IAdditionsStateChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IAdditionsStateChangedEvent extends IEvent
{

    public IAdditionsStateChangedEvent(org.mozilla.interfaces.IAdditionsStateChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IAdditionsStateChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IAdditionsStateChangedEvent) getWrapped();
    }
    public static IAdditionsStateChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IAdditionsStateChangedEvent qiobj = Helper.queryInterface(nsobj, "{D70F7915-DA7C-44C8-A7AC-9F173490446A}", org.mozilla.interfaces.IAdditionsStateChangedEvent.class);
        return qiobj == null ? null : new IAdditionsStateChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IAdditionsStateChangedEvent.java"


// ##### BEGINFILE "INetworkAdapterChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * INetworkAdapterChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class INetworkAdapterChangedEvent extends IEvent
{

    public INetworkAdapterChangedEvent(org.mozilla.interfaces.INetworkAdapterChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.INetworkAdapterChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.INetworkAdapterChangedEvent) getWrapped();
    }
    public org.virtualbox_4_3.INetworkAdapter getNetworkAdapter()
    {
        try
        {
            org.mozilla.interfaces.INetworkAdapter retVal = getTypedWrapped().getNetworkAdapter();
            return (retVal != null) ? new org.virtualbox_4_3.INetworkAdapter(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static INetworkAdapterChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.INetworkAdapterChangedEvent qiobj = Helper.queryInterface(nsobj, "{08889892-1EC6-4883-801D-77F56CFD0103}", org.mozilla.interfaces.INetworkAdapterChangedEvent.class);
        return qiobj == null ? null : new INetworkAdapterChangedEvent(qiobj);
    }
}

// ##### ENDFILE "INetworkAdapterChangedEvent.java"


// ##### BEGINFILE "ISerialPortChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ISerialPortChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class ISerialPortChangedEvent extends IEvent
{

    public ISerialPortChangedEvent(org.mozilla.interfaces.ISerialPortChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.ISerialPortChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.ISerialPortChangedEvent) getWrapped();
    }
    public org.virtualbox_4_3.ISerialPort getSerialPort()
    {
        try
        {
            org.mozilla.interfaces.ISerialPort retVal = getTypedWrapped().getSerialPort();
            return (retVal != null) ? new org.virtualbox_4_3.ISerialPort(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static ISerialPortChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.ISerialPortChangedEvent qiobj = Helper.queryInterface(nsobj, "{3BA329DC-659C-488B-835C-4ECA7AE71C6C}", org.mozilla.interfaces.ISerialPortChangedEvent.class);
        return qiobj == null ? null : new ISerialPortChangedEvent(qiobj);
    }
}

// ##### ENDFILE "ISerialPortChangedEvent.java"


// ##### BEGINFILE "IParallelPortChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IParallelPortChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IParallelPortChangedEvent extends IEvent
{

    public IParallelPortChangedEvent(org.mozilla.interfaces.IParallelPortChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IParallelPortChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IParallelPortChangedEvent) getWrapped();
    }
    public org.virtualbox_4_3.IParallelPort getParallelPort()
    {
        try
        {
            org.mozilla.interfaces.IParallelPort retVal = getTypedWrapped().getParallelPort();
            return (retVal != null) ? new org.virtualbox_4_3.IParallelPort(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IParallelPortChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IParallelPortChangedEvent qiobj = Helper.queryInterface(nsobj, "{813C99FC-9849-4F47-813E-24A75DC85615}", org.mozilla.interfaces.IParallelPortChangedEvent.class);
        return qiobj == null ? null : new IParallelPortChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IParallelPortChangedEvent.java"


// ##### BEGINFILE "IStorageControllerChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IStorageControllerChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IStorageControllerChangedEvent extends IEvent
{

    public IStorageControllerChangedEvent(org.mozilla.interfaces.IStorageControllerChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IStorageControllerChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IStorageControllerChangedEvent) getWrapped();
    }
    public static IStorageControllerChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IStorageControllerChangedEvent qiobj = Helper.queryInterface(nsobj, "{715212BF-DA59-426E-8230-3831FAA52C56}", org.mozilla.interfaces.IStorageControllerChangedEvent.class);
        return qiobj == null ? null : new IStorageControllerChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IStorageControllerChangedEvent.java"


// ##### BEGINFILE "IMediumChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IMediumChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IMediumChangedEvent extends IEvent
{

    public IMediumChangedEvent(org.mozilla.interfaces.IMediumChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IMediumChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IMediumChangedEvent) getWrapped();
    }
    public org.virtualbox_4_3.IMediumAttachment getMediumAttachment()
    {
        try
        {
            org.mozilla.interfaces.IMediumAttachment retVal = getTypedWrapped().getMediumAttachment();
            return (retVal != null) ? new org.virtualbox_4_3.IMediumAttachment(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IMediumChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IMediumChangedEvent qiobj = Helper.queryInterface(nsobj, "{0FE2DA40-5637-472A-9736-72019EABD7DE}", org.mozilla.interfaces.IMediumChangedEvent.class);
        return qiobj == null ? null : new IMediumChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IMediumChangedEvent.java"


// ##### BEGINFILE "IClipboardModeChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IClipboardModeChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IClipboardModeChangedEvent extends IEvent
{

    public IClipboardModeChangedEvent(org.mozilla.interfaces.IClipboardModeChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IClipboardModeChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IClipboardModeChangedEvent) getWrapped();
    }
    public org.virtualbox_4_3.ClipboardMode getClipboardMode()
    {
        try
        {
            long retVal = getTypedWrapped().getClipboardMode();
            return org.virtualbox_4_3.ClipboardMode.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IClipboardModeChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IClipboardModeChangedEvent qiobj = Helper.queryInterface(nsobj, "{cac21692-7997-4595-a731-3a509db604e5}", org.mozilla.interfaces.IClipboardModeChangedEvent.class);
        return qiobj == null ? null : new IClipboardModeChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IClipboardModeChangedEvent.java"


// ##### BEGINFILE "IDragAndDropModeChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IDragAndDropModeChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IDragAndDropModeChangedEvent extends IEvent
{

    public IDragAndDropModeChangedEvent(org.mozilla.interfaces.IDragAndDropModeChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IDragAndDropModeChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IDragAndDropModeChangedEvent) getWrapped();
    }
    public org.virtualbox_4_3.DragAndDropMode getDragAndDropMode()
    {
        try
        {
            long retVal = getTypedWrapped().getDragAndDropMode();
            return org.virtualbox_4_3.DragAndDropMode.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IDragAndDropModeChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IDragAndDropModeChangedEvent qiobj = Helper.queryInterface(nsobj, "{e90b8850-ac8e-4dff-8059-4100ae2c3c3d}", org.mozilla.interfaces.IDragAndDropModeChangedEvent.class);
        return qiobj == null ? null : new IDragAndDropModeChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IDragAndDropModeChangedEvent.java"


// ##### BEGINFILE "ICPUChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ICPUChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class ICPUChangedEvent extends IEvent
{

    public ICPUChangedEvent(org.mozilla.interfaces.ICPUChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.ICPUChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.ICPUChangedEvent) getWrapped();
    }
    public Long getCPU()
    {
        try
        {
            long retVal = getTypedWrapped().getCPU();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getAdd()
    {
        try
        {
            boolean retVal = getTypedWrapped().getAdd();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static ICPUChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.ICPUChangedEvent qiobj = Helper.queryInterface(nsobj, "{4da2dec7-71b2-4817-9a64-4ed12c17388e}", org.mozilla.interfaces.ICPUChangedEvent.class);
        return qiobj == null ? null : new ICPUChangedEvent(qiobj);
    }
}

// ##### ENDFILE "ICPUChangedEvent.java"


// ##### BEGINFILE "ICPUExecutionCapChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ICPUExecutionCapChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class ICPUExecutionCapChangedEvent extends IEvent
{

    public ICPUExecutionCapChangedEvent(org.mozilla.interfaces.ICPUExecutionCapChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.ICPUExecutionCapChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.ICPUExecutionCapChangedEvent) getWrapped();
    }
    public Long getExecutionCap()
    {
        try
        {
            long retVal = getTypedWrapped().getExecutionCap();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static ICPUExecutionCapChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.ICPUExecutionCapChangedEvent qiobj = Helper.queryInterface(nsobj, "{dfa7e4f5-b4a4-44ce-85a8-127ac5eb59dc}", org.mozilla.interfaces.ICPUExecutionCapChangedEvent.class);
        return qiobj == null ? null : new ICPUExecutionCapChangedEvent(qiobj);
    }
}

// ##### ENDFILE "ICPUExecutionCapChangedEvent.java"


// ##### BEGINFILE "IGuestKeyboardEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestKeyboardEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestKeyboardEvent extends IEvent
{

    public IGuestKeyboardEvent(org.mozilla.interfaces.IGuestKeyboardEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestKeyboardEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestKeyboardEvent) getWrapped();
    }
    public List<Integer> getScancodes()
    {
        try
        {
            int[] retVal = getTypedWrapped().getScancodes(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IGuestKeyboardEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestKeyboardEvent qiobj = Helper.queryInterface(nsobj, "{88394258-7006-40d4-b339-472ee3801844}", org.mozilla.interfaces.IGuestKeyboardEvent.class);
        return qiobj == null ? null : new IGuestKeyboardEvent(qiobj);
    }
}

// ##### ENDFILE "IGuestKeyboardEvent.java"


// ##### BEGINFILE "IGuestMouseEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestMouseEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestMouseEvent extends IReusableEvent
{

    public IGuestMouseEvent(org.mozilla.interfaces.IGuestMouseEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestMouseEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestMouseEvent) getWrapped();
    }
    public org.virtualbox_4_3.GuestMouseEventMode getMode()
    {
        try
        {
            long retVal = getTypedWrapped().getMode();
            return org.virtualbox_4_3.GuestMouseEventMode.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getX()
    {
        try
        {
            int retVal = getTypedWrapped().getX();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getY()
    {
        try
        {
            int retVal = getTypedWrapped().getY();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getZ()
    {
        try
        {
            int retVal = getTypedWrapped().getZ();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getW()
    {
        try
        {
            int retVal = getTypedWrapped().getW();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getButtons()
    {
        try
        {
            int retVal = getTypedWrapped().getButtons();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IGuestMouseEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestMouseEvent qiobj = Helper.queryInterface(nsobj, "{179f8647-319c-4e7e-8150-c5837bd265f6}", org.mozilla.interfaces.IGuestMouseEvent.class);
        return qiobj == null ? null : new IGuestMouseEvent(qiobj);
    }
}

// ##### ENDFILE "IGuestMouseEvent.java"


// ##### BEGINFILE "IGuestMultiTouchEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestMultiTouchEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestMultiTouchEvent extends IEvent
{

    public IGuestMultiTouchEvent(org.mozilla.interfaces.IGuestMultiTouchEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestMultiTouchEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestMultiTouchEvent) getWrapped();
    }
    public Integer getContactCount()
    {
        try
        {
            int retVal = getTypedWrapped().getContactCount();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<Short> getXPositions()
    {
        try
        {
            short[] retVal = getTypedWrapped().getXPositions(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<Short> getYPositions()
    {
        try
        {
            short[] retVal = getTypedWrapped().getYPositions(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<Integer> getContactIds()
    {
        try
        {
            int[] retVal = getTypedWrapped().getContactIds(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<Integer> getContactFlags()
    {
        try
        {
            int[] retVal = getTypedWrapped().getContactFlags(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getScanTime()
    {
        try
        {
            long retVal = getTypedWrapped().getScanTime();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IGuestMultiTouchEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestMultiTouchEvent qiobj = Helper.queryInterface(nsobj, "{be8a0eb5-f4f4-4dd0-9d30-c89b873247ec}", org.mozilla.interfaces.IGuestMultiTouchEvent.class);
        return qiobj == null ? null : new IGuestMultiTouchEvent(qiobj);
    }
}

// ##### ENDFILE "IGuestMultiTouchEvent.java"


// ##### BEGINFILE "IGuestSessionEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestSessionEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestSessionEvent extends IEvent
{

    public IGuestSessionEvent(org.mozilla.interfaces.IGuestSessionEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestSessionEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestSessionEvent) getWrapped();
    }
    public org.virtualbox_4_3.IGuestSession getSession()
    {
        try
        {
            org.mozilla.interfaces.IGuestSession retVal = getTypedWrapped().getSession();
            return (retVal != null) ? new org.virtualbox_4_3.IGuestSession(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IGuestSessionEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestSessionEvent qiobj = Helper.queryInterface(nsobj, "{b9acd33f-647d-45ac-8fe9-f49b3183ba37}", org.mozilla.interfaces.IGuestSessionEvent.class);
        return qiobj == null ? null : new IGuestSessionEvent(qiobj);
    }
}

// ##### ENDFILE "IGuestSessionEvent.java"


// ##### BEGINFILE "IGuestSessionStateChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestSessionStateChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestSessionStateChangedEvent extends IGuestSessionEvent
{

    public IGuestSessionStateChangedEvent(org.mozilla.interfaces.IGuestSessionStateChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestSessionStateChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestSessionStateChangedEvent) getWrapped();
    }
    public Long getId()
    {
        try
        {
            long retVal = getTypedWrapped().getId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.GuestSessionStatus getStatus()
    {
        try
        {
            long retVal = getTypedWrapped().getStatus();
            return org.virtualbox_4_3.GuestSessionStatus.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IVirtualBoxErrorInfo getError()
    {
        try
        {
            org.mozilla.interfaces.IVirtualBoxErrorInfo retVal = getTypedWrapped().getError();
            return (retVal != null) ? new org.virtualbox_4_3.IVirtualBoxErrorInfo(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IGuestSessionStateChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestSessionStateChangedEvent qiobj = Helper.queryInterface(nsobj, "{327e3c00-ee61-462f-aed3-0dff6cbf9904}", org.mozilla.interfaces.IGuestSessionStateChangedEvent.class);
        return qiobj == null ? null : new IGuestSessionStateChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IGuestSessionStateChangedEvent.java"


// ##### BEGINFILE "IGuestSessionRegisteredEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestSessionRegisteredEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestSessionRegisteredEvent extends IGuestSessionEvent
{

    public IGuestSessionRegisteredEvent(org.mozilla.interfaces.IGuestSessionRegisteredEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestSessionRegisteredEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestSessionRegisteredEvent) getWrapped();
    }
    public Boolean getRegistered()
    {
        try
        {
            boolean retVal = getTypedWrapped().getRegistered();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IGuestSessionRegisteredEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestSessionRegisteredEvent qiobj = Helper.queryInterface(nsobj, "{b79de686-eabd-4fa6-960a-f1756c99ea1c}", org.mozilla.interfaces.IGuestSessionRegisteredEvent.class);
        return qiobj == null ? null : new IGuestSessionRegisteredEvent(qiobj);
    }
}

// ##### ENDFILE "IGuestSessionRegisteredEvent.java"


// ##### BEGINFILE "IGuestProcessEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestProcessEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestProcessEvent extends IGuestSessionEvent
{

    public IGuestProcessEvent(org.mozilla.interfaces.IGuestProcessEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestProcessEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestProcessEvent) getWrapped();
    }
    public org.virtualbox_4_3.IGuestProcess getProcess()
    {
        try
        {
            org.mozilla.interfaces.IGuestProcess retVal = getTypedWrapped().getProcess();
            return (retVal != null) ? new org.virtualbox_4_3.IGuestProcess(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getPid()
    {
        try
        {
            long retVal = getTypedWrapped().getPid();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IGuestProcessEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestProcessEvent qiobj = Helper.queryInterface(nsobj, "{2405f0e5-6588-40a3-9b0a-68c05ba52c4b}", org.mozilla.interfaces.IGuestProcessEvent.class);
        return qiobj == null ? null : new IGuestProcessEvent(qiobj);
    }
}

// ##### ENDFILE "IGuestProcessEvent.java"


// ##### BEGINFILE "IGuestProcessRegisteredEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestProcessRegisteredEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestProcessRegisteredEvent extends IGuestProcessEvent
{

    public IGuestProcessRegisteredEvent(org.mozilla.interfaces.IGuestProcessRegisteredEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestProcessRegisteredEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestProcessRegisteredEvent) getWrapped();
    }
    public Boolean getRegistered()
    {
        try
        {
            boolean retVal = getTypedWrapped().getRegistered();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IGuestProcessRegisteredEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestProcessRegisteredEvent qiobj = Helper.queryInterface(nsobj, "{1d89e2b3-c6ea-45b6-9d43-dc6f70cc9f02}", org.mozilla.interfaces.IGuestProcessRegisteredEvent.class);
        return qiobj == null ? null : new IGuestProcessRegisteredEvent(qiobj);
    }
}

// ##### ENDFILE "IGuestProcessRegisteredEvent.java"


// ##### BEGINFILE "IGuestProcessStateChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestProcessStateChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestProcessStateChangedEvent extends IGuestProcessEvent
{

    public IGuestProcessStateChangedEvent(org.mozilla.interfaces.IGuestProcessStateChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestProcessStateChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestProcessStateChangedEvent) getWrapped();
    }
    public org.virtualbox_4_3.ProcessStatus getStatus()
    {
        try
        {
            long retVal = getTypedWrapped().getStatus();
            return org.virtualbox_4_3.ProcessStatus.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IVirtualBoxErrorInfo getError()
    {
        try
        {
            org.mozilla.interfaces.IVirtualBoxErrorInfo retVal = getTypedWrapped().getError();
            return (retVal != null) ? new org.virtualbox_4_3.IVirtualBoxErrorInfo(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IGuestProcessStateChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestProcessStateChangedEvent qiobj = Helper.queryInterface(nsobj, "{c365fb7b-4430-499f-92c8-8bed814a567a}", org.mozilla.interfaces.IGuestProcessStateChangedEvent.class);
        return qiobj == null ? null : new IGuestProcessStateChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IGuestProcessStateChangedEvent.java"


// ##### BEGINFILE "IGuestProcessIOEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestProcessIOEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestProcessIOEvent extends IGuestProcessEvent
{

    public IGuestProcessIOEvent(org.mozilla.interfaces.IGuestProcessIOEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestProcessIOEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestProcessIOEvent) getWrapped();
    }
    public Long getHandle()
    {
        try
        {
            long retVal = getTypedWrapped().getHandle();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getProcessed()
    {
        try
        {
            long retVal = getTypedWrapped().getProcessed();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IGuestProcessIOEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestProcessIOEvent qiobj = Helper.queryInterface(nsobj, "{9ea9227c-e9bb-49b3-bfc7-c5171e93ef38}", org.mozilla.interfaces.IGuestProcessIOEvent.class);
        return qiobj == null ? null : new IGuestProcessIOEvent(qiobj);
    }
}

// ##### ENDFILE "IGuestProcessIOEvent.java"


// ##### BEGINFILE "IGuestProcessInputNotifyEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestProcessInputNotifyEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestProcessInputNotifyEvent extends IGuestProcessIOEvent
{

    public IGuestProcessInputNotifyEvent(org.mozilla.interfaces.IGuestProcessInputNotifyEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestProcessInputNotifyEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestProcessInputNotifyEvent) getWrapped();
    }
    public org.virtualbox_4_3.ProcessInputStatus getStatus()
    {
        try
        {
            long retVal = getTypedWrapped().getStatus();
            return org.virtualbox_4_3.ProcessInputStatus.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IGuestProcessInputNotifyEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestProcessInputNotifyEvent qiobj = Helper.queryInterface(nsobj, "{0de887f2-b7db-4616-aac6-cfb94d89ba78}", org.mozilla.interfaces.IGuestProcessInputNotifyEvent.class);
        return qiobj == null ? null : new IGuestProcessInputNotifyEvent(qiobj);
    }
}

// ##### ENDFILE "IGuestProcessInputNotifyEvent.java"


// ##### BEGINFILE "IGuestProcessOutputEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestProcessOutputEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestProcessOutputEvent extends IGuestProcessIOEvent
{

    public IGuestProcessOutputEvent(org.mozilla.interfaces.IGuestProcessOutputEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestProcessOutputEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestProcessOutputEvent) getWrapped();
    }
    public byte[] getData()
    {
        try
        {
            byte[] retVal = getTypedWrapped().getData(null);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IGuestProcessOutputEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestProcessOutputEvent qiobj = Helper.queryInterface(nsobj, "{d3d5f1ee-bcb2-4905-a7ab-cc85448a742b}", org.mozilla.interfaces.IGuestProcessOutputEvent.class);
        return qiobj == null ? null : new IGuestProcessOutputEvent(qiobj);
    }
}

// ##### ENDFILE "IGuestProcessOutputEvent.java"


// ##### BEGINFILE "IGuestFileEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestFileEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestFileEvent extends IGuestSessionEvent
{

    public IGuestFileEvent(org.mozilla.interfaces.IGuestFileEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestFileEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestFileEvent) getWrapped();
    }
    public org.virtualbox_4_3.IGuestFile getFile()
    {
        try
        {
            org.mozilla.interfaces.IGuestFile retVal = getTypedWrapped().getFile();
            return (retVal != null) ? new org.virtualbox_4_3.IGuestFile(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IGuestFileEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestFileEvent qiobj = Helper.queryInterface(nsobj, "{c8adb7b0-057d-4391-b928-f14b06b710c5}", org.mozilla.interfaces.IGuestFileEvent.class);
        return qiobj == null ? null : new IGuestFileEvent(qiobj);
    }
}

// ##### ENDFILE "IGuestFileEvent.java"


// ##### BEGINFILE "IGuestFileRegisteredEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestFileRegisteredEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestFileRegisteredEvent extends IGuestFileEvent
{

    public IGuestFileRegisteredEvent(org.mozilla.interfaces.IGuestFileRegisteredEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestFileRegisteredEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestFileRegisteredEvent) getWrapped();
    }
    public Boolean getRegistered()
    {
        try
        {
            boolean retVal = getTypedWrapped().getRegistered();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IGuestFileRegisteredEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestFileRegisteredEvent qiobj = Helper.queryInterface(nsobj, "{d0d93830-70a2-487e-895e-d3fc9679f7b3}", org.mozilla.interfaces.IGuestFileRegisteredEvent.class);
        return qiobj == null ? null : new IGuestFileRegisteredEvent(qiobj);
    }
}

// ##### ENDFILE "IGuestFileRegisteredEvent.java"


// ##### BEGINFILE "IGuestFileStateChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestFileStateChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestFileStateChangedEvent extends IGuestFileEvent
{

    public IGuestFileStateChangedEvent(org.mozilla.interfaces.IGuestFileStateChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestFileStateChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestFileStateChangedEvent) getWrapped();
    }
    public org.virtualbox_4_3.FileStatus getStatus()
    {
        try
        {
            long retVal = getTypedWrapped().getStatus();
            return org.virtualbox_4_3.FileStatus.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IVirtualBoxErrorInfo getError()
    {
        try
        {
            org.mozilla.interfaces.IVirtualBoxErrorInfo retVal = getTypedWrapped().getError();
            return (retVal != null) ? new org.virtualbox_4_3.IVirtualBoxErrorInfo(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IGuestFileStateChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestFileStateChangedEvent qiobj = Helper.queryInterface(nsobj, "{d37fe88f-0979-486c-baa1-3abb144dc82d}", org.mozilla.interfaces.IGuestFileStateChangedEvent.class);
        return qiobj == null ? null : new IGuestFileStateChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IGuestFileStateChangedEvent.java"


// ##### BEGINFILE "IGuestFileIOEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestFileIOEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestFileIOEvent extends IGuestFileEvent
{

    public IGuestFileIOEvent(org.mozilla.interfaces.IGuestFileIOEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestFileIOEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestFileIOEvent) getWrapped();
    }
    public Long getOffset()
    {
        try
        {
            long retVal = getTypedWrapped().getOffset();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getProcessed()
    {
        try
        {
            long retVal = getTypedWrapped().getProcessed();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IGuestFileIOEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestFileIOEvent qiobj = Helper.queryInterface(nsobj, "{b5191a7c-9536-4ef8-820e-3b0e17e5bbc8}", org.mozilla.interfaces.IGuestFileIOEvent.class);
        return qiobj == null ? null : new IGuestFileIOEvent(qiobj);
    }
}

// ##### ENDFILE "IGuestFileIOEvent.java"


// ##### BEGINFILE "IGuestFileOffsetChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestFileOffsetChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestFileOffsetChangedEvent extends IGuestFileIOEvent
{

    public IGuestFileOffsetChangedEvent(org.mozilla.interfaces.IGuestFileOffsetChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestFileOffsetChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestFileOffsetChangedEvent) getWrapped();
    }
    public static IGuestFileOffsetChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestFileOffsetChangedEvent qiobj = Helper.queryInterface(nsobj, "{e8f79a21-1207-4179-94cf-ca250036308f}", org.mozilla.interfaces.IGuestFileOffsetChangedEvent.class);
        return qiobj == null ? null : new IGuestFileOffsetChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IGuestFileOffsetChangedEvent.java"


// ##### BEGINFILE "IGuestFileReadEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestFileReadEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestFileReadEvent extends IGuestFileIOEvent
{

    public IGuestFileReadEvent(org.mozilla.interfaces.IGuestFileReadEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestFileReadEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestFileReadEvent) getWrapped();
    }
    public byte[] getData()
    {
        try
        {
            byte[] retVal = getTypedWrapped().getData(null);
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IGuestFileReadEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestFileReadEvent qiobj = Helper.queryInterface(nsobj, "{4ee3cbcb-486f-40db-9150-deee3fd24189}", org.mozilla.interfaces.IGuestFileReadEvent.class);
        return qiobj == null ? null : new IGuestFileReadEvent(qiobj);
    }
}

// ##### ENDFILE "IGuestFileReadEvent.java"


// ##### BEGINFILE "IGuestFileWriteEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestFileWriteEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestFileWriteEvent extends IGuestFileIOEvent
{

    public IGuestFileWriteEvent(org.mozilla.interfaces.IGuestFileWriteEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestFileWriteEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestFileWriteEvent) getWrapped();
    }
    public static IGuestFileWriteEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestFileWriteEvent qiobj = Helper.queryInterface(nsobj, "{e062a915-3cf5-4c0a-bc90-9b8d4cc94d89}", org.mozilla.interfaces.IGuestFileWriteEvent.class);
        return qiobj == null ? null : new IGuestFileWriteEvent(qiobj);
    }
}

// ##### ENDFILE "IGuestFileWriteEvent.java"


// ##### BEGINFILE "IVRDEServerChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IVRDEServerChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IVRDEServerChangedEvent extends IEvent
{

    public IVRDEServerChangedEvent(org.mozilla.interfaces.IVRDEServerChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IVRDEServerChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IVRDEServerChangedEvent) getWrapped();
    }
    public static IVRDEServerChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IVRDEServerChangedEvent qiobj = Helper.queryInterface(nsobj, "{a06fd66a-3188-4c8c-8756-1395e8cb691c}", org.mozilla.interfaces.IVRDEServerChangedEvent.class);
        return qiobj == null ? null : new IVRDEServerChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IVRDEServerChangedEvent.java"


// ##### BEGINFILE "IVRDEServerInfoChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IVRDEServerInfoChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IVRDEServerInfoChangedEvent extends IEvent
{

    public IVRDEServerInfoChangedEvent(org.mozilla.interfaces.IVRDEServerInfoChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IVRDEServerInfoChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IVRDEServerInfoChangedEvent) getWrapped();
    }
    public static IVRDEServerInfoChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IVRDEServerInfoChangedEvent qiobj = Helper.queryInterface(nsobj, "{dd6a1080-e1b7-4339-a549-f0878115596e}", org.mozilla.interfaces.IVRDEServerInfoChangedEvent.class);
        return qiobj == null ? null : new IVRDEServerInfoChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IVRDEServerInfoChangedEvent.java"


// ##### BEGINFILE "IVideoCaptureChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IVideoCaptureChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IVideoCaptureChangedEvent extends IEvent
{

    public IVideoCaptureChangedEvent(org.mozilla.interfaces.IVideoCaptureChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IVideoCaptureChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IVideoCaptureChangedEvent) getWrapped();
    }
    public static IVideoCaptureChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IVideoCaptureChangedEvent qiobj = Helper.queryInterface(nsobj, "{6215d169-25dd-4719-ab34-c908701efb58}", org.mozilla.interfaces.IVideoCaptureChangedEvent.class);
        return qiobj == null ? null : new IVideoCaptureChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IVideoCaptureChangedEvent.java"


// ##### BEGINFILE "IUSBControllerChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IUSBControllerChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IUSBControllerChangedEvent extends IEvent
{

    public IUSBControllerChangedEvent(org.mozilla.interfaces.IUSBControllerChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IUSBControllerChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IUSBControllerChangedEvent) getWrapped();
    }
    public static IUSBControllerChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IUSBControllerChangedEvent qiobj = Helper.queryInterface(nsobj, "{93BADC0C-61D9-4940-A084-E6BB29AF3D83}", org.mozilla.interfaces.IUSBControllerChangedEvent.class);
        return qiobj == null ? null : new IUSBControllerChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IUSBControllerChangedEvent.java"


// ##### BEGINFILE "IUSBDeviceStateChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IUSBDeviceStateChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IUSBDeviceStateChangedEvent extends IEvent
{

    public IUSBDeviceStateChangedEvent(org.mozilla.interfaces.IUSBDeviceStateChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IUSBDeviceStateChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IUSBDeviceStateChangedEvent) getWrapped();
    }
    public org.virtualbox_4_3.IUSBDevice getDevice()
    {
        try
        {
            org.mozilla.interfaces.IUSBDevice retVal = getTypedWrapped().getDevice();
            return (retVal != null) ? new org.virtualbox_4_3.IUSBDevice(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getAttached()
    {
        try
        {
            boolean retVal = getTypedWrapped().getAttached();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IVirtualBoxErrorInfo getError()
    {
        try
        {
            org.mozilla.interfaces.IVirtualBoxErrorInfo retVal = getTypedWrapped().getError();
            return (retVal != null) ? new org.virtualbox_4_3.IVirtualBoxErrorInfo(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IUSBDeviceStateChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IUSBDeviceStateChangedEvent qiobj = Helper.queryInterface(nsobj, "{806da61b-6679-422a-b629-51b06b0c6d93}", org.mozilla.interfaces.IUSBDeviceStateChangedEvent.class);
        return qiobj == null ? null : new IUSBDeviceStateChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IUSBDeviceStateChangedEvent.java"


// ##### BEGINFILE "ISharedFolderChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ISharedFolderChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class ISharedFolderChangedEvent extends IEvent
{

    public ISharedFolderChangedEvent(org.mozilla.interfaces.ISharedFolderChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.ISharedFolderChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.ISharedFolderChangedEvent) getWrapped();
    }
    public org.virtualbox_4_3.Scope getScope()
    {
        try
        {
            long retVal = getTypedWrapped().getScope();
            return org.virtualbox_4_3.Scope.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static ISharedFolderChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.ISharedFolderChangedEvent qiobj = Helper.queryInterface(nsobj, "{B66349B5-3534-4239-B2DE-8E1535D94C0B}", org.mozilla.interfaces.ISharedFolderChangedEvent.class);
        return qiobj == null ? null : new ISharedFolderChangedEvent(qiobj);
    }
}

// ##### ENDFILE "ISharedFolderChangedEvent.java"


// ##### BEGINFILE "IRuntimeErrorEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IRuntimeErrorEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IRuntimeErrorEvent extends IEvent
{

    public IRuntimeErrorEvent(org.mozilla.interfaces.IRuntimeErrorEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IRuntimeErrorEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IRuntimeErrorEvent) getWrapped();
    }
    public Boolean getFatal()
    {
        try
        {
            boolean retVal = getTypedWrapped().getFatal();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getId()
    {
        try
        {
            String retVal = getTypedWrapped().getId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getMessage()
    {
        try
        {
            String retVal = getTypedWrapped().getMessage();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IRuntimeErrorEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IRuntimeErrorEvent qiobj = Helper.queryInterface(nsobj, "{883DD18B-0721-4CDE-867C-1A82ABAF914C}", org.mozilla.interfaces.IRuntimeErrorEvent.class);
        return qiobj == null ? null : new IRuntimeErrorEvent(qiobj);
    }
}

// ##### ENDFILE "IRuntimeErrorEvent.java"


// ##### BEGINFILE "IEventSourceChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IEventSourceChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IEventSourceChangedEvent extends IEvent
{

    public IEventSourceChangedEvent(org.mozilla.interfaces.IEventSourceChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IEventSourceChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IEventSourceChangedEvent) getWrapped();
    }
    public org.virtualbox_4_3.IEventListener getListener()
    {
        try
        {
            org.mozilla.interfaces.IEventListener retVal = getTypedWrapped().getListener();
            return (retVal != null) ? new org.virtualbox_4_3.IEventListener(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getAdd()
    {
        try
        {
            boolean retVal = getTypedWrapped().getAdd();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IEventSourceChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IEventSourceChangedEvent qiobj = Helper.queryInterface(nsobj, "{e7932cb8-f6d4-4ab6-9cbf-558eb8959a6a}", org.mozilla.interfaces.IEventSourceChangedEvent.class);
        return qiobj == null ? null : new IEventSourceChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IEventSourceChangedEvent.java"


// ##### BEGINFILE "IExtraDataChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IExtraDataChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IExtraDataChangedEvent extends IEvent
{

    public IExtraDataChangedEvent(org.mozilla.interfaces.IExtraDataChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IExtraDataChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IExtraDataChangedEvent) getWrapped();
    }
    public String getMachineId()
    {
        try
        {
            String retVal = getTypedWrapped().getMachineId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getKey()
    {
        try
        {
            String retVal = getTypedWrapped().getKey();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getValue()
    {
        try
        {
            String retVal = getTypedWrapped().getValue();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IExtraDataChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IExtraDataChangedEvent qiobj = Helper.queryInterface(nsobj, "{024F00CE-6E0B-492A-A8D0-968472A94DC7}", org.mozilla.interfaces.IExtraDataChangedEvent.class);
        return qiobj == null ? null : new IExtraDataChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IExtraDataChangedEvent.java"


// ##### BEGINFILE "IVetoEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IVetoEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IVetoEvent extends IEvent
{

    public IVetoEvent(org.mozilla.interfaces.IVetoEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IVetoEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IVetoEvent) getWrapped();
    }
    public static IVetoEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IVetoEvent qiobj = Helper.queryInterface(nsobj, "{9a1a4130-69fe-472f-ac10-c6fa25d75007}", org.mozilla.interfaces.IVetoEvent.class);
        return qiobj == null ? null : new IVetoEvent(qiobj);
    }
    public void addVeto(String reason)
    {
        try
        {
            getTypedWrapped().addVeto(reason);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean isVetoed()
    {
        try
        {
            boolean retVal;
            retVal = getTypedWrapped().isVetoed();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public List<String> getVetos()
    {
        try
        {
            String[] retVal;
            retVal = getTypedWrapped().getVetos(null);
            return Helper.wrap(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
}

// ##### ENDFILE "IVetoEvent.java"


// ##### BEGINFILE "IExtraDataCanChangeEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IExtraDataCanChangeEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IExtraDataCanChangeEvent extends IVetoEvent
{

    public IExtraDataCanChangeEvent(org.mozilla.interfaces.IExtraDataCanChangeEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IExtraDataCanChangeEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IExtraDataCanChangeEvent) getWrapped();
    }
    public String getMachineId()
    {
        try
        {
            String retVal = getTypedWrapped().getMachineId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getKey()
    {
        try
        {
            String retVal = getTypedWrapped().getKey();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getValue()
    {
        try
        {
            String retVal = getTypedWrapped().getValue();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IExtraDataCanChangeEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IExtraDataCanChangeEvent qiobj = Helper.queryInterface(nsobj, "{245d88bd-800a-40f8-87a6-170d02249a55}", org.mozilla.interfaces.IExtraDataCanChangeEvent.class);
        return qiobj == null ? null : new IExtraDataCanChangeEvent(qiobj);
    }
}

// ##### ENDFILE "IExtraDataCanChangeEvent.java"


// ##### BEGINFILE "ICanShowWindowEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * ICanShowWindowEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class ICanShowWindowEvent extends IVetoEvent
{

    public ICanShowWindowEvent(org.mozilla.interfaces.ICanShowWindowEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.ICanShowWindowEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.ICanShowWindowEvent) getWrapped();
    }
    public static ICanShowWindowEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.ICanShowWindowEvent qiobj = Helper.queryInterface(nsobj, "{adf292b0-92c9-4a77-9d35-e058b39fe0b9}", org.mozilla.interfaces.ICanShowWindowEvent.class);
        return qiobj == null ? null : new ICanShowWindowEvent(qiobj);
    }
}

// ##### ENDFILE "ICanShowWindowEvent.java"


// ##### BEGINFILE "IShowWindowEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IShowWindowEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IShowWindowEvent extends IEvent
{

    public IShowWindowEvent(org.mozilla.interfaces.IShowWindowEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IShowWindowEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IShowWindowEvent) getWrapped();
    }
    public Long getWinId()
    {
        try
        {
            long retVal = getTypedWrapped().getWinId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public void setWinId(Long value)
    {
        try
        {
            getTypedWrapped().setWinId(value);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IShowWindowEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IShowWindowEvent qiobj = Helper.queryInterface(nsobj, "{B0A0904D-2F05-4D28-855F-488F96BAD2B2}", org.mozilla.interfaces.IShowWindowEvent.class);
        return qiobj == null ? null : new IShowWindowEvent(qiobj);
    }
}

// ##### ENDFILE "IShowWindowEvent.java"


// ##### BEGINFILE "INATRedirectEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * INATRedirectEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class INATRedirectEvent extends IMachineEvent
{

    public INATRedirectEvent(org.mozilla.interfaces.INATRedirectEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.INATRedirectEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.INATRedirectEvent) getWrapped();
    }
    public Long getSlot()
    {
        try
        {
            long retVal = getTypedWrapped().getSlot();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getRemove()
    {
        try
        {
            boolean retVal = getTypedWrapped().getRemove();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getName()
    {
        try
        {
            String retVal = getTypedWrapped().getName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.NATProtocol getProto()
    {
        try
        {
            long retVal = getTypedWrapped().getProto();
            return org.virtualbox_4_3.NATProtocol.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getHostIP()
    {
        try
        {
            String retVal = getTypedWrapped().getHostIP();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getHostPort()
    {
        try
        {
            int retVal = getTypedWrapped().getHostPort();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getGuestIP()
    {
        try
        {
            String retVal = getTypedWrapped().getGuestIP();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getGuestPort()
    {
        try
        {
            int retVal = getTypedWrapped().getGuestPort();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static INATRedirectEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.INATRedirectEvent qiobj = Helper.queryInterface(nsobj, "{24eef068-c380-4510-bc7c-19314a7352f1}", org.mozilla.interfaces.INATRedirectEvent.class);
        return qiobj == null ? null : new INATRedirectEvent(qiobj);
    }
}

// ##### ENDFILE "INATRedirectEvent.java"


// ##### BEGINFILE "IHostPCIDevicePlugEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IHostPCIDevicePlugEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IHostPCIDevicePlugEvent extends IMachineEvent
{

    public IHostPCIDevicePlugEvent(org.mozilla.interfaces.IHostPCIDevicePlugEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IHostPCIDevicePlugEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IHostPCIDevicePlugEvent) getWrapped();
    }
    public Boolean getPlugged()
    {
        try
        {
            boolean retVal = getTypedWrapped().getPlugged();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getSuccess()
    {
        try
        {
            boolean retVal = getTypedWrapped().getSuccess();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.IPCIDeviceAttachment getAttachment()
    {
        try
        {
            org.mozilla.interfaces.IPCIDeviceAttachment retVal = getTypedWrapped().getAttachment();
            return (retVal != null) ? new org.virtualbox_4_3.IPCIDeviceAttachment(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getMessage()
    {
        try
        {
            String retVal = getTypedWrapped().getMessage();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IHostPCIDevicePlugEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IHostPCIDevicePlugEvent qiobj = Helper.queryInterface(nsobj, "{a0bad6df-d612-47d3-89d4-db3992533948}", org.mozilla.interfaces.IHostPCIDevicePlugEvent.class);
        return qiobj == null ? null : new IHostPCIDevicePlugEvent(qiobj);
    }
}

// ##### ENDFILE "IHostPCIDevicePlugEvent.java"


// ##### BEGINFILE "IVBoxSVCAvailabilityChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IVBoxSVCAvailabilityChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IVBoxSVCAvailabilityChangedEvent extends IEvent
{

    public IVBoxSVCAvailabilityChangedEvent(org.mozilla.interfaces.IVBoxSVCAvailabilityChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IVBoxSVCAvailabilityChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IVBoxSVCAvailabilityChangedEvent) getWrapped();
    }
    public Boolean getAvailable()
    {
        try
        {
            boolean retVal = getTypedWrapped().getAvailable();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IVBoxSVCAvailabilityChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IVBoxSVCAvailabilityChangedEvent qiobj = Helper.queryInterface(nsobj, "{97c78fcd-d4fc-485f-8613-5af88bfcfcdc}", org.mozilla.interfaces.IVBoxSVCAvailabilityChangedEvent.class);
        return qiobj == null ? null : new IVBoxSVCAvailabilityChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IVBoxSVCAvailabilityChangedEvent.java"


// ##### BEGINFILE "IBandwidthGroupChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IBandwidthGroupChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IBandwidthGroupChangedEvent extends IEvent
{

    public IBandwidthGroupChangedEvent(org.mozilla.interfaces.IBandwidthGroupChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IBandwidthGroupChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IBandwidthGroupChangedEvent) getWrapped();
    }
    public org.virtualbox_4_3.IBandwidthGroup getBandwidthGroup()
    {
        try
        {
            org.mozilla.interfaces.IBandwidthGroup retVal = getTypedWrapped().getBandwidthGroup();
            return (retVal != null) ? new org.virtualbox_4_3.IBandwidthGroup(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IBandwidthGroupChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IBandwidthGroupChangedEvent qiobj = Helper.queryInterface(nsobj, "{334df94a-7556-4cbc-8c04-043096b02d82}", org.mozilla.interfaces.IBandwidthGroupChangedEvent.class);
        return qiobj == null ? null : new IBandwidthGroupChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IBandwidthGroupChangedEvent.java"


// ##### BEGINFILE "IGuestMonitorChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestMonitorChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestMonitorChangedEvent extends IEvent
{

    public IGuestMonitorChangedEvent(org.mozilla.interfaces.IGuestMonitorChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestMonitorChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestMonitorChangedEvent) getWrapped();
    }
    public org.virtualbox_4_3.GuestMonitorChangedEventType getChangeType()
    {
        try
        {
            long retVal = getTypedWrapped().getChangeType();
            return org.virtualbox_4_3.GuestMonitorChangedEventType.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getScreenId()
    {
        try
        {
            long retVal = getTypedWrapped().getScreenId();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getOriginX()
    {
        try
        {
            long retVal = getTypedWrapped().getOriginX();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getOriginY()
    {
        try
        {
            long retVal = getTypedWrapped().getOriginY();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getWidth()
    {
        try
        {
            long retVal = getTypedWrapped().getWidth();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Long getHeight()
    {
        try
        {
            long retVal = getTypedWrapped().getHeight();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IGuestMonitorChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestMonitorChangedEvent qiobj = Helper.queryInterface(nsobj, "{0f7b8a22-c71f-4a36-8e5f-a77d01d76090}", org.mozilla.interfaces.IGuestMonitorChangedEvent.class);
        return qiobj == null ? null : new IGuestMonitorChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IGuestMonitorChangedEvent.java"


// ##### BEGINFILE "IGuestUserStateChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IGuestUserStateChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IGuestUserStateChangedEvent extends IEvent
{

    public IGuestUserStateChangedEvent(org.mozilla.interfaces.IGuestUserStateChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IGuestUserStateChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IGuestUserStateChangedEvent) getWrapped();
    }
    public String getName()
    {
        try
        {
            String retVal = getTypedWrapped().getName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getDomain()
    {
        try
        {
            String retVal = getTypedWrapped().getDomain();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.GuestUserState getState()
    {
        try
        {
            long retVal = getTypedWrapped().getState();
            return org.virtualbox_4_3.GuestUserState.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getStateDetails()
    {
        try
        {
            String retVal = getTypedWrapped().getStateDetails();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IGuestUserStateChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IGuestUserStateChangedEvent qiobj = Helper.queryInterface(nsobj, "{39b4e759-1ec0-4c0f-857f-fbe2a737a256}", org.mozilla.interfaces.IGuestUserStateChangedEvent.class);
        return qiobj == null ? null : new IGuestUserStateChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IGuestUserStateChangedEvent.java"


// ##### BEGINFILE "IStorageDeviceChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IStorageDeviceChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IStorageDeviceChangedEvent extends IEvent
{

    public IStorageDeviceChangedEvent(org.mozilla.interfaces.IStorageDeviceChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IStorageDeviceChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IStorageDeviceChangedEvent) getWrapped();
    }
    public org.virtualbox_4_3.IMediumAttachment getStorageDevice()
    {
        try
        {
            org.mozilla.interfaces.IMediumAttachment retVal = getTypedWrapped().getStorageDevice();
            return (retVal != null) ? new org.virtualbox_4_3.IMediumAttachment(retVal) : null;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getRemoved()
    {
        try
        {
            boolean retVal = getTypedWrapped().getRemoved();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getSilent()
    {
        try
        {
            boolean retVal = getTypedWrapped().getSilent();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static IStorageDeviceChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IStorageDeviceChangedEvent qiobj = Helper.queryInterface(nsobj, "{232e9151-ae84-4b8e-b0f3-5c20c35caac9}", org.mozilla.interfaces.IStorageDeviceChangedEvent.class);
        return qiobj == null ? null : new IStorageDeviceChangedEvent(qiobj);
    }
}

// ##### ENDFILE "IStorageDeviceChangedEvent.java"


// ##### BEGINFILE "INATNetworkChangedEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * INATNetworkChangedEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class INATNetworkChangedEvent extends IEvent
{

    public INATNetworkChangedEvent(org.mozilla.interfaces.INATNetworkChangedEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.INATNetworkChangedEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.INATNetworkChangedEvent) getWrapped();
    }
    public String getNetworkName()
    {
        try
        {
            String retVal = getTypedWrapped().getNetworkName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static INATNetworkChangedEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.INATNetworkChangedEvent qiobj = Helper.queryInterface(nsobj, "{101ae042-1a29-4a19-92cf-02285773f3b5}", org.mozilla.interfaces.INATNetworkChangedEvent.class);
        return qiobj == null ? null : new INATNetworkChangedEvent(qiobj);
    }
}

// ##### ENDFILE "INATNetworkChangedEvent.java"


// ##### BEGINFILE "INATNetworkStartStopEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * INATNetworkStartStopEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class INATNetworkStartStopEvent extends INATNetworkChangedEvent
{

    public INATNetworkStartStopEvent(org.mozilla.interfaces.INATNetworkStartStopEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.INATNetworkStartStopEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.INATNetworkStartStopEvent) getWrapped();
    }
    public Boolean getStartEvent()
    {
        try
        {
            boolean retVal = getTypedWrapped().getStartEvent();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static INATNetworkStartStopEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.INATNetworkStartStopEvent qiobj = Helper.queryInterface(nsobj, "{269d8f6b-fa1e-4cee-91c7-6d8496bea3c1}", org.mozilla.interfaces.INATNetworkStartStopEvent.class);
        return qiobj == null ? null : new INATNetworkStartStopEvent(qiobj);
    }
}

// ##### ENDFILE "INATNetworkStartStopEvent.java"


// ##### BEGINFILE "INATNetworkAlterEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * INATNetworkAlterEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class INATNetworkAlterEvent extends INATNetworkChangedEvent
{

    public INATNetworkAlterEvent(org.mozilla.interfaces.INATNetworkAlterEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.INATNetworkAlterEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.INATNetworkAlterEvent) getWrapped();
    }
    public static INATNetworkAlterEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.INATNetworkAlterEvent qiobj = Helper.queryInterface(nsobj, "{3f5a0822-163a-43b1-ad16-8d58b0ef6e75}", org.mozilla.interfaces.INATNetworkAlterEvent.class);
        return qiobj == null ? null : new INATNetworkAlterEvent(qiobj);
    }
}

// ##### ENDFILE "INATNetworkAlterEvent.java"


// ##### BEGINFILE "INATNetworkCreationDeletionEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * INATNetworkCreationDeletionEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class INATNetworkCreationDeletionEvent extends INATNetworkAlterEvent
{

    public INATNetworkCreationDeletionEvent(org.mozilla.interfaces.INATNetworkCreationDeletionEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.INATNetworkCreationDeletionEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.INATNetworkCreationDeletionEvent) getWrapped();
    }
    public Boolean getCreationEvent()
    {
        try
        {
            boolean retVal = getTypedWrapped().getCreationEvent();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static INATNetworkCreationDeletionEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.INATNetworkCreationDeletionEvent qiobj = Helper.queryInterface(nsobj, "{8d984a7e-b855-40b8-ab0c-44d3515b4528}", org.mozilla.interfaces.INATNetworkCreationDeletionEvent.class);
        return qiobj == null ? null : new INATNetworkCreationDeletionEvent(qiobj);
    }
}

// ##### ENDFILE "INATNetworkCreationDeletionEvent.java"


// ##### BEGINFILE "INATNetworkSettingEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * INATNetworkSettingEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class INATNetworkSettingEvent extends INATNetworkAlterEvent
{

    public INATNetworkSettingEvent(org.mozilla.interfaces.INATNetworkSettingEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.INATNetworkSettingEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.INATNetworkSettingEvent) getWrapped();
    }
    public Boolean getEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getNetwork()
    {
        try
        {
            String retVal = getTypedWrapped().getNetwork();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getGateway()
    {
        try
        {
            String retVal = getTypedWrapped().getGateway();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getAdvertiseDefaultIPv6RouteEnabled()
    {
        try
        {
            boolean retVal = getTypedWrapped().getAdvertiseDefaultIPv6RouteEnabled();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getNeedDhcpServer()
    {
        try
        {
            boolean retVal = getTypedWrapped().getNeedDhcpServer();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static INATNetworkSettingEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.INATNetworkSettingEvent qiobj = Helper.queryInterface(nsobj, "{9db3a9e6-7f29-4aae-a627-5a282c83092c}", org.mozilla.interfaces.INATNetworkSettingEvent.class);
        return qiobj == null ? null : new INATNetworkSettingEvent(qiobj);
    }
}

// ##### ENDFILE "INATNetworkSettingEvent.java"


// ##### BEGINFILE "INATNetworkPortForwardEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * INATNetworkPortForwardEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class INATNetworkPortForwardEvent extends INATNetworkAlterEvent
{

    public INATNetworkPortForwardEvent(org.mozilla.interfaces.INATNetworkPortForwardEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.INATNetworkPortForwardEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.INATNetworkPortForwardEvent) getWrapped();
    }
    public Boolean getCreate()
    {
        try
        {
            boolean retVal = getTypedWrapped().getCreate();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Boolean getIpv6()
    {
        try
        {
            boolean retVal = getTypedWrapped().getIpv6();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getName()
    {
        try
        {
            String retVal = getTypedWrapped().getName();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public org.virtualbox_4_3.NATProtocol getProto()
    {
        try
        {
            long retVal = getTypedWrapped().getProto();
            return org.virtualbox_4_3.NATProtocol.fromValue(retVal);
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getHostIp()
    {
        try
        {
            String retVal = getTypedWrapped().getHostIp();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getHostPort()
    {
        try
        {
            int retVal = getTypedWrapped().getHostPort();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public String getGuestIp()
    {
        try
        {
            String retVal = getTypedWrapped().getGuestIp();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public Integer getGuestPort()
    {
        try
        {
            int retVal = getTypedWrapped().getGuestPort();
            return retVal;
        }
        catch (org.mozilla.xpcom.XPCOMException e)
        {
            throw new VBoxException(e.getMessage(), e);
        }
    }
    public static INATNetworkPortForwardEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.INATNetworkPortForwardEvent qiobj = Helper.queryInterface(nsobj, "{2514881b-23d0-430a-a7ff-7ed7f05534bc}", org.mozilla.interfaces.INATNetworkPortForwardEvent.class);
        return qiobj == null ? null : new INATNetworkPortForwardEvent(qiobj);
    }
}

// ##### ENDFILE "INATNetworkPortForwardEvent.java"


// ##### BEGINFILE "IHostNameResolutionConfigurationChangeEvent.java"

/*
 * Copyright (C) 2010-2014 Oracle Corporation
 *
 * This file is part of the VirtualBox SDK, as available from
 * http://www.virtualbox.org.  This library is free software; you can
 * redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation, in version 2.1
 * as it comes in the "COPYING.LIB" file of the VirtualBox SDK distribution.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * IHostNameResolutionConfigurationChangeEvent.java
 *
 * DO NOT EDIT! This is a generated file.
 * Generated from: src/VBox/Main/idl/VirtualBox.xidl (VirtualBox's interface definitions in XML)
 * Generator: src/VBox/Main/glue/glue-java.xsl
 */

package org.virtualbox_4_3;

import org.virtualbox_4_3.xpcom.*;
import org.mozilla.interfaces.*;
import java.util.List;

public class IHostNameResolutionConfigurationChangeEvent extends IEvent
{

    public IHostNameResolutionConfigurationChangeEvent(org.mozilla.interfaces.IHostNameResolutionConfigurationChangeEvent wrapped)
    {
        super(wrapped);
    }
    public org.mozilla.interfaces.IHostNameResolutionConfigurationChangeEvent getTypedWrapped()
    {
        return (org.mozilla.interfaces.IHostNameResolutionConfigurationChangeEvent) getWrapped();
    }
    public static IHostNameResolutionConfigurationChangeEvent queryInterface(IUnknown obj)
    {
        nsISupports nsobj = obj != null ? (nsISupports)obj.getWrapped() : null;
        if (nsobj == null) return null;
        org.mozilla.interfaces.IHostNameResolutionConfigurationChangeEvent qiobj = Helper.queryInterface(nsobj, "{f9b9e1cf-cb63-47a1-84fb-02c4894b89a9}", org.mozilla.interfaces.IHostNameResolutionConfigurationChangeEvent.class);
        return qiobj == null ? null : new IHostNameResolutionConfigurationChangeEvent(qiobj);
    }
}

// ##### ENDFILE "IHostNameResolutionConfigurationChangeEvent.java"

