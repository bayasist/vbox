    CHECK_OFF(CPUM, 0x00000000c, CPUFeatures.ecx);
    CHECK_OFF(CPUM, 0x000000008, CPUFeatures.edx);
    CHECK_OFF(CPUM, 0x000000014, CPUFeaturesExt.ecx);
    CHECK_OFF(CPUM, 0x000000010, CPUFeaturesExt.edx);
    CHECK_OFF(CPUM, 0x000000018, CR4.AndMask);
    CHECK_OFF(CPUM, 0x00000001c, CR4.OrMask);
    CHECK_OFF(CPUM, 0x0000001a8, GuestCpuIdDef);
    CHECK_OFF(CPUM, 0x000000210, GuestFeatures);
    CHECK_OFF(CPUM, 0x0000001b8, GuestInfo);
    CHECK_OFF(CPUM, 0x000000230, HostFeatures);
    CHECK_OFF(CPUM, 0x000000128, aGuestCpuIdCentaur);
    CHECK_OFF(CPUM, 0x000000088, aGuestCpuIdExt);
    CHECK_OFF(CPUM, 0x000000168, aGuestCpuIdHyper);
    CHECK_OFF(CPUM, 0x000000028, aGuestCpuIdStd);
    CHECK_OFF(CPUM, 0x000000022, abPadding);
    CHECK_OFF(CPUM, 0x000000270, cMsrReads);
    CHECK_OFF(CPUM, 0x000000278, cMsrReadsRaiseGp);
    CHECK_OFF(CPUM, 0x000000280, cMsrReadsUnknown);
    CHECK_OFF(CPUM, 0x000000250, cMsrWrites);
    CHECK_OFF(CPUM, 0x000000260, cMsrWritesRaiseGp);
    CHECK_OFF(CPUM, 0x000000258, cMsrWritesToIgnoredBits);
    CHECK_OFF(CPUM, 0x000000268, cMsrWritesUnknown);
    CHECK_OFF(CPUM, 0x000000004, fHostUseFlags);
    CHECK_OFF(CPUM, 0x000000021, fPendingRestore);
    CHECK_OFF(CPUM, 0x000000000, offCPUMCPU0);
    CHECK_OFF(CPUM, 0x000000020, u8PortableCpuIdLevel);
    CHECK_OFF(CPUMCPU, 0x000000b50, Guest.SysEnter.cs);
    CHECK_OFF(CPUMCPU, 0x000000b58, Guest.SysEnter.eip);
    CHECK_OFF(CPUMCPU, 0x000000b60, Guest.SysEnter.esp);
    CHECK_OFF(CPUMCPU, 0x000000aa0, Guest.cr0);
    CHECK_OFF(CPUMCPU, 0x000000aa8, Guest.cr2);
    CHECK_OFF(CPUMCPU, 0x000000ab0, Guest.cr3);
    CHECK_OFF(CPUMCPU, 0x000000ab8, Guest.cr4);
    CHECK_OFF(CPUMCPU, 0x000000a2c, Guest.cs.Attr);
    CHECK_OFF(CPUMCPU, 0x000000a1a, Guest.cs.PaddingSel);
    CHECK_OFF(CPUMCPU, 0x000000a18, Guest.cs.Sel);
    CHECK_OFF(CPUMCPU, 0x000000a1c, Guest.cs.ValidSel);
    CHECK_OFF(CPUMCPU, 0x000000a1e, Guest.cs.fFlags);
    CHECK_OFF(CPUMCPU, 0x000000a28, Guest.cs.u32Limit);
    CHECK_OFF(CPUMCPU, 0x000000a20, Guest.cs.u64Base);
    CHECK_OFF(CPUMCPU, 0x000000ac0, Guest.dr);
    CHECK_OFF(CPUMCPU, 0x000000a5c, Guest.ds.Attr);
    CHECK_OFF(CPUMCPU, 0x000000a4a, Guest.ds.PaddingSel);
    CHECK_OFF(CPUMCPU, 0x000000a48, Guest.ds.Sel);
    CHECK_OFF(CPUMCPU, 0x000000a4c, Guest.ds.ValidSel);
    CHECK_OFF(CPUMCPU, 0x000000a4e, Guest.ds.fFlags);
    CHECK_OFF(CPUMCPU, 0x000000a58, Guest.ds.u32Limit);
    CHECK_OFF(CPUMCPU, 0x000000a50, Guest.ds.u64Base);
    CHECK_OFF(CPUMCPU, 0x000000980, Guest.eax);
    CHECK_OFF(CPUMCPU, 0x0000009a8, Guest.ebp);
    CHECK_OFF(CPUMCPU, 0x000000998, Guest.ebx);
    CHECK_OFF(CPUMCPU, 0x000000988, Guest.ecx);
    CHECK_OFF(CPUMCPU, 0x0000009b8, Guest.edi);
    CHECK_OFF(CPUMCPU, 0x000000990, Guest.edx);
    CHECK_OFF(CPUMCPU, 0x000000a98, Guest.eflags);
    CHECK_OFF(CPUMCPU, 0x000000a90, Guest.eip);
    CHECK_OFF(CPUMCPU, 0x000000a14, Guest.es.Attr);
    CHECK_OFF(CPUMCPU, 0x000000a02, Guest.es.PaddingSel);
    CHECK_OFF(CPUMCPU, 0x000000a00, Guest.es.Sel);
    CHECK_OFF(CPUMCPU, 0x000000a04, Guest.es.ValidSel);
    CHECK_OFF(CPUMCPU, 0x000000a06, Guest.es.fFlags);
    CHECK_OFF(CPUMCPU, 0x000000a10, Guest.es.u32Limit);
    CHECK_OFF(CPUMCPU, 0x000000a08, Guest.es.u64Base);
    CHECK_OFF(CPUMCPU, 0x0000009b0, Guest.esi);
    CHECK_OFF(CPUMCPU, 0x0000009a0, Guest.esp);
    CHECK_OFF(CPUMCPU, 0x000000780, Guest.fpu);
    CHECK_OFF(CPUMCPU, 0x000000a74, Guest.fs.Attr);
    CHECK_OFF(CPUMCPU, 0x000000a62, Guest.fs.PaddingSel);
    CHECK_OFF(CPUMCPU, 0x000000a60, Guest.fs.Sel);
    CHECK_OFF(CPUMCPU, 0x000000a64, Guest.fs.ValidSel);
    CHECK_OFF(CPUMCPU, 0x000000a66, Guest.fs.fFlags);
    CHECK_OFF(CPUMCPU, 0x000000a70, Guest.fs.u32Limit);
    CHECK_OFF(CPUMCPU, 0x000000a68, Guest.fs.u64Base);
    CHECK_OFF(CPUMCPU, 0x000000b06, Guest.gdtr);
    CHECK_OFF(CPUMCPU, 0x000000b06, Guest.gdtr.cbGdt);
    CHECK_OFF(CPUMCPU, 0x000000b08, Guest.gdtr.pGdt);
    CHECK_OFF(CPUMCPU, 0x000000b00, Guest.gdtrPadding);
    CHECK_OFF(CPUMCPU, 0x000000a8c, Guest.gs.Attr);
    CHECK_OFF(CPUMCPU, 0x000000a7a, Guest.gs.PaddingSel);
    CHECK_OFF(CPUMCPU, 0x000000a78, Guest.gs.Sel);
    CHECK_OFF(CPUMCPU, 0x000000a7c, Guest.gs.ValidSel);
    CHECK_OFF(CPUMCPU, 0x000000a7e, Guest.gs.fFlags);
    CHECK_OFF(CPUMCPU, 0x000000a88, Guest.gs.u32Limit);
    CHECK_OFF(CPUMCPU, 0x000000a80, Guest.gs.u64Base);
    CHECK_OFF(CPUMCPU, 0x000000b16, Guest.idtr);
    CHECK_OFF(CPUMCPU, 0x000000b16, Guest.idtr.cbIdt);
    CHECK_OFF(CPUMCPU, 0x000000b18, Guest.idtr.pIdt);
    CHECK_OFF(CPUMCPU, 0x000000b10, Guest.idtrPadding);
    CHECK_OFF(CPUMCPU, 0x000000b34, Guest.ldtr.Attr);
    CHECK_OFF(CPUMCPU, 0x000000b22, Guest.ldtr.PaddingSel);
    CHECK_OFF(CPUMCPU, 0x000000b20, Guest.ldtr.Sel);
    CHECK_OFF(CPUMCPU, 0x000000b24, Guest.ldtr.ValidSel);
    CHECK_OFF(CPUMCPU, 0x000000b26, Guest.ldtr.fFlags);
    CHECK_OFF(CPUMCPU, 0x000000b30, Guest.ldtr.u32Limit);
    CHECK_OFF(CPUMCPU, 0x000000b28, Guest.ldtr.u64Base);
    CHECK_OFF(CPUMCPU, 0x000000ba0, Guest.msrApicBase);
    CHECK_OFF(CPUMCPU, 0x000000b88, Guest.msrCSTAR);
    CHECK_OFF(CPUMCPU, 0x000000b68, Guest.msrEFER);
    CHECK_OFF(CPUMCPU, 0x000000b98, Guest.msrKERNELGSBASE);
    CHECK_OFF(CPUMCPU, 0x000000b80, Guest.msrLSTAR);
    CHECK_OFF(CPUMCPU, 0x000000b78, Guest.msrPAT);
    CHECK_OFF(CPUMCPU, 0x000000b90, Guest.msrSFMASK);
    CHECK_OFF(CPUMCPU, 0x000000b70, Guest.msrSTAR);
    CHECK_OFF(CPUMCPU, 0x0000009d0, Guest.r10);
    CHECK_OFF(CPUMCPU, 0x0000009d8, Guest.r11);
    CHECK_OFF(CPUMCPU, 0x0000009e0, Guest.r12);
    CHECK_OFF(CPUMCPU, 0x0000009e8, Guest.r13);
    CHECK_OFF(CPUMCPU, 0x0000009f0, Guest.r14);
    CHECK_OFF(CPUMCPU, 0x0000009f8, Guest.r15);
    CHECK_OFF(CPUMCPU, 0x0000009c0, Guest.r8);
    CHECK_OFF(CPUMCPU, 0x0000009c8, Guest.r9);
    CHECK_OFF(CPUMCPU, 0x000000a44, Guest.ss.Attr);
    CHECK_OFF(CPUMCPU, 0x000000a32, Guest.ss.PaddingSel);
    CHECK_OFF(CPUMCPU, 0x000000a30, Guest.ss.Sel);
    CHECK_OFF(CPUMCPU, 0x000000a34, Guest.ss.ValidSel);
    CHECK_OFF(CPUMCPU, 0x000000a36, Guest.ss.fFlags);
    CHECK_OFF(CPUMCPU, 0x000000a40, Guest.ss.u32Limit);
    CHECK_OFF(CPUMCPU, 0x000000a38, Guest.ss.u64Base);
    CHECK_OFF(CPUMCPU, 0x000000b4c, Guest.tr.Attr);
    CHECK_OFF(CPUMCPU, 0x000000b3a, Guest.tr.PaddingSel);
    CHECK_OFF(CPUMCPU, 0x000000b38, Guest.tr.Sel);
    CHECK_OFF(CPUMCPU, 0x000000b3c, Guest.tr.ValidSel);
    CHECK_OFF(CPUMCPU, 0x000000b3e, Guest.tr.fFlags);
    CHECK_OFF(CPUMCPU, 0x000000b48, Guest.tr.u32Limit);
    CHECK_OFF(CPUMCPU, 0x000000b40, Guest.tr.u64Base);
    CHECK_OFF(CPUMCPU, 0x000000bc0, GuestMsrs.au64);
    CHECK_OFF(CPUMCPU, 0x000000740, Host.FSbase);
    CHECK_OFF(CPUMCPU, 0x000000748, Host.GSbase);
    CHECK_OFF(CPUMCPU, 0x000000728, Host.SysEnter.cs);
    CHECK_OFF(CPUMCPU, 0x000000730, Host.SysEnter.eip);
    CHECK_OFF(CPUMCPU, 0x000000738, Host.SysEnter.esp);
    CHECK_OFF(CPUMCPU, 0x0000006b8, Host.cr0);
    CHECK_OFF(CPUMCPU, 0x0000006c0, Host.cr3);
    CHECK_OFF(CPUMCPU, 0x0000006c8, Host.cr4);
    CHECK_OFF(CPUMCPU, 0x0000006d0, Host.cr8);
    CHECK_OFF(CPUMCPU, 0x0000006b4, Host.cs);
    CHECK_OFF(CPUMCPU, 0x0000006b6, Host.csPadding);
    CHECK_OFF(CPUMCPU, 0x0000006d8, Host.dr0);
    CHECK_OFF(CPUMCPU, 0x0000006e0, Host.dr1);
    CHECK_OFF(CPUMCPU, 0x0000006e8, Host.dr2);
    CHECK_OFF(CPUMCPU, 0x0000006f0, Host.dr3);
    CHECK_OFF(CPUMCPU, 0x0000006f8, Host.dr6);
    CHECK_OFF(CPUMCPU, 0x000000700, Host.dr7);
    CHECK_OFF(CPUMCPU, 0x0000006b0, Host.ds);
    CHECK_OFF(CPUMCPU, 0x0000006b2, Host.dsPadding);
    CHECK_OFF(CPUMCPU, 0x000000750, Host.efer);
    CHECK_OFF(CPUMCPU, 0x0000006ac, Host.es);
    CHECK_OFF(CPUMCPU, 0x0000006ae, Host.esPadding);
    CHECK_OFF(CPUMCPU, 0x000000440, Host.fpu);
    CHECK_OFF(CPUMCPU, 0x0000006a8, Host.fs);
    CHECK_OFF(CPUMCPU, 0x0000006aa, Host.fsPadding);
    CHECK_OFF(CPUMCPU, 0x000000708, Host.gdtr);
    CHECK_OFF(CPUMCPU, 0x000000712, Host.gdtrPadding);
    CHECK_OFF(CPUMCPU, 0x0000006a4, Host.gs);
    CHECK_OFF(CPUMCPU, 0x0000006a6, Host.gsPadding);
    CHECK_OFF(CPUMCPU, 0x000000714, Host.idtr);
    CHECK_OFF(CPUMCPU, 0x00000071e, Host.idtrPadding);
    CHECK_OFF(CPUMCPU, 0x000000720, Host.ldtr);
    CHECK_OFF(CPUMCPU, 0x000000722, Host.ldtrPadding);
    CHECK_OFF(CPUMCPU, 0x000000668, Host.r10);
    CHECK_OFF(CPUMCPU, 0x000000670, Host.r11);
    CHECK_OFF(CPUMCPU, 0x000000678, Host.r12);
    CHECK_OFF(CPUMCPU, 0x000000680, Host.r13);
    CHECK_OFF(CPUMCPU, 0x000000688, Host.r14);
    CHECK_OFF(CPUMCPU, 0x000000690, Host.r15);
    CHECK_OFF(CPUMCPU, 0x000000658, Host.rbp);
    CHECK_OFF(CPUMCPU, 0x000000640, Host.rbx);
    CHECK_OFF(CPUMCPU, 0x000000648, Host.rdi);
    CHECK_OFF(CPUMCPU, 0x000000698, Host.rflags);
    CHECK_OFF(CPUMCPU, 0x000000650, Host.rsi);
    CHECK_OFF(CPUMCPU, 0x000000660, Host.rsp);
    CHECK_OFF(CPUMCPU, 0x0000006a0, Host.ss);
    CHECK_OFF(CPUMCPU, 0x0000006a2, Host.ssPadding);
    CHECK_OFF(CPUMCPU, 0x000000724, Host.tr);
    CHECK_OFF(CPUMCPU, 0x000000726, Host.trPadding);
    CHECK_OFF(CPUMCPU, 0x0000003d0, Hyper.SysEnter.cs);
    CHECK_OFF(CPUMCPU, 0x0000003d8, Hyper.SysEnter.eip);
    CHECK_OFF(CPUMCPU, 0x0000003e0, Hyper.SysEnter.esp);
    CHECK_OFF(CPUMCPU, 0x000000320, Hyper.cr0);
    CHECK_OFF(CPUMCPU, 0x000000328, Hyper.cr2);
    CHECK_OFF(CPUMCPU, 0x000000330, Hyper.cr3);
    CHECK_OFF(CPUMCPU, 0x000000338, Hyper.cr4);
    CHECK_OFF(CPUMCPU, 0x0000002ac, Hyper.cs.Attr);
    CHECK_OFF(CPUMCPU, 0x00000029a, Hyper.cs.PaddingSel);
    CHECK_OFF(CPUMCPU, 0x000000298, Hyper.cs.Sel);
    CHECK_OFF(CPUMCPU, 0x00000029c, Hyper.cs.ValidSel);
    CHECK_OFF(CPUMCPU, 0x00000029e, Hyper.cs.fFlags);
    CHECK_OFF(CPUMCPU, 0x0000002a8, Hyper.cs.u32Limit);
    CHECK_OFF(CPUMCPU, 0x0000002a0, Hyper.cs.u64Base);
    CHECK_OFF(CPUMCPU, 0x000000340, Hyper.dr);
    CHECK_OFF(CPUMCPU, 0x0000002dc, Hyper.ds.Attr);
    CHECK_OFF(CPUMCPU, 0x0000002ca, Hyper.ds.PaddingSel);
    CHECK_OFF(CPUMCPU, 0x0000002c8, Hyper.ds.Sel);
    CHECK_OFF(CPUMCPU, 0x0000002cc, Hyper.ds.ValidSel);
    CHECK_OFF(CPUMCPU, 0x0000002ce, Hyper.ds.fFlags);
    CHECK_OFF(CPUMCPU, 0x0000002d8, Hyper.ds.u32Limit);
    CHECK_OFF(CPUMCPU, 0x0000002d0, Hyper.ds.u64Base);
    CHECK_OFF(CPUMCPU, 0x000000200, Hyper.eax);
    CHECK_OFF(CPUMCPU, 0x000000228, Hyper.ebp);
    CHECK_OFF(CPUMCPU, 0x000000218, Hyper.ebx);
    CHECK_OFF(CPUMCPU, 0x000000208, Hyper.ecx);
    CHECK_OFF(CPUMCPU, 0x000000238, Hyper.edi);
    CHECK_OFF(CPUMCPU, 0x000000210, Hyper.edx);
    CHECK_OFF(CPUMCPU, 0x000000318, Hyper.eflags);
    CHECK_OFF(CPUMCPU, 0x000000310, Hyper.eip);
    CHECK_OFF(CPUMCPU, 0x000000294, Hyper.es.Attr);
    CHECK_OFF(CPUMCPU, 0x000000282, Hyper.es.PaddingSel);
    CHECK_OFF(CPUMCPU, 0x000000280, Hyper.es.Sel);
    CHECK_OFF(CPUMCPU, 0x000000284, Hyper.es.ValidSel);
    CHECK_OFF(CPUMCPU, 0x000000286, Hyper.es.fFlags);
    CHECK_OFF(CPUMCPU, 0x000000290, Hyper.es.u32Limit);
    CHECK_OFF(CPUMCPU, 0x000000288, Hyper.es.u64Base);
    CHECK_OFF(CPUMCPU, 0x000000230, Hyper.esi);
    CHECK_OFF(CPUMCPU, 0x000000220, Hyper.esp);
    CHECK_OFF(CPUMCPU, 0x000000000, Hyper.fpu);
    CHECK_OFF(CPUMCPU, 0x0000002f4, Hyper.fs.Attr);
    CHECK_OFF(CPUMCPU, 0x0000002e2, Hyper.fs.PaddingSel);
    CHECK_OFF(CPUMCPU, 0x0000002e0, Hyper.fs.Sel);
    CHECK_OFF(CPUMCPU, 0x0000002e4, Hyper.fs.ValidSel);
    CHECK_OFF(CPUMCPU, 0x0000002e6, Hyper.fs.fFlags);
    CHECK_OFF(CPUMCPU, 0x0000002f0, Hyper.fs.u32Limit);
    CHECK_OFF(CPUMCPU, 0x0000002e8, Hyper.fs.u64Base);
    CHECK_OFF(CPUMCPU, 0x000000386, Hyper.gdtr);
    CHECK_OFF(CPUMCPU, 0x000000386, Hyper.gdtr.cbGdt);
    CHECK_OFF(CPUMCPU, 0x000000388, Hyper.gdtr.pGdt);
    CHECK_OFF(CPUMCPU, 0x000000380, Hyper.gdtrPadding);
    CHECK_OFF(CPUMCPU, 0x00000030c, Hyper.gs.Attr);
    CHECK_OFF(CPUMCPU, 0x0000002fa, Hyper.gs.PaddingSel);
    CHECK_OFF(CPUMCPU, 0x0000002f8, Hyper.gs.Sel);
    CHECK_OFF(CPUMCPU, 0x0000002fc, Hyper.gs.ValidSel);
    CHECK_OFF(CPUMCPU, 0x0000002fe, Hyper.gs.fFlags);
    CHECK_OFF(CPUMCPU, 0x000000308, Hyper.gs.u32Limit);
    CHECK_OFF(CPUMCPU, 0x000000300, Hyper.gs.u64Base);
    CHECK_OFF(CPUMCPU, 0x000000396, Hyper.idtr);
    CHECK_OFF(CPUMCPU, 0x000000396, Hyper.idtr.cbIdt);
    CHECK_OFF(CPUMCPU, 0x000000398, Hyper.idtr.pIdt);
    CHECK_OFF(CPUMCPU, 0x000000390, Hyper.idtrPadding);
    CHECK_OFF(CPUMCPU, 0x0000003b4, Hyper.ldtr.Attr);
    CHECK_OFF(CPUMCPU, 0x0000003a2, Hyper.ldtr.PaddingSel);
    CHECK_OFF(CPUMCPU, 0x0000003a0, Hyper.ldtr.Sel);
    CHECK_OFF(CPUMCPU, 0x0000003a4, Hyper.ldtr.ValidSel);
    CHECK_OFF(CPUMCPU, 0x0000003a6, Hyper.ldtr.fFlags);
    CHECK_OFF(CPUMCPU, 0x0000003b0, Hyper.ldtr.u32Limit);
    CHECK_OFF(CPUMCPU, 0x0000003a8, Hyper.ldtr.u64Base);
    CHECK_OFF(CPUMCPU, 0x000000420, Hyper.msrApicBase);
    CHECK_OFF(CPUMCPU, 0x000000408, Hyper.msrCSTAR);
    CHECK_OFF(CPUMCPU, 0x0000003e8, Hyper.msrEFER);
    CHECK_OFF(CPUMCPU, 0x000000418, Hyper.msrKERNELGSBASE);
    CHECK_OFF(CPUMCPU, 0x000000400, Hyper.msrLSTAR);
    CHECK_OFF(CPUMCPU, 0x0000003f8, Hyper.msrPAT);
    CHECK_OFF(CPUMCPU, 0x000000410, Hyper.msrSFMASK);
    CHECK_OFF(CPUMCPU, 0x0000003f0, Hyper.msrSTAR);
    CHECK_OFF(CPUMCPU, 0x000000250, Hyper.r10);
    CHECK_OFF(CPUMCPU, 0x000000258, Hyper.r11);
    CHECK_OFF(CPUMCPU, 0x000000260, Hyper.r12);
    CHECK_OFF(CPUMCPU, 0x000000268, Hyper.r13);
    CHECK_OFF(CPUMCPU, 0x000000270, Hyper.r14);
    CHECK_OFF(CPUMCPU, 0x000000278, Hyper.r15);
    CHECK_OFF(CPUMCPU, 0x000000240, Hyper.r8);
    CHECK_OFF(CPUMCPU, 0x000000248, Hyper.r9);
    CHECK_OFF(CPUMCPU, 0x0000002c4, Hyper.ss.Attr);
    CHECK_OFF(CPUMCPU, 0x0000002b2, Hyper.ss.PaddingSel);
    CHECK_OFF(CPUMCPU, 0x0000002b0, Hyper.ss.Sel);
    CHECK_OFF(CPUMCPU, 0x0000002b4, Hyper.ss.ValidSel);
    CHECK_OFF(CPUMCPU, 0x0000002b6, Hyper.ss.fFlags);
    CHECK_OFF(CPUMCPU, 0x0000002c0, Hyper.ss.u32Limit);
    CHECK_OFF(CPUMCPU, 0x0000002b8, Hyper.ss.u64Base);
    CHECK_OFF(CPUMCPU, 0x0000003cc, Hyper.tr.Attr);
    CHECK_OFF(CPUMCPU, 0x0000003ba, Hyper.tr.PaddingSel);
    CHECK_OFF(CPUMCPU, 0x0000003b8, Hyper.tr.Sel);
    CHECK_OFF(CPUMCPU, 0x0000003bc, Hyper.tr.ValidSel);
    CHECK_OFF(CPUMCPU, 0x0000003be, Hyper.tr.fFlags);
    CHECK_OFF(CPUMCPU, 0x0000003c8, Hyper.tr.u32Limit);
    CHECK_OFF(CPUMCPU, 0x0000003c0, Hyper.tr.u64Base);
    CHECK_OFF(CPUMCPU, 0x000000ddf, abPadding2);
    CHECK_OFF(CPUMCPU, 0x000000dd8, fApicDisVectors);
    CHECK_OFF(CPUMCPU, 0x000000dc4, fChanged);
    CHECK_OFF(CPUMCPU, 0x000000ddd, fRawEntered);
    CHECK_OFF(CPUMCPU, 0x000000dde, fRemEntered);
    CHECK_OFF(CPUMCPU, 0x000000dc0, fUseFlags);
    CHECK_OFF(CPUMCPU, 0x000000ddc, fX2Apic);
    CHECK_OFF(CPUMCPU, 0x000000dc8, offCPUM);
    CHECK_OFF(CPUMCPU, 0x000000dd0, pvApicBase);
    CHECK_OFF(CPUMCPU, 0x000000dcc, u32RetCode);
    CHECK_OFF(CPUMCTX, 0x0000003d0, SysEnter.cs);
    CHECK_OFF(CPUMCTX, 0x0000003d8, SysEnter.eip);
    CHECK_OFF(CPUMCTX, 0x0000003e0, SysEnter.esp);
    CHECK_OFF(CPUMCTX, 0x000000428, au32SizePadding);
    CHECK_OFF(CPUMCTX, 0x000000320, cr0);
    CHECK_OFF(CPUMCTX, 0x000000328, cr2);
    CHECK_OFF(CPUMCTX, 0x000000330, cr3);
    CHECK_OFF(CPUMCTX, 0x000000338, cr4);
    CHECK_OFF(CPUMCTX, 0x0000002ac, cs.Attr);
    CHECK_OFF(CPUMCTX, 0x00000029a, cs.PaddingSel);
    CHECK_OFF(CPUMCTX, 0x000000298, cs.Sel);
    CHECK_OFF(CPUMCTX, 0x00000029c, cs.ValidSel);
    CHECK_OFF(CPUMCTX, 0x00000029e, cs.fFlags);
    CHECK_OFF(CPUMCTX, 0x0000002a8, cs.u32Limit);
    CHECK_OFF(CPUMCTX, 0x0000002a0, cs.u64Base);
    CHECK_OFF(CPUMCTX, 0x000000340, dr);
    CHECK_OFF(CPUMCTX, 0x0000002dc, ds.Attr);
    CHECK_OFF(CPUMCTX, 0x0000002ca, ds.PaddingSel);
    CHECK_OFF(CPUMCTX, 0x0000002c8, ds.Sel);
    CHECK_OFF(CPUMCTX, 0x0000002cc, ds.ValidSel);
    CHECK_OFF(CPUMCTX, 0x0000002ce, ds.fFlags);
    CHECK_OFF(CPUMCTX, 0x0000002d8, ds.u32Limit);
    CHECK_OFF(CPUMCTX, 0x0000002d0, ds.u64Base);
    CHECK_OFF(CPUMCTX, 0x000000200, eax);
    CHECK_OFF(CPUMCTX, 0x000000228, ebp);
    CHECK_OFF(CPUMCTX, 0x000000218, ebx);
    CHECK_OFF(CPUMCTX, 0x000000208, ecx);
    CHECK_OFF(CPUMCTX, 0x000000238, edi);
    CHECK_OFF(CPUMCTX, 0x000000210, edx);
    CHECK_OFF(CPUMCTX, 0x000000318, eflags);
    CHECK_OFF(CPUMCTX, 0x000000310, eip);
    CHECK_OFF(CPUMCTX, 0x000000294, es.Attr);
    CHECK_OFF(CPUMCTX, 0x000000282, es.PaddingSel);
    CHECK_OFF(CPUMCTX, 0x000000280, es.Sel);
    CHECK_OFF(CPUMCTX, 0x000000284, es.ValidSel);
    CHECK_OFF(CPUMCTX, 0x000000286, es.fFlags);
    CHECK_OFF(CPUMCTX, 0x000000290, es.u32Limit);
    CHECK_OFF(CPUMCTX, 0x000000288, es.u64Base);
    CHECK_OFF(CPUMCTX, 0x000000230, esi);
    CHECK_OFF(CPUMCTX, 0x000000220, esp);
    CHECK_OFF(CPUMCTX, 0x000000000, fpu);
    CHECK_OFF(CPUMCTX, 0x0000002f4, fs.Attr);
    CHECK_OFF(CPUMCTX, 0x0000002e2, fs.PaddingSel);
    CHECK_OFF(CPUMCTX, 0x0000002e0, fs.Sel);
    CHECK_OFF(CPUMCTX, 0x0000002e4, fs.ValidSel);
    CHECK_OFF(CPUMCTX, 0x0000002e6, fs.fFlags);
    CHECK_OFF(CPUMCTX, 0x0000002f0, fs.u32Limit);
    CHECK_OFF(CPUMCTX, 0x0000002e8, fs.u64Base);
    CHECK_OFF(CPUMCTX, 0x000000386, gdtr);
    CHECK_OFF(CPUMCTX, 0x000000386, gdtr.cbGdt);
    CHECK_OFF(CPUMCTX, 0x000000388, gdtr.pGdt);
    CHECK_OFF(CPUMCTX, 0x000000380, gdtrPadding);
    CHECK_OFF(CPUMCTX, 0x00000030c, gs.Attr);
    CHECK_OFF(CPUMCTX, 0x0000002fa, gs.PaddingSel);
    CHECK_OFF(CPUMCTX, 0x0000002f8, gs.Sel);
    CHECK_OFF(CPUMCTX, 0x0000002fc, gs.ValidSel);
    CHECK_OFF(CPUMCTX, 0x0000002fe, gs.fFlags);
    CHECK_OFF(CPUMCTX, 0x000000308, gs.u32Limit);
    CHECK_OFF(CPUMCTX, 0x000000300, gs.u64Base);
    CHECK_OFF(CPUMCTX, 0x000000396, idtr);
    CHECK_OFF(CPUMCTX, 0x000000396, idtr.cbIdt);
    CHECK_OFF(CPUMCTX, 0x000000398, idtr.pIdt);
    CHECK_OFF(CPUMCTX, 0x000000390, idtrPadding);
    CHECK_OFF(CPUMCTX, 0x0000003b4, ldtr.Attr);
    CHECK_OFF(CPUMCTX, 0x0000003a2, ldtr.PaddingSel);
    CHECK_OFF(CPUMCTX, 0x0000003a0, ldtr.Sel);
    CHECK_OFF(CPUMCTX, 0x0000003a4, ldtr.ValidSel);
    CHECK_OFF(CPUMCTX, 0x0000003a6, ldtr.fFlags);
    CHECK_OFF(CPUMCTX, 0x0000003b0, ldtr.u32Limit);
    CHECK_OFF(CPUMCTX, 0x0000003a8, ldtr.u64Base);
    CHECK_OFF(CPUMCTX, 0x000000420, msrApicBase);
    CHECK_OFF(CPUMCTX, 0x000000408, msrCSTAR);
    CHECK_OFF(CPUMCTX, 0x0000003e8, msrEFER);
    CHECK_OFF(CPUMCTX, 0x000000418, msrKERNELGSBASE);
    CHECK_OFF(CPUMCTX, 0x000000400, msrLSTAR);
    CHECK_OFF(CPUMCTX, 0x0000003f8, msrPAT);
    CHECK_OFF(CPUMCTX, 0x000000410, msrSFMASK);
    CHECK_OFF(CPUMCTX, 0x0000003f0, msrSTAR);
    CHECK_OFF(CPUMCTX, 0x000000250, r10);
    CHECK_OFF(CPUMCTX, 0x000000258, r11);
    CHECK_OFF(CPUMCTX, 0x000000260, r12);
    CHECK_OFF(CPUMCTX, 0x000000268, r13);
    CHECK_OFF(CPUMCTX, 0x000000270, r14);
    CHECK_OFF(CPUMCTX, 0x000000278, r15);
    CHECK_OFF(CPUMCTX, 0x000000240, r8);
    CHECK_OFF(CPUMCTX, 0x000000248, r9);
    CHECK_OFF(CPUMCTX, 0x0000002c4, ss.Attr);
    CHECK_OFF(CPUMCTX, 0x0000002b2, ss.PaddingSel);
    CHECK_OFF(CPUMCTX, 0x0000002b0, ss.Sel);
    CHECK_OFF(CPUMCTX, 0x0000002b4, ss.ValidSel);
    CHECK_OFF(CPUMCTX, 0x0000002b6, ss.fFlags);
    CHECK_OFF(CPUMCTX, 0x0000002c0, ss.u32Limit);
    CHECK_OFF(CPUMCTX, 0x0000002b8, ss.u64Base);
    CHECK_OFF(CPUMCTX, 0x0000003cc, tr.Attr);
    CHECK_OFF(CPUMCTX, 0x0000003ba, tr.PaddingSel);
    CHECK_OFF(CPUMCTX, 0x0000003b8, tr.Sel);
    CHECK_OFF(CPUMCTX, 0x0000003bc, tr.ValidSel);
    CHECK_OFF(CPUMCTX, 0x0000003be, tr.fFlags);
    CHECK_OFF(CPUMCTX, 0x0000003c8, tr.u32Limit);
    CHECK_OFF(CPUMCTX, 0x0000003c0, tr.u64Base);
    CHECK_OFF(CPUMCTXCORE, 0x0000000ac, cs.Attr);
    CHECK_OFF(CPUMCTXCORE, 0x00000009a, cs.PaddingSel);
    CHECK_OFF(CPUMCTXCORE, 0x000000098, cs.Sel);
    CHECK_OFF(CPUMCTXCORE, 0x00000009c, cs.ValidSel);
    CHECK_OFF(CPUMCTXCORE, 0x00000009e, cs.fFlags);
    CHECK_OFF(CPUMCTXCORE, 0x0000000a8, cs.u32Limit);
    CHECK_OFF(CPUMCTXCORE, 0x0000000a0, cs.u64Base);
    CHECK_OFF(CPUMCTXCORE, 0x0000000dc, ds.Attr);
    CHECK_OFF(CPUMCTXCORE, 0x0000000ca, ds.PaddingSel);
    CHECK_OFF(CPUMCTXCORE, 0x0000000c8, ds.Sel);
    CHECK_OFF(CPUMCTXCORE, 0x0000000cc, ds.ValidSel);
    CHECK_OFF(CPUMCTXCORE, 0x0000000ce, ds.fFlags);
    CHECK_OFF(CPUMCTXCORE, 0x0000000d8, ds.u32Limit);
    CHECK_OFF(CPUMCTXCORE, 0x0000000d0, ds.u64Base);
    CHECK_OFF(CPUMCTXCORE, 0x000000000, eax);
    CHECK_OFF(CPUMCTXCORE, 0x000000028, ebp);
    CHECK_OFF(CPUMCTXCORE, 0x000000018, ebx);
    CHECK_OFF(CPUMCTXCORE, 0x000000008, ecx);
    CHECK_OFF(CPUMCTXCORE, 0x000000038, edi);
    CHECK_OFF(CPUMCTXCORE, 0x000000010, edx);
    CHECK_OFF(CPUMCTXCORE, 0x000000118, eflags);
    CHECK_OFF(CPUMCTXCORE, 0x000000110, eip);
    CHECK_OFF(CPUMCTXCORE, 0x000000094, es.Attr);
    CHECK_OFF(CPUMCTXCORE, 0x000000082, es.PaddingSel);
    CHECK_OFF(CPUMCTXCORE, 0x000000080, es.Sel);
    CHECK_OFF(CPUMCTXCORE, 0x000000084, es.ValidSel);
    CHECK_OFF(CPUMCTXCORE, 0x000000086, es.fFlags);
    CHECK_OFF(CPUMCTXCORE, 0x000000090, es.u32Limit);
    CHECK_OFF(CPUMCTXCORE, 0x000000088, es.u64Base);
    CHECK_OFF(CPUMCTXCORE, 0x000000030, esi);
    CHECK_OFF(CPUMCTXCORE, 0x000000020, esp);
    CHECK_OFF(CPUMCTXCORE, 0x0000000f4, fs.Attr);
    CHECK_OFF(CPUMCTXCORE, 0x0000000e2, fs.PaddingSel);
    CHECK_OFF(CPUMCTXCORE, 0x0000000e0, fs.Sel);
    CHECK_OFF(CPUMCTXCORE, 0x0000000e4, fs.ValidSel);
    CHECK_OFF(CPUMCTXCORE, 0x0000000e6, fs.fFlags);
    CHECK_OFF(CPUMCTXCORE, 0x0000000f0, fs.u32Limit);
    CHECK_OFF(CPUMCTXCORE, 0x0000000e8, fs.u64Base);
    CHECK_OFF(CPUMCTXCORE, 0x00000010c, gs.Attr);
    CHECK_OFF(CPUMCTXCORE, 0x0000000fa, gs.PaddingSel);
    CHECK_OFF(CPUMCTXCORE, 0x0000000f8, gs.Sel);
    CHECK_OFF(CPUMCTXCORE, 0x0000000fc, gs.ValidSel);
    CHECK_OFF(CPUMCTXCORE, 0x0000000fe, gs.fFlags);
    CHECK_OFF(CPUMCTXCORE, 0x000000108, gs.u32Limit);
    CHECK_OFF(CPUMCTXCORE, 0x000000100, gs.u64Base);
    CHECK_OFF(CPUMCTXCORE, 0x000000050, r10);
    CHECK_OFF(CPUMCTXCORE, 0x000000058, r11);
    CHECK_OFF(CPUMCTXCORE, 0x000000060, r12);
    CHECK_OFF(CPUMCTXCORE, 0x000000068, r13);
    CHECK_OFF(CPUMCTXCORE, 0x000000070, r14);
    CHECK_OFF(CPUMCTXCORE, 0x000000078, r15);
    CHECK_OFF(CPUMCTXCORE, 0x000000040, r8);
    CHECK_OFF(CPUMCTXCORE, 0x000000048, r9);
    CHECK_OFF(CPUMCTXCORE, 0x0000000c4, ss.Attr);
    CHECK_OFF(CPUMCTXCORE, 0x0000000b2, ss.PaddingSel);
    CHECK_OFF(CPUMCTXCORE, 0x0000000b0, ss.Sel);
    CHECK_OFF(CPUMCTXCORE, 0x0000000b4, ss.ValidSel);
    CHECK_OFF(CPUMCTXCORE, 0x0000000b6, ss.fFlags);
    CHECK_OFF(CPUMCTXCORE, 0x0000000c0, ss.u32Limit);
    CHECK_OFF(CPUMCTXCORE, 0x0000000b8, ss.u64Base);
    CHECK_OFF(CPUMCTXMSRS, 0x000000000, au64);
    CHECK_OFF(STAMCOUNTER, 0x000000000, c);
    CHECK_OFF(STAMPROFILE, 0x000000000, cPeriods);
    CHECK_OFF(STAMPROFILE, 0x000000008, cTicks);
    CHECK_OFF(STAMPROFILE, 0x000000010, cTicksMax);
    CHECK_OFF(STAMPROFILE, 0x000000018, cTicksMin);
    CHECK_OFF(SUPDRVTRACERUSRCTX32, 0x000000005, abReserved);
    CHECK_OFF(SUPDRVTRACERUSRCTX32, 0x000000004, cBits);
    CHECK_OFF(SUPDRVTRACERUSRCTX32, 0x000000000, idProbe);
    CHECK_OFF(SUPDRVTRACERUSRCTX32, 0x00000000c, u.X86.aArgs);
    CHECK_OFF(SUPDRVTRACERUSRCTX32, 0x000000084, u.X86.cs);
    CHECK_OFF(SUPDRVTRACERUSRCTX32, 0x000000088, u.X86.ds);
    CHECK_OFF(SUPDRVTRACERUSRCTX32, 0x000000064, u.X86.eax);
    CHECK_OFF(SUPDRVTRACERUSRCTX32, 0x000000078, u.X86.ebp);
    CHECK_OFF(SUPDRVTRACERUSRCTX32, 0x000000070, u.X86.ebx);
    CHECK_OFF(SUPDRVTRACERUSRCTX32, 0x000000068, u.X86.ecx);
    CHECK_OFF(SUPDRVTRACERUSRCTX32, 0x000000080, u.X86.edi);
    CHECK_OFF(SUPDRVTRACERUSRCTX32, 0x00000006c, u.X86.edx);
    CHECK_OFF(SUPDRVTRACERUSRCTX32, 0x000000060, u.X86.eflags);
    CHECK_OFF(SUPDRVTRACERUSRCTX32, 0x00000005c, u.X86.eip);
    CHECK_OFF(SUPDRVTRACERUSRCTX32, 0x00000008a, u.X86.es);
    CHECK_OFF(SUPDRVTRACERUSRCTX32, 0x00000007c, u.X86.esi);
    CHECK_OFF(SUPDRVTRACERUSRCTX32, 0x000000074, u.X86.esp);
    CHECK_OFF(SUPDRVTRACERUSRCTX32, 0x00000008c, u.X86.fs);
    CHECK_OFF(SUPDRVTRACERUSRCTX32, 0x00000008e, u.X86.gs);
    CHECK_OFF(SUPDRVTRACERUSRCTX32, 0x000000086, u.X86.ss);
    CHECK_OFF(SUPDRVTRACERUSRCTX32, 0x000000008, u.X86.uVtgProbeLoc);
    CHECK_OFF(SUPDRVTRACERUSRCTX64, 0x000000005, abReserved);
    CHECK_OFF(SUPDRVTRACERUSRCTX64, 0x000000004, cBits);
    CHECK_OFF(SUPDRVTRACERUSRCTX64, 0x000000000, idProbe);
    CHECK_OFF(SUPDRVTRACERUSRCTX64, 0x000000010, u.Amd64.aArgs);
    CHECK_OFF(SUPDRVTRACERUSRCTX64, 0x0000000c0, u.Amd64.r10);
    CHECK_OFF(SUPDRVTRACERUSRCTX64, 0x0000000c8, u.Amd64.r11);
    CHECK_OFF(SUPDRVTRACERUSRCTX64, 0x0000000d0, u.Amd64.r12);
    CHECK_OFF(SUPDRVTRACERUSRCTX64, 0x0000000d8, u.Amd64.r13);
    CHECK_OFF(SUPDRVTRACERUSRCTX64, 0x0000000e0, u.Amd64.r14);
    CHECK_OFF(SUPDRVTRACERUSRCTX64, 0x0000000e8, u.Amd64.r15);
    CHECK_OFF(SUPDRVTRACERUSRCTX64, 0x0000000b0, u.Amd64.r8);
    CHECK_OFF(SUPDRVTRACERUSRCTX64, 0x0000000b8, u.Amd64.r9);
    CHECK_OFF(SUPDRVTRACERUSRCTX64, 0x000000070, u.Amd64.rax);
    CHECK_OFF(SUPDRVTRACERUSRCTX64, 0x000000098, u.Amd64.rbp);
    CHECK_OFF(SUPDRVTRACERUSRCTX64, 0x000000088, u.Amd64.rbx);
    CHECK_OFF(SUPDRVTRACERUSRCTX64, 0x000000078, u.Amd64.rcx);
    CHECK_OFF(SUPDRVTRACERUSRCTX64, 0x0000000a8, u.Amd64.rdi);
    CHECK_OFF(SUPDRVTRACERUSRCTX64, 0x000000080, u.Amd64.rdx);
    CHECK_OFF(SUPDRVTRACERUSRCTX64, 0x000000068, u.Amd64.rflags);
    CHECK_OFF(SUPDRVTRACERUSRCTX64, 0x000000060, u.Amd64.rip);
    CHECK_OFF(SUPDRVTRACERUSRCTX64, 0x0000000a0, u.Amd64.rsi);
    CHECK_OFF(SUPDRVTRACERUSRCTX64, 0x000000090, u.Amd64.rsp);
    CHECK_OFF(SUPDRVTRACERUSRCTX64, 0x000000008, u.Amd64.uVtgProbeLoc);
    CHECK_OFF(SUPGIPCPU, 0x00000004c, au32Reserved);
    CHECK_OFF(SUPGIPCPU, 0x000000028, au32TSCHistory);
    CHECK_OFF(SUPGIPCPU, 0x000000020, cErrors);
    CHECK_OFF(SUPGIPCPU, 0x000000074, enmState);
    CHECK_OFF(SUPGIPCPU, 0x00000007c, iCpuSet);
    CHECK_OFF(SUPGIPCPU, 0x000000024, iTSCHistoryHead);
    CHECK_OFF(SUPGIPCPU, 0x00000007e, idApic);
    CHECK_OFF(SUPGIPCPU, 0x000000078, idCpu);
    CHECK_OFF(SUPGIPCPU, 0x000000048, u32PrevUpdateIntervalNS);
    CHECK_OFF(SUPGIPCPU, 0x000000000, u32TransactionId);
    CHECK_OFF(SUPGIPCPU, 0x000000004, u32UpdateIntervalTSC);
    CHECK_OFF(SUPGIPCPU, 0x000000018, u64CpuHz);
    CHECK_OFF(SUPGIPCPU, 0x000000008, u64NanoTS);
    CHECK_OFF(SUPGIPCPU, 0x000000010, u64TSC);
    CHECK_OFF(SUPGLOBALINFOPAGE, 0x000000020, OnlineCpuSet);
    CHECK_OFF(SUPGLOBALINFOPAGE, 0x000000060, PossibleCpuSet);
    CHECK_OFF(SUPGLOBALINFOPAGE, 0x000000040, PresentCpuSet);
    CHECK_OFF(SUPGLOBALINFOPAGE, 0x000000500, aCPUs);
    CHECK_OFF(SUPGLOBALINFOPAGE, 0x000000100, aiCpuFromApicId);
    CHECK_OFF(SUPGLOBALINFOPAGE, 0x000000300, aiCpuFromCpuSetIdx);
    CHECK_OFF(SUPGLOBALINFOPAGE, 0x00000008c, au32Padding1);
    CHECK_OFF(SUPGLOBALINFOPAGE, 0x00000000c, cCpus);
    CHECK_OFF(SUPGLOBALINFOPAGE, 0x000000080, cOnlineCpus);
    CHECK_OFF(SUPGLOBALINFOPAGE, 0x00000000e, cPages);
    CHECK_OFF(SUPGLOBALINFOPAGE, 0x000000084, cPossibleCpus);
    CHECK_OFF(SUPGLOBALINFOPAGE, 0x000000082, cPresentCpus);
    CHECK_OFF(SUPGLOBALINFOPAGE, 0x000000088, idCpuMax);
    CHECK_OFF(SUPGLOBALINFOPAGE, 0x000000086, u16Padding0);
    CHECK_OFF(SUPGLOBALINFOPAGE, 0x000000000, u32Magic);
    CHECK_OFF(SUPGLOBALINFOPAGE, 0x000000008, u32Mode);
    CHECK_OFF(SUPGLOBALINFOPAGE, 0x000000010, u32UpdateHz);
    CHECK_OFF(SUPGLOBALINFOPAGE, 0x000000014, u32UpdateIntervalNS);
    CHECK_OFF(SUPGLOBALINFOPAGE, 0x000000004, u32Version);
    CHECK_OFF(SUPGLOBALINFOPAGE, 0x000000018, u64NanoTSLastUpdateHz);
    CHECK_OFF(TRPM, 0x000000c34, GuestIdtr);
    CHECK_OFF(TRPM, 0x0000013e0, StatForwardFailNoHandler);
    CHECK_OFF(TRPM, 0x0000013e8, StatForwardFailPatchAddr);
    CHECK_OFF(TRPM, 0x0000013f0, StatForwardFailR3);
    CHECK_OFF(TRPM, 0x0000013f8, StatForwardFailRZ);
    CHECK_OFF(TRPM, 0x000001390, StatForwardProfR3);
    CHECK_OFF(TRPM, 0x0000013b8, StatForwardProfRZ);
    CHECK_OFF(TRPM, 0x000001040, StatRCWriteGuestIDTFault);
    CHECK_OFF(TRPM, 0x000001048, StatRCWriteGuestIDTHandled);
    CHECK_OFF(TRPM, 0x000001050, StatSyncIDT);
    CHECK_OFF(TRPM, 0x000001400, StatTrap0dDisasm);
    CHECK_OFF(TRPM, 0x000001420, StatTrap0dRdTsc);
    CHECK_OFF(TRPM, 0x000000c40, aGuestTrapHandler);
    CHECK_OFF(TRPM, 0x000000010, aIdt);
    CHECK_OFF(TRPM, 0x000001070, aStatGCTraps);
    CHECK_OFF(TRPM, 0x000000830, aTmpTrapHandlers);
    CHECK_OFF(TRPM, 0x000000009, abPadding1);
    CHECK_OFF(TRPM, 0x000000810, au32IdtPatched);
    CHECK_OFF(TRPM, 0x000000c3e, au8Padding);
    CHECK_OFF(TRPM, 0x000000008, fSafeToDropGuestIDTMonitoring);
    CHECK_OFF(TRPM, 0x000000004, offTRPMCPU);
    CHECK_OFF(TRPM, 0x000000000, offVM);
    CHECK_OFF(TRPM, 0x000001428, paStatForwardedIRQR3);
    CHECK_OFF(TRPM, 0x000001430, paStatForwardedIRQRC);
    CHECK_OFF(TRPM, 0x000001438, paStatHostIrqR3);
    CHECK_OFF(TRPM, 0x000001434, paStatHostIrqRC);
    CHECK_OFF(TRPM, 0x000000c30, pvMonShwIdtRC);
    CHECK_OFF(TRPMCPU, 0x000000046, au8Padding);
    CHECK_OFF(TRPMCPU, 0x000000044, cbInstr);
    CHECK_OFF(TRPMCPU, 0x000000045, cbSavedInstr);
    CHECK_OFF(TRPMCPU, 0x00000000c, enmActiveType);
    CHECK_OFF(TRPMCPU, 0x000000028, enmSavedType);
    CHECK_OFF(TRPMCPU, 0x000000000, offVM);
    CHECK_OFF(TRPMCPU, 0x000000004, offVMCpu);
    CHECK_OFF(TRPMCPU, 0x000000018, uActiveCR2);
    CHECK_OFF(TRPMCPU, 0x000000010, uActiveErrorCode);
    CHECK_OFF(TRPMCPU, 0x000000008, uActiveVector);
    CHECK_OFF(TRPMCPU, 0x00000003c, uPrevVector);
    CHECK_OFF(TRPMCPU, 0x000000034, uSavedCR2);
    CHECK_OFF(TRPMCPU, 0x00000002c, uSavedErrorCode);
    CHECK_OFF(TRPMCPU, 0x000000020, uSavedVector);
    CHECK_OFF(VBOXTSS, 0x000000068, IntRedirBitmap);
    CHECK_OFF(VBOXTSS, 0x00000001c, cr3);
    CHECK_OFF(VBOXTSS, 0x00000004c, cs);
    CHECK_OFF(VBOXTSS, 0x000000054, ds);
    CHECK_OFF(VBOXTSS, 0x000000028, eax);
    CHECK_OFF(VBOXTSS, 0x00000003c, ebp);
    CHECK_OFF(VBOXTSS, 0x000000034, ebx);
    CHECK_OFF(VBOXTSS, 0x00000002c, ecx);
    CHECK_OFF(VBOXTSS, 0x000000044, edi);
    CHECK_OFF(VBOXTSS, 0x000000030, edx);
    CHECK_OFF(VBOXTSS, 0x000000024, eflags);
    CHECK_OFF(VBOXTSS, 0x000000020, eip);
    CHECK_OFF(VBOXTSS, 0x000000048, es);
    CHECK_OFF(VBOXTSS, 0x000000040, esi);
    CHECK_OFF(VBOXTSS, 0x000000038, esp);
    CHECK_OFF(VBOXTSS, 0x000000004, esp0);
    CHECK_OFF(VBOXTSS, 0x00000000c, esp1);
    CHECK_OFF(VBOXTSS, 0x000000014, esp2);
    CHECK_OFF(VBOXTSS, 0x000000064, fDebugTrap);
    CHECK_OFF(VBOXTSS, 0x000000058, fs);
    CHECK_OFF(VBOXTSS, 0x00000005c, gs);
    CHECK_OFF(VBOXTSS, 0x000000066, offIoBitmap);
    CHECK_OFF(VBOXTSS, 0x000000002, padding1);
    CHECK_OFF(VBOXTSS, 0x00000004e, padding_cs);
    CHECK_OFF(VBOXTSS, 0x000000056, padding_ds);
    CHECK_OFF(VBOXTSS, 0x00000004a, padding_es);
    CHECK_OFF(VBOXTSS, 0x00000005a, padding_fs);
    CHECK_OFF(VBOXTSS, 0x00000005e, padding_gs);
    CHECK_OFF(VBOXTSS, 0x000000062, padding_ldt);
    CHECK_OFF(VBOXTSS, 0x000000052, padding_ss);
    CHECK_OFF(VBOXTSS, 0x00000000a, padding_ss0);
    CHECK_OFF(VBOXTSS, 0x000000012, padding_ss1);
    CHECK_OFF(VBOXTSS, 0x00000001a, padding_ss2);
    CHECK_OFF(VBOXTSS, 0x000000060, selLdt);
    CHECK_OFF(VBOXTSS, 0x000000000, selPrev);
    CHECK_OFF(VBOXTSS, 0x000000050, ss);
    CHECK_OFF(VBOXTSS, 0x000000008, ss0);
    CHECK_OFF(VBOXTSS, 0x000000010, ss1);
    CHECK_OFF(VBOXTSS, 0x000000018, ss2);
    CHECK_OFF(VM, 0x0000001d8, StatSwitcherCR0);
    CHECK_OFF(VM, 0x000000200, StatSwitcherCR4);
    CHECK_OFF(VM, 0x0000001b0, StatSwitcherDebug);
    CHECK_OFF(VM, 0x000000228, StatSwitcherJmpCR3);
    CHECK_OFF(VM, 0x000000278, StatSwitcherLgdt);
    CHECK_OFF(VM, 0x0000002a0, StatSwitcherLidt);
    CHECK_OFF(VM, 0x0000002c8, StatSwitcherLldt);
    CHECK_OFF(VM, 0x000000250, StatSwitcherRstrRegs);
    CHECK_OFF(VM, 0x000000160, StatSwitcherSaveRegs);
    CHECK_OFF(VM, 0x000000188, StatSwitcherSysEnter);
    CHECK_OFF(VM, 0x0000002f0, StatSwitcherTSS);
    CHECK_OFF(VM, 0x000000110, StatSwitcherToGC);
    CHECK_OFF(VM, 0x000000138, StatSwitcherToHC);
    CHECK_OFF(VM, 0x000000098, StatTotalGCToQemu);
    CHECK_OFF(VM, 0x0000000c0, StatTotalInGC);
    CHECK_OFF(VM, 0x0000000e8, StatTotalInQemu);
    CHECK_OFF(VM, 0x000000070, StatTotalQemuToGC);
    CHECK_OFF(VM, 0x000000038, cCpus);
    CHECK_OFF(VM, 0x000000040, cbSelf);
    CHECK_OFF(VM, 0x000000340, cpum);
    CHECK_OFF(VM, 0x000000000, enmVMState);
    CHECK_OFF(VM, 0x000000054, fCSAMEnabled);
    CHECK_OFF(VM, 0x000000058, fFaultTolerantMaster);
    CHECK_OFF(VM, 0x000000004, fGlobalForcedActions);
    CHECK_OFF(VM, 0x000000055, fHMEnabled);
    CHECK_OFF(VM, 0x000000056, fHMEnabledFixed);
    CHECK_OFF(VM, 0x000000057, fHMNeedRawModeCtx);
    CHECK_OFF(VM, 0x000000053, fPATMEnabled);
    CHECK_OFF(VM, 0x000000052, fRawRing1Enabled);
    CHECK_OFF(VM, 0x000000051, fRecompileSupervisor);
    CHECK_OFF(VM, 0x000000050, fRecompileUser);
    CHECK_OFF(VM, 0x000000059, fUseLargePages);
    CHECK_OFF(VM, 0x000000034, hSelf);
    CHECK_OFF(VM, 0x000000068, hTraceBufR0);
    CHECK_OFF(VM, 0x000000060, hTraceBufR3);
    CHECK_OFF(VM, 0x00000005c, hTraceBufRC);
    CHECK_OFF(VM, 0x000000044, offVMCPU);
    CHECK_OFF(VM, 0x000000010, pSession);
    CHECK_OFF(VM, 0x000000018, pUVM);
    CHECK_OFF(VM, 0x000000028, pVMR0);
    CHECK_OFF(VM, 0x000000020, pVMR3);
    CHECK_OFF(VM, 0x000000030, pVMRC);
    CHECK_OFF(VM, 0x000000008, paVMPagesR3);
    CHECK_OFF(VM, 0x000000048, pfnVMMRCToHostAsm);
    CHECK_OFF(VM, 0x00000004c, pfnVMMRCToHostAsmNoReturn);
    CHECK_OFF(VM, 0x00000003c, uCpuExecutionCap);
    CHECK_OFF(VM, 0x00000005a, uPadding1);
    CHECK_OFF(VM, 0x000000940, vmm);
    CHECK_OFF(VMCPU, 0x000000080, aStatAdHoc);
    CHECK_OFF(VMCPU, 0x000000040, abAlignment1);
    CHECK_OFF(VMCPU, 0x0000001c0, cpum);
    CHECK_OFF(VMCPU, 0x000003f00, dbgf);
    CHECK_OFF(VMCPU, 0x000002580, em);
    CHECK_OFF(VMCPU, 0x000000004, enmState);
    CHECK_OFF(VMCPU, 0x000000000, fLocalForcedActions);
    CHECK_OFF(VMCPU, 0x00000003c, fTraceGroups);
    CHECK_OFF(VMCPU, 0x000000028, hNativeThread);
    CHECK_OFF(VMCPU, 0x000000030, hNativeThreadR0);
    CHECK_OFF(VMCPU, 0x000000fc0, hm);
    CHECK_OFF(VMCPU, 0x000000024, idCpu);
    CHECK_OFF(VMCPU, 0x000000038, idHostCpu);
    CHECK_OFF(VMCPU, 0x000002b40, iem);
    CHECK_OFF(VMCPU, 0x000003d00, iom);
    CHECK_OFF(VMCPU, 0x000000008, pUVCpu);
    CHECK_OFF(VMCPU, 0x000000018, pVMR0);
    CHECK_OFF(VMCPU, 0x000000010, pVMR3);
    CHECK_OFF(VMCPU, 0x000000020, pVMRC);
    CHECK_OFF(VMCPU, 0x000003c00, pdm);
    CHECK_OFF(VMCPU, 0x000004000, pgm);
    CHECK_OFF(VMCPU, 0x0000037c0, tm);
    CHECK_OFF(VMCPU, 0x000003740, trpm);
    CHECK_OFF(VMCPU, 0x00000007c, uAdHoc);
    CHECK_OFF(VMCPU, 0x000003940, vmm);
    CHECK_OFF(VMCSCACHE, 0x000000618, Read.aField);
    CHECK_OFF(VMCSCACHE, 0x000000818, Read.aFieldVal);
    CHECK_OFF(VMCSCACHE, 0x000000610, Read.cValidEntries);
    CHECK_OFF(VMCSCACHE, 0x000000614, Read.uAlignment);
    CHECK_OFF(VMCSCACHE, 0x000000c60, ScratchPad.param1);
    CHECK_OFF(VMCSCACHE, 0x000000c68, ScratchPad.param2);
    CHECK_OFF(VMCSCACHE, 0x000000c70, ScratchPad.param3);
    CHECK_OFF(VMCSCACHE, 0x000000c78, ScratchPad.param4);
    CHECK_OFF(VMCSCACHE, 0x000000c18, TestIn.HCPhysCpuPage);
    CHECK_OFF(VMCSCACHE, 0x000000c20, TestIn.HCPhysVmcs);
    CHECK_OFF(VMCSCACHE, 0x000000c28, TestIn.pCache);
    CHECK_OFF(VMCSCACHE, 0x000000c30, TestIn.pCtx);
    CHECK_OFF(VMCSCACHE, 0x000000c38, TestOut.HCPhysVmcs);
    CHECK_OFF(VMCSCACHE, 0x000000c58, TestOut.cr8);
    CHECK_OFF(VMCSCACHE, 0x000000c50, TestOut.eflags);
    CHECK_OFF(VMCSCACHE, 0x000000c40, TestOut.pCache);
    CHECK_OFF(VMCSCACHE, 0x000000c48, TestOut.pCtx);
    CHECK_OFF(VMCSCACHE, 0x000000010, Write.aField);
    CHECK_OFF(VMCSCACHE, 0x000000210, Write.aFieldVal);
    CHECK_OFF(VMCSCACHE, 0x000000008, Write.cValidEntries);
    CHECK_OFF(VMCSCACHE, 0x00000000c, Write.uAlignment);
    CHECK_OFF(VMCSCACHE, 0x000000000, cr2);
    CHECK_OFF(VMMCPU, 0x000000040, TracerCtx);
    CHECK_OFF(VMMCPU, 0x000000039, afPadding);
    CHECK_OFF(VMMCPU, 0x000000130, au32Padding1);
    CHECK_OFF(VMMCPU, 0x00000013c, cCallRing3Disabled);
    CHECK_OFF(VMMCPU, 0x000000140, enmCallRing3Operation);
    CHECK_OFF(VMMCPU, 0x000000038, fInRendezvous);
    CHECK_OFF(VMMCPU, 0x000000028, hR0ThreadCtx);
    CHECK_OFF(VMMCPU, 0x000000004, iLastGZRc);
    CHECK_OFF(VMMCPU, 0x000000000, offVMCPU);
    CHECK_OFF(VMMCPU, 0x000000020, pR0LoggerR0);
    CHECK_OFF(VMMCPU, 0x000000018, pR0LoggerR3);
    CHECK_OFF(VMMCPU, 0x000000014, pbEMTStackBottomRC);
    CHECK_OFF(VMMCPU, 0x000000008, pbEMTStackR3);
    CHECK_OFF(VMMCPU, 0x000000010, pbEMTStackRC);
    CHECK_OFF(VMMCPU, 0x000000150, pfnCallRing3CallbackR0);
    CHECK_OFF(VMMCPU, 0x000000158, pvCallRing3CallbackUserR0);
    CHECK_OFF(VMMCPU, 0x000000144, rcCallRing3);
    CHECK_OFF(VMMCPU, 0x000000148, u64CallRing3Arg);
    CHECK_OFF(VMMCPU, 0x000000030, u64Padding);
    CHECK_OFF(VMMR0JMPBUF, 0x000000070, SavedEbp);
    CHECK_OFF(VMMR0JMPBUF, 0x000000068, SavedEsp);
    CHECK_OFF(VMMR0JMPBUF, 0x000000058, SpCheck);
    CHECK_OFF(VMMR0JMPBUF, 0x000000060, SpResume);
    CHECK_OFF(VMMR0JMPBUF, 0x000000088, cUsedTotal);
    CHECK_OFF(VMMR0JMPBUF, 0x00000004c, cbSavedStack);
    CHECK_OFF(VMMR0JMPBUF, 0x00000007c, cbUsedAvg);
    CHECK_OFF(VMMR0JMPBUF, 0x000000078, cbUsedMax);
    CHECK_OFF(VMMR0JMPBUF, 0x000000080, cbUsedTotal);
    CHECK_OFF(VMMR0JMPBUF, 0x000000048, fInRing3Call);
    CHECK_OFF(VMMR0JMPBUF, 0x000000050, pvSavedStack);
    CHECK_OFF(VMMR0JMPBUF, 0x000000010, r12);
    CHECK_OFF(VMMR0JMPBUF, 0x000000018, r13);
    CHECK_OFF(VMMR0JMPBUF, 0x000000020, r14);
    CHECK_OFF(VMMR0JMPBUF, 0x000000028, r15);
    CHECK_OFF(VMMR0JMPBUF, 0x000000008, rbp);
    CHECK_OFF(VMMR0JMPBUF, 0x000000000, rbx);
    CHECK_OFF(VMMR0JMPBUF, 0x000000040, rflags);
    CHECK_OFF(VMMR0JMPBUF, 0x000000038, rip);
    CHECK_OFF(VMMR0JMPBUF, 0x000000030, rsp);
    CHECK_OFF(VMMSWITCHERDEF, 0x000000024, cbCode);
    CHECK_OFF(VMMSWITCHERDEF, 0x000000060, cbGCCode);
    CHECK_OFF(VMMSWITCHERDEF, 0x000000040, cbHCCode0);
    CHECK_OFF(VMMSWITCHERDEF, 0x000000048, cbHCCode1);
    CHECK_OFF(VMMSWITCHERDEF, 0x000000050, cbIDCode0);
    CHECK_OFF(VMMSWITCHERDEF, 0x000000058, cbIDCode1);
    CHECK_OFF(VMMSWITCHERDEF, 0x000000020, enmType);
    CHECK_OFF(VMMSWITCHERDEF, 0x00000005c, offGCCode);
    CHECK_OFF(VMMSWITCHERDEF, 0x00000003c, offHCCode0);
    CHECK_OFF(VMMSWITCHERDEF, 0x000000044, offHCCode1);
    CHECK_OFF(VMMSWITCHERDEF, 0x00000004c, offIDCode0);
    CHECK_OFF(VMMSWITCHERDEF, 0x000000054, offIDCode1);
    CHECK_OFF(VMMSWITCHERDEF, 0x000000028, offR0ToRawMode);
    CHECK_OFF(VMMSWITCHERDEF, 0x000000030, offRCCallTrampoline);
    CHECK_OFF(VMMSWITCHERDEF, 0x00000002c, offRCToHost);
    CHECK_OFF(VMMSWITCHERDEF, 0x000000034, offRCToHostAsm);
    CHECK_OFF(VMMSWITCHERDEF, 0x000000038, offRCToHostAsmNoReturn);
    CHECK_OFF(VMMSWITCHERDEF, 0x000000018, pfnRelocate);
    CHECK_OFF(VMMSWITCHERDEF, 0x000000010, pszDesc);
    CHECK_OFF(VMMSWITCHERDEF, 0x000000000, pvCode);
    CHECK_OFF(VMMSWITCHERDEF, 0x000000008, pvFixups);
    CHECK_OFF(VMXRESTOREHOST, 0x00000000e, HostGdtr);
    CHECK_OFF(VMXRESTOREHOST, 0x00000001e, HostIdtr);
    CHECK_OFF(VMXRESTOREHOST, 0x00000000a, abPadding0);
    CHECK_OFF(VMXRESTOREHOST, 0x000000018, abPadding1);
    CHECK_OFF(VMXRESTOREHOST, 0x000000028, uHostFSBase);
    CHECK_OFF(VMXRESTOREHOST, 0x000000030, uHostGSBase);
    CHECK_OFF(VMXRESTOREHOST, 0x000000000, uHostSelDS);
    CHECK_OFF(VMXRESTOREHOST, 0x000000002, uHostSelES);
    CHECK_OFF(VMXRESTOREHOST, 0x000000004, uHostSelFS);
    CHECK_OFF(VMXRESTOREHOST, 0x000000006, uHostSelGS);
    CHECK_OFF(VMXRESTOREHOST, 0x000000008, uHostSelTR);
    CHECK_SIZE(CPUMCPU, 0x000000e00);
    CHECK_SIZE(CPUMCTXCORE, 0x000000120);
    CHECK_SIZE(CPUMCTXMSRS, 0x000000200);
    CHECK_SIZE(CPUMCTX, 0x000000440);
    CHECK_SIZE(CPUM, 0x000000288);
    CHECK_SIZE(STAMCOUNTER, 0x000000008);
    CHECK_SIZE(STAMPROFILEADV, 0x000000028);
    CHECK_SIZE(STAMPROFILE, 0x000000020);
    CHECK_SIZE(SUPDRVTRACERUSRCTX64, 0x0000000f0);
    CHECK_SIZE(SUPGIPCPU, 0x000000080);
    CHECK_SIZE(SUPGLOBALINFOPAGE, 0x000000580);
    CHECK_SIZE(TRPMCPU, 0x000000048);
    CHECK_SIZE(TRPM, 0x000001440);
    CHECK_SIZE(VBOXTSS, 0x000000088);
    CHECK_SIZE(VMCSCACHE, 0x000000c80);
    CHECK_SIZE(VMMR0JMPBUF, 0x000000090);
    CHECK_SIZE(VMMSWITCHERDEF, 0x000000064);
    CHECK_SIZE(VMXRESTOREHOST, 0x000000038);
