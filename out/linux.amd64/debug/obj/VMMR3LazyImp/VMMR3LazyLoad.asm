;;
;; Autogenerated from '/home/se170/VirtualBox-4.3.28/src/VBox/VMM/VMMR3/VMMR3.def'.
;; DO NOT EDIT!
;;


%include "iprt/asmdefs.mac"


;
; Thunks.
;
BEGINCODE
BEGINPROC CFGMR3GetRoot
    jmp RTCCPTR_PRE [g_pfnCFGMR3GetRoot xWrtRIP]
ENDPROC   CFGMR3GetRoot
BEGINPROC CFGMR3GetFirstChild
    jmp RTCCPTR_PRE [g_pfnCFGMR3GetFirstChild xWrtRIP]
ENDPROC   CFGMR3GetFirstChild
BEGINPROC CFGMR3GetNextChild
    jmp RTCCPTR_PRE [g_pfnCFGMR3GetNextChild xWrtRIP]
ENDPROC   CFGMR3GetNextChild
BEGINPROC CFGMR3GetNameLen
    jmp RTCCPTR_PRE [g_pfnCFGMR3GetNameLen xWrtRIP]
ENDPROC   CFGMR3GetNameLen
BEGINPROC CFGMR3GetFirstValue
    jmp RTCCPTR_PRE [g_pfnCFGMR3GetFirstValue xWrtRIP]
ENDPROC   CFGMR3GetFirstValue
BEGINPROC CFGMR3GetNextValue
    jmp RTCCPTR_PRE [g_pfnCFGMR3GetNextValue xWrtRIP]
ENDPROC   CFGMR3GetNextValue
BEGINPROC CFGMR3GetValueNameLen
    jmp RTCCPTR_PRE [g_pfnCFGMR3GetValueNameLen xWrtRIP]
ENDPROC   CFGMR3GetValueNameLen
BEGINPROC CFGMR3GetValueType
    jmp RTCCPTR_PRE [g_pfnCFGMR3GetValueType xWrtRIP]
ENDPROC   CFGMR3GetValueType
BEGINPROC CFGMR3Dump
    jmp RTCCPTR_PRE [g_pfnCFGMR3Dump xWrtRIP]
ENDPROC   CFGMR3Dump
BEGINPROC CFGMR3CreateTree
    jmp RTCCPTR_PRE [g_pfnCFGMR3CreateTree xWrtRIP]
ENDPROC   CFGMR3CreateTree
BEGINPROC CFGMR3DestroyTree
    jmp RTCCPTR_PRE [g_pfnCFGMR3DestroyTree xWrtRIP]
ENDPROC   CFGMR3DestroyTree
BEGINPROC CFGMR3GetValueName
    jmp RTCCPTR_PRE [g_pfnCFGMR3GetValueName xWrtRIP]
ENDPROC   CFGMR3GetValueName
BEGINPROC CFGMR3GetName
    jmp RTCCPTR_PRE [g_pfnCFGMR3GetName xWrtRIP]
ENDPROC   CFGMR3GetName
BEGINPROC CFGMR3RemoveNode
    jmp RTCCPTR_PRE [g_pfnCFGMR3RemoveNode xWrtRIP]
ENDPROC   CFGMR3RemoveNode
BEGINPROC CFGMR3InsertBytes
    jmp RTCCPTR_PRE [g_pfnCFGMR3InsertBytes xWrtRIP]
ENDPROC   CFGMR3InsertBytes
BEGINPROC CFGMR3InsertStringFV
    jmp RTCCPTR_PRE [g_pfnCFGMR3InsertStringFV xWrtRIP]
ENDPROC   CFGMR3InsertStringFV
BEGINPROC CFGMR3InsertStringF
    jmp RTCCPTR_PRE [g_pfnCFGMR3InsertStringF xWrtRIP]
ENDPROC   CFGMR3InsertStringF
BEGINPROC CFGMR3InsertStringN
    jmp RTCCPTR_PRE [g_pfnCFGMR3InsertStringN xWrtRIP]
ENDPROC   CFGMR3InsertStringN
BEGINPROC CFGMR3InsertString
    jmp RTCCPTR_PRE [g_pfnCFGMR3InsertString xWrtRIP]
ENDPROC   CFGMR3InsertString
BEGINPROC CFGMR3InsertStringW
    jmp RTCCPTR_PRE [g_pfnCFGMR3InsertStringW xWrtRIP]
ENDPROC   CFGMR3InsertStringW
BEGINPROC CFGMR3InsertInteger
    jmp RTCCPTR_PRE [g_pfnCFGMR3InsertInteger xWrtRIP]
ENDPROC   CFGMR3InsertInteger
BEGINPROC CFGMR3QueryStringAllocDef
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryStringAllocDef xWrtRIP]
ENDPROC   CFGMR3QueryStringAllocDef
BEGINPROC CFGMR3RemoveValue
    jmp RTCCPTR_PRE [g_pfnCFGMR3RemoveValue xWrtRIP]
ENDPROC   CFGMR3RemoveValue
BEGINPROC CFGMR3QueryIntegerDef
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryIntegerDef xWrtRIP]
ENDPROC   CFGMR3QueryIntegerDef
BEGINPROC CFGMR3QueryGCPtrSDef
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryGCPtrSDef xWrtRIP]
ENDPROC   CFGMR3QueryGCPtrSDef
BEGINPROC CFGMR3QueryGCPtrUDef
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryGCPtrUDef xWrtRIP]
ENDPROC   CFGMR3QueryGCPtrUDef
BEGINPROC CFGMR3QueryGCPtrDef
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryGCPtrDef xWrtRIP]
ENDPROC   CFGMR3QueryGCPtrDef
BEGINPROC CFGMR3QueryPtrDef
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryPtrDef xWrtRIP]
ENDPROC   CFGMR3QueryPtrDef
BEGINPROC CFGMR3QueryBoolDef
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryBoolDef xWrtRIP]
ENDPROC   CFGMR3QueryBoolDef
BEGINPROC CFGMR3QueryS8Def
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryS8Def xWrtRIP]
ENDPROC   CFGMR3QueryS8Def
BEGINPROC CFGMR3QueryU8Def
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryU8Def xWrtRIP]
ENDPROC   CFGMR3QueryU8Def
BEGINPROC CFGMR3QueryS16Def
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryS16Def xWrtRIP]
ENDPROC   CFGMR3QueryS16Def
BEGINPROC CFGMR3QueryU16Def
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryU16Def xWrtRIP]
ENDPROC   CFGMR3QueryU16Def
BEGINPROC CFGMR3QueryPortDef
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryPortDef xWrtRIP]
ENDPROC   CFGMR3QueryPortDef
BEGINPROC CFGMR3QueryS32Def
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryS32Def xWrtRIP]
ENDPROC   CFGMR3QueryS32Def
BEGINPROC CFGMR3QuerySIntDef
    jmp RTCCPTR_PRE [g_pfnCFGMR3QuerySIntDef xWrtRIP]
ENDPROC   CFGMR3QuerySIntDef
BEGINPROC CFGMR3QueryU32Def
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryU32Def xWrtRIP]
ENDPROC   CFGMR3QueryU32Def
BEGINPROC CFGMR3QueryUIntDef
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryUIntDef xWrtRIP]
ENDPROC   CFGMR3QueryUIntDef
BEGINPROC CFGMR3QueryS64Def
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryS64Def xWrtRIP]
ENDPROC   CFGMR3QueryS64Def
BEGINPROC CFGMR3QueryU64Def
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryU64Def xWrtRIP]
ENDPROC   CFGMR3QueryU64Def
BEGINPROC CFGMR3QueryInteger
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryInteger xWrtRIP]
ENDPROC   CFGMR3QueryInteger
BEGINPROC CFGMR3QueryGCPtrS
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryGCPtrS xWrtRIP]
ENDPROC   CFGMR3QueryGCPtrS
BEGINPROC CFGMR3QueryGCPtrU
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryGCPtrU xWrtRIP]
ENDPROC   CFGMR3QueryGCPtrU
BEGINPROC CFGMR3QueryGCPtr
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryGCPtr xWrtRIP]
ENDPROC   CFGMR3QueryGCPtr
BEGINPROC CFGMR3QueryPtr
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryPtr xWrtRIP]
ENDPROC   CFGMR3QueryPtr
BEGINPROC CFGMR3QueryBool
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryBool xWrtRIP]
ENDPROC   CFGMR3QueryBool
BEGINPROC CFGMR3QueryS8
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryS8 xWrtRIP]
ENDPROC   CFGMR3QueryS8
BEGINPROC CFGMR3QueryU8
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryU8 xWrtRIP]
ENDPROC   CFGMR3QueryU8
BEGINPROC CFGMR3QueryS16
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryS16 xWrtRIP]
ENDPROC   CFGMR3QueryS16
BEGINPROC CFGMR3QueryU16
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryU16 xWrtRIP]
ENDPROC   CFGMR3QueryU16
BEGINPROC CFGMR3QueryPort
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryPort xWrtRIP]
ENDPROC   CFGMR3QueryPort
BEGINPROC CFGMR3QueryS32
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryS32 xWrtRIP]
ENDPROC   CFGMR3QueryS32
BEGINPROC CFGMR3QuerySInt
    jmp RTCCPTR_PRE [g_pfnCFGMR3QuerySInt xWrtRIP]
ENDPROC   CFGMR3QuerySInt
BEGINPROC CFGMR3QueryU32
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryU32 xWrtRIP]
ENDPROC   CFGMR3QueryU32
BEGINPROC CFGMR3QueryUInt
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryUInt xWrtRIP]
ENDPROC   CFGMR3QueryUInt
BEGINPROC CFGMR3QueryS64
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryS64 xWrtRIP]
ENDPROC   CFGMR3QueryS64
BEGINPROC CFGMR3QueryU64
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryU64 xWrtRIP]
ENDPROC   CFGMR3QueryU64
BEGINPROC CFGMR3QuerySize
    jmp RTCCPTR_PRE [g_pfnCFGMR3QuerySize xWrtRIP]
ENDPROC   CFGMR3QuerySize
BEGINPROC CFGMR3QueryType
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryType xWrtRIP]
ENDPROC   CFGMR3QueryType
BEGINPROC CFGMR3AreValuesValid
    jmp RTCCPTR_PRE [g_pfnCFGMR3AreValuesValid xWrtRIP]
ENDPROC   CFGMR3AreValuesValid
BEGINPROC CFGMR3AreChildrenValid
    jmp RTCCPTR_PRE [g_pfnCFGMR3AreChildrenValid xWrtRIP]
ENDPROC   CFGMR3AreChildrenValid
BEGINPROC CFGMR3GetChildFV
    jmp RTCCPTR_PRE [g_pfnCFGMR3GetChildFV xWrtRIP]
ENDPROC   CFGMR3GetChildFV
BEGINPROC CFGMR3GetChildF
    jmp RTCCPTR_PRE [g_pfnCFGMR3GetChildF xWrtRIP]
ENDPROC   CFGMR3GetChildF
BEGINPROC CFGMR3GetChild
    jmp RTCCPTR_PRE [g_pfnCFGMR3GetChild xWrtRIP]
ENDPROC   CFGMR3GetChild
BEGINPROC CFGMR3InsertNode
    jmp RTCCPTR_PRE [g_pfnCFGMR3InsertNode xWrtRIP]
ENDPROC   CFGMR3InsertNode
BEGINPROC CFGMR3InsertNodeFV
    jmp RTCCPTR_PRE [g_pfnCFGMR3InsertNodeFV xWrtRIP]
ENDPROC   CFGMR3InsertNodeFV
BEGINPROC CFGMR3InsertNodeF
    jmp RTCCPTR_PRE [g_pfnCFGMR3InsertNodeF xWrtRIP]
ENDPROC   CFGMR3InsertNodeF
BEGINPROC CFGMR3InsertSubTree
    jmp RTCCPTR_PRE [g_pfnCFGMR3InsertSubTree xWrtRIP]
ENDPROC   CFGMR3InsertSubTree
BEGINPROC CFGMR3ValidateConfig
    jmp RTCCPTR_PRE [g_pfnCFGMR3ValidateConfig xWrtRIP]
ENDPROC   CFGMR3ValidateConfig
BEGINPROC CFGMR3QueryBytes
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryBytes xWrtRIP]
ENDPROC   CFGMR3QueryBytes
BEGINPROC CFGMR3QueryStringDef
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryStringDef xWrtRIP]
ENDPROC   CFGMR3QueryStringDef
BEGINPROC CFGMR3QueryString
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryString xWrtRIP]
ENDPROC   CFGMR3QueryString
BEGINPROC CFGMR3QueryStringAlloc
    jmp RTCCPTR_PRE [g_pfnCFGMR3QueryStringAlloc xWrtRIP]
ENDPROC   CFGMR3QueryStringAlloc
BEGINPROC CFGMR3GetParent
    jmp RTCCPTR_PRE [g_pfnCFGMR3GetParent xWrtRIP]
ENDPROC   CFGMR3GetParent
BEGINPROC CFGMR3GetRootU
    jmp RTCCPTR_PRE [g_pfnCFGMR3GetRootU xWrtRIP]
ENDPROC   CFGMR3GetRootU
BEGINPROC CSAMR3IsEnabled
    jmp RTCCPTR_PRE [g_pfnCSAMR3IsEnabled xWrtRIP]
ENDPROC   CSAMR3IsEnabled
BEGINPROC CSAMR3SetScanningEnabled
    jmp RTCCPTR_PRE [g_pfnCSAMR3SetScanningEnabled xWrtRIP]
ENDPROC   CSAMR3SetScanningEnabled
BEGINPROC DBGCCreate
    jmp RTCCPTR_PRE [g_pfnDBGCCreate xWrtRIP]
ENDPROC   DBGCCreate
BEGINPROC DBGFR3CoreWrite
    jmp RTCCPTR_PRE [g_pfnDBGFR3CoreWrite xWrtRIP]
ENDPROC   DBGFR3CoreWrite
BEGINPROC DBGFR3Info
    jmp RTCCPTR_PRE [g_pfnDBGFR3Info xWrtRIP]
ENDPROC   DBGFR3Info
BEGINPROC DBGFR3InfoRegisterExternal
    jmp RTCCPTR_PRE [g_pfnDBGFR3InfoRegisterExternal xWrtRIP]
ENDPROC   DBGFR3InfoRegisterExternal
BEGINPROC DBGFR3InjectNMI
    jmp RTCCPTR_PRE [g_pfnDBGFR3InjectNMI xWrtRIP]
ENDPROC   DBGFR3InjectNMI
BEGINPROC DBGFR3LogModifyDestinations
    jmp RTCCPTR_PRE [g_pfnDBGFR3LogModifyDestinations xWrtRIP]
ENDPROC   DBGFR3LogModifyDestinations
BEGINPROC DBGFR3LogModifyFlags
    jmp RTCCPTR_PRE [g_pfnDBGFR3LogModifyFlags xWrtRIP]
ENDPROC   DBGFR3LogModifyFlags
BEGINPROC DBGFR3LogModifyGroups
    jmp RTCCPTR_PRE [g_pfnDBGFR3LogModifyGroups xWrtRIP]
ENDPROC   DBGFR3LogModifyGroups
BEGINPROC DBGFR3OSDetect
    jmp RTCCPTR_PRE [g_pfnDBGFR3OSDetect xWrtRIP]
ENDPROC   DBGFR3OSDetect
BEGINPROC DBGFR3OSQueryNameAndVersion
    jmp RTCCPTR_PRE [g_pfnDBGFR3OSQueryNameAndVersion xWrtRIP]
ENDPROC   DBGFR3OSQueryNameAndVersion
BEGINPROC DBGFR3RegCpuQueryU32
    jmp RTCCPTR_PRE [g_pfnDBGFR3RegCpuQueryU32 xWrtRIP]
ENDPROC   DBGFR3RegCpuQueryU32
BEGINPROC DBGFR3RegFormatValue
    jmp RTCCPTR_PRE [g_pfnDBGFR3RegFormatValue xWrtRIP]
ENDPROC   DBGFR3RegFormatValue
BEGINPROC DBGFR3RegNmQuery
    jmp RTCCPTR_PRE [g_pfnDBGFR3RegNmQuery xWrtRIP]
ENDPROC   DBGFR3RegNmQuery
BEGINPROC DBGFR3RegNmQueryAll
    jmp RTCCPTR_PRE [g_pfnDBGFR3RegNmQueryAll xWrtRIP]
ENDPROC   DBGFR3RegNmQueryAll
BEGINPROC DBGFR3RegNmQueryAllCount
    jmp RTCCPTR_PRE [g_pfnDBGFR3RegNmQueryAllCount xWrtRIP]
ENDPROC   DBGFR3RegNmQueryAllCount
BEGINPROC DBGFR3OSDeregister
    jmp RTCCPTR_PRE [g_pfnDBGFR3OSDeregister xWrtRIP]
ENDPROC   DBGFR3OSDeregister
BEGINPROC DBGFR3OSRegister
    jmp RTCCPTR_PRE [g_pfnDBGFR3OSRegister xWrtRIP]
ENDPROC   DBGFR3OSRegister
BEGINPROC DBGFR3MemReadString
    jmp RTCCPTR_PRE [g_pfnDBGFR3MemReadString xWrtRIP]
ENDPROC   DBGFR3MemReadString
BEGINPROC DBGFR3MemRead
    jmp RTCCPTR_PRE [g_pfnDBGFR3MemRead xWrtRIP]
ENDPROC   DBGFR3MemRead
BEGINPROC DBGFR3MemScan
    jmp RTCCPTR_PRE [g_pfnDBGFR3MemScan xWrtRIP]
ENDPROC   DBGFR3MemScan
BEGINPROC DBGFR3AddrFromFlat
    jmp RTCCPTR_PRE [g_pfnDBGFR3AddrFromFlat xWrtRIP]
ENDPROC   DBGFR3AddrFromFlat
BEGINPROC DBGFR3AsSymbolByName
    jmp RTCCPTR_PRE [g_pfnDBGFR3AsSymbolByName xWrtRIP]
ENDPROC   DBGFR3AsSymbolByName
BEGINPROC DBGFR3AsResolveAndRetain
    jmp RTCCPTR_PRE [g_pfnDBGFR3AsResolveAndRetain xWrtRIP]
ENDPROC   DBGFR3AsResolveAndRetain
BEGINPROC DBGFR3AsSetAlias
    jmp RTCCPTR_PRE [g_pfnDBGFR3AsSetAlias xWrtRIP]
ENDPROC   DBGFR3AsSetAlias
BEGINPROC DBGFR3AddrAdd
    jmp RTCCPTR_PRE [g_pfnDBGFR3AddrAdd xWrtRIP]
ENDPROC   DBGFR3AddrAdd
BEGINPROC DBGFR3AddrSub
    jmp RTCCPTR_PRE [g_pfnDBGFR3AddrSub xWrtRIP]
ENDPROC   DBGFR3AddrSub
BEGINPROC DBGFR3AsGetConfig
    jmp RTCCPTR_PRE [g_pfnDBGFR3AsGetConfig xWrtRIP]
ENDPROC   DBGFR3AsGetConfig
BEGINPROC DBGFR3CpuGetMode
    jmp RTCCPTR_PRE [g_pfnDBGFR3CpuGetMode xWrtRIP]
ENDPROC   DBGFR3CpuGetMode
BEGINPROC DBGFR3AddrFromSelOff
    jmp RTCCPTR_PRE [g_pfnDBGFR3AddrFromSelOff xWrtRIP]
ENDPROC   DBGFR3AddrFromSelOff
BEGINPROC EMR3QueryExecutionPolicy
    jmp RTCCPTR_PRE [g_pfnEMR3QueryExecutionPolicy xWrtRIP]
ENDPROC   EMR3QueryExecutionPolicy
BEGINPROC EMR3SetExecutionPolicy
    jmp RTCCPTR_PRE [g_pfnEMR3SetExecutionPolicy xWrtRIP]
ENDPROC   EMR3SetExecutionPolicy
BEGINPROC FTMR3CancelStandby
    jmp RTCCPTR_PRE [g_pfnFTMR3CancelStandby xWrtRIP]
ENDPROC   FTMR3CancelStandby
BEGINPROC FTMR3PowerOn
    jmp RTCCPTR_PRE [g_pfnFTMR3PowerOn xWrtRIP]
ENDPROC   FTMR3PowerOn
BEGINPROC HMR3IsEnabled
    jmp RTCCPTR_PRE [g_pfnHMR3IsEnabled xWrtRIP]
ENDPROC   HMR3IsEnabled
BEGINPROC HMR3IsNestedPagingActive
    jmp RTCCPTR_PRE [g_pfnHMR3IsNestedPagingActive xWrtRIP]
ENDPROC   HMR3IsNestedPagingActive
BEGINPROC HMR3IsUXActive
    jmp RTCCPTR_PRE [g_pfnHMR3IsUXActive xWrtRIP]
ENDPROC   HMR3IsUXActive
BEGINPROC HMR3IsVpidActive
    jmp RTCCPTR_PRE [g_pfnHMR3IsVpidActive xWrtRIP]
ENDPROC   HMR3IsVpidActive
BEGINPROC MMR3HeapFree
    jmp RTCCPTR_PRE [g_pfnMMR3HeapFree xWrtRIP]
ENDPROC   MMR3HeapFree
BEGINPROC MMR3HeapRealloc
    jmp RTCCPTR_PRE [g_pfnMMR3HeapRealloc xWrtRIP]
ENDPROC   MMR3HeapRealloc
BEGINPROC PATMR3AllowPatching
    jmp RTCCPTR_PRE [g_pfnPATMR3AllowPatching xWrtRIP]
ENDPROC   PATMR3AllowPatching
BEGINPROC PATMR3IsEnabled
    jmp RTCCPTR_PRE [g_pfnPATMR3IsEnabled xWrtRIP]
ENDPROC   PATMR3IsEnabled
BEGINPROC PDMR3AsyncCompletionBwMgrSetMaxForFile
    jmp RTCCPTR_PRE [g_pfnPDMR3AsyncCompletionBwMgrSetMaxForFile xWrtRIP]
ENDPROC   PDMR3AsyncCompletionBwMgrSetMaxForFile
BEGINPROC PDMR3DeviceAttach
    jmp RTCCPTR_PRE [g_pfnPDMR3DeviceAttach xWrtRIP]
ENDPROC   PDMR3DeviceAttach
BEGINPROC PDMR3DeviceDetach
    jmp RTCCPTR_PRE [g_pfnPDMR3DeviceDetach xWrtRIP]
ENDPROC   PDMR3DeviceDetach
BEGINPROC PDMR3DriverAttach
    jmp RTCCPTR_PRE [g_pfnPDMR3DriverAttach xWrtRIP]
ENDPROC   PDMR3DriverAttach
BEGINPROC PDMR3NsBwGroupSetLimit
    jmp RTCCPTR_PRE [g_pfnPDMR3NsBwGroupSetLimit xWrtRIP]
ENDPROC   PDMR3NsBwGroupSetLimit
BEGINPROC PDMR3QueryDeviceLun
    jmp RTCCPTR_PRE [g_pfnPDMR3QueryDeviceLun xWrtRIP]
ENDPROC   PDMR3QueryDeviceLun
BEGINPROC PDMR3QueryDriverOnLun
    jmp RTCCPTR_PRE [g_pfnPDMR3QueryDriverOnLun xWrtRIP]
ENDPROC   PDMR3QueryDriverOnLun
BEGINPROC PDMR3QueryLun
    jmp RTCCPTR_PRE [g_pfnPDMR3QueryLun xWrtRIP]
ENDPROC   PDMR3QueryLun
BEGINPROC PDMCritSectEnter
    jmp RTCCPTR_PRE [g_pfnPDMCritSectEnter xWrtRIP]
ENDPROC   PDMCritSectEnter
BEGINPROC PDMCritSectEnterDebug
    jmp RTCCPTR_PRE [g_pfnPDMCritSectEnterDebug xWrtRIP]
ENDPROC   PDMCritSectEnterDebug
BEGINPROC PDMCritSectTryEnter
    jmp RTCCPTR_PRE [g_pfnPDMCritSectTryEnter xWrtRIP]
ENDPROC   PDMCritSectTryEnter
BEGINPROC PDMCritSectTryEnterDebug
    jmp RTCCPTR_PRE [g_pfnPDMCritSectTryEnterDebug xWrtRIP]
ENDPROC   PDMCritSectTryEnterDebug
BEGINPROC PDMR3CritSectEnterEx
    jmp RTCCPTR_PRE [g_pfnPDMR3CritSectEnterEx xWrtRIP]
ENDPROC   PDMR3CritSectEnterEx
BEGINPROC PDMCritSectLeave
    jmp RTCCPTR_PRE [g_pfnPDMCritSectLeave xWrtRIP]
ENDPROC   PDMCritSectLeave
BEGINPROC PDMCritSectIsOwner
    jmp RTCCPTR_PRE [g_pfnPDMCritSectIsOwner xWrtRIP]
ENDPROC   PDMCritSectIsOwner
BEGINPROC PDMCritSectIsOwnerEx
    jmp RTCCPTR_PRE [g_pfnPDMCritSectIsOwnerEx xWrtRIP]
ENDPROC   PDMCritSectIsOwnerEx
BEGINPROC PDMCritSectIsOwned
    jmp RTCCPTR_PRE [g_pfnPDMCritSectIsOwned xWrtRIP]
ENDPROC   PDMCritSectIsOwned
BEGINPROC PDMCritSectIsInitialized
    jmp RTCCPTR_PRE [g_pfnPDMCritSectIsInitialized xWrtRIP]
ENDPROC   PDMCritSectIsInitialized
BEGINPROC PDMCritSectHasWaiters
    jmp RTCCPTR_PRE [g_pfnPDMCritSectHasWaiters xWrtRIP]
ENDPROC   PDMCritSectHasWaiters
BEGINPROC PDMCritSectGetRecursion
    jmp RTCCPTR_PRE [g_pfnPDMCritSectGetRecursion xWrtRIP]
ENDPROC   PDMCritSectGetRecursion
BEGINPROC PDMR3CritSectYield
    jmp RTCCPTR_PRE [g_pfnPDMR3CritSectYield xWrtRIP]
ENDPROC   PDMR3CritSectYield
BEGINPROC PDMR3CritSectName
    jmp RTCCPTR_PRE [g_pfnPDMR3CritSectName xWrtRIP]
ENDPROC   PDMR3CritSectName
BEGINPROC PDMR3CritSectScheduleExitEvent
    jmp RTCCPTR_PRE [g_pfnPDMR3CritSectScheduleExitEvent xWrtRIP]
ENDPROC   PDMR3CritSectScheduleExitEvent
BEGINPROC PDMR3CritSectDelete
    jmp RTCCPTR_PRE [g_pfnPDMR3CritSectDelete xWrtRIP]
ENDPROC   PDMR3CritSectDelete
BEGINPROC PDMR3QueueDestroy
    jmp RTCCPTR_PRE [g_pfnPDMR3QueueDestroy xWrtRIP]
ENDPROC   PDMR3QueueDestroy
BEGINPROC PDMQueueAlloc
    jmp RTCCPTR_PRE [g_pfnPDMQueueAlloc xWrtRIP]
ENDPROC   PDMQueueAlloc
BEGINPROC PDMQueueInsert
    jmp RTCCPTR_PRE [g_pfnPDMQueueInsert xWrtRIP]
ENDPROC   PDMQueueInsert
BEGINPROC PDMQueueInsertEx
    jmp RTCCPTR_PRE [g_pfnPDMQueueInsertEx xWrtRIP]
ENDPROC   PDMQueueInsertEx
BEGINPROC PDMQueueR0Ptr
    jmp RTCCPTR_PRE [g_pfnPDMQueueR0Ptr xWrtRIP]
ENDPROC   PDMQueueR0Ptr
BEGINPROC PDMQueueRCPtr
    jmp RTCCPTR_PRE [g_pfnPDMQueueRCPtr xWrtRIP]
ENDPROC   PDMQueueRCPtr
BEGINPROC PDMR3ThreadDestroy
    jmp RTCCPTR_PRE [g_pfnPDMR3ThreadDestroy xWrtRIP]
ENDPROC   PDMR3ThreadDestroy
BEGINPROC PDMR3ThreadIAmRunning
    jmp RTCCPTR_PRE [g_pfnPDMR3ThreadIAmRunning xWrtRIP]
ENDPROC   PDMR3ThreadIAmRunning
BEGINPROC PDMR3ThreadIAmSuspending
    jmp RTCCPTR_PRE [g_pfnPDMR3ThreadIAmSuspending xWrtRIP]
ENDPROC   PDMR3ThreadIAmSuspending
BEGINPROC PDMR3ThreadResume
    jmp RTCCPTR_PRE [g_pfnPDMR3ThreadResume xWrtRIP]
ENDPROC   PDMR3ThreadResume
BEGINPROC PDMR3ThreadSleep
    jmp RTCCPTR_PRE [g_pfnPDMR3ThreadSleep xWrtRIP]
ENDPROC   PDMR3ThreadSleep
BEGINPROC PDMR3ThreadSuspend
    jmp RTCCPTR_PRE [g_pfnPDMR3ThreadSuspend xWrtRIP]
ENDPROC   PDMR3ThreadSuspend
BEGINPROC PDMR3UsbCreateEmulatedDevice
    jmp RTCCPTR_PRE [g_pfnPDMR3UsbCreateEmulatedDevice xWrtRIP]
ENDPROC   PDMR3UsbCreateEmulatedDevice
BEGINPROC PDMR3UsbCreateProxyDevice
    jmp RTCCPTR_PRE [g_pfnPDMR3UsbCreateProxyDevice xWrtRIP]
ENDPROC   PDMR3UsbCreateProxyDevice
BEGINPROC PDMR3UsbDetachDevice
    jmp RTCCPTR_PRE [g_pfnPDMR3UsbDetachDevice xWrtRIP]
ENDPROC   PDMR3UsbDetachDevice
BEGINPROC PDMR3UsbHasHub
    jmp RTCCPTR_PRE [g_pfnPDMR3UsbHasHub xWrtRIP]
ENDPROC   PDMR3UsbHasHub
BEGINPROC PGMHandlerPhysicalPageTempOff
    jmp RTCCPTR_PRE [g_pfnPGMHandlerPhysicalPageTempOff xWrtRIP]
ENDPROC   PGMHandlerPhysicalPageTempOff
BEGINPROC PGMPhysReadGCPtr
    jmp RTCCPTR_PRE [g_pfnPGMPhysReadGCPtr xWrtRIP]
ENDPROC   PGMPhysReadGCPtr
BEGINPROC PGMPhysSimpleDirtyWriteGCPtr
    jmp RTCCPTR_PRE [g_pfnPGMPhysSimpleDirtyWriteGCPtr xWrtRIP]
ENDPROC   PGMPhysSimpleDirtyWriteGCPtr
BEGINPROC PGMPhysSimpleReadGCPtr
    jmp RTCCPTR_PRE [g_pfnPGMPhysSimpleReadGCPtr xWrtRIP]
ENDPROC   PGMPhysSimpleReadGCPtr
BEGINPROC PGMPhysSimpleWriteGCPhys
    jmp RTCCPTR_PRE [g_pfnPGMPhysSimpleWriteGCPhys xWrtRIP]
ENDPROC   PGMPhysSimpleWriteGCPhys
BEGINPROC PGMPhysSimpleWriteGCPtr
    jmp RTCCPTR_PRE [g_pfnPGMPhysSimpleWriteGCPtr xWrtRIP]
ENDPROC   PGMPhysSimpleWriteGCPtr
BEGINPROC PGMPhysWriteGCPtr
    jmp RTCCPTR_PRE [g_pfnPGMPhysWriteGCPtr xWrtRIP]
ENDPROC   PGMPhysWriteGCPtr
BEGINPROC PGMShwMakePageWritable
    jmp RTCCPTR_PRE [g_pfnPGMShwMakePageWritable xWrtRIP]
ENDPROC   PGMShwMakePageWritable
BEGINPROC PGMR3QueryGlobalMemoryStats
    jmp RTCCPTR_PRE [g_pfnPGMR3QueryGlobalMemoryStats xWrtRIP]
ENDPROC   PGMR3QueryGlobalMemoryStats
BEGINPROC PGMR3QueryMemoryStats
    jmp RTCCPTR_PRE [g_pfnPGMR3QueryMemoryStats xWrtRIP]
ENDPROC   PGMR3QueryMemoryStats
BEGINPROC SSMR3Close
    jmp RTCCPTR_PRE [g_pfnSSMR3Close xWrtRIP]
ENDPROC   SSMR3Close
BEGINPROC SSMR3DeregisterExternal
    jmp RTCCPTR_PRE [g_pfnSSMR3DeregisterExternal xWrtRIP]
ENDPROC   SSMR3DeregisterExternal
BEGINPROC SSMR3DeregisterInternal
    jmp RTCCPTR_PRE [g_pfnSSMR3DeregisterInternal xWrtRIP]
ENDPROC   SSMR3DeregisterInternal
BEGINPROC SSMR3GetBool
    jmp RTCCPTR_PRE [g_pfnSSMR3GetBool xWrtRIP]
ENDPROC   SSMR3GetBool
BEGINPROC SSMR3GetGCPhys
    jmp RTCCPTR_PRE [g_pfnSSMR3GetGCPhys xWrtRIP]
ENDPROC   SSMR3GetGCPhys
BEGINPROC SSMR3GetGCPhys32
    jmp RTCCPTR_PRE [g_pfnSSMR3GetGCPhys32 xWrtRIP]
ENDPROC   SSMR3GetGCPhys32
BEGINPROC SSMR3GetGCPhys64
    jmp RTCCPTR_PRE [g_pfnSSMR3GetGCPhys64 xWrtRIP]
ENDPROC   SSMR3GetGCPhys64
BEGINPROC SSMR3GetGCPtr
    jmp RTCCPTR_PRE [g_pfnSSMR3GetGCPtr xWrtRIP]
ENDPROC   SSMR3GetGCPtr
BEGINPROC SSMR3GetGCUInt
    jmp RTCCPTR_PRE [g_pfnSSMR3GetGCUInt xWrtRIP]
ENDPROC   SSMR3GetGCUInt
BEGINPROC SSMR3GetGCUIntPtr
    jmp RTCCPTR_PRE [g_pfnSSMR3GetGCUIntPtr xWrtRIP]
ENDPROC   SSMR3GetGCUIntPtr
BEGINPROC SSMR3GetGCUIntReg
    jmp RTCCPTR_PRE [g_pfnSSMR3GetGCUIntReg xWrtRIP]
ENDPROC   SSMR3GetGCUIntReg
BEGINPROC SSMR3GetIOPort
    jmp RTCCPTR_PRE [g_pfnSSMR3GetIOPort xWrtRIP]
ENDPROC   SSMR3GetIOPort
BEGINPROC SSMR3GetMem
    jmp RTCCPTR_PRE [g_pfnSSMR3GetMem xWrtRIP]
ENDPROC   SSMR3GetMem
BEGINPROC SSMR3GetRCPtr
    jmp RTCCPTR_PRE [g_pfnSSMR3GetRCPtr xWrtRIP]
ENDPROC   SSMR3GetRCPtr
BEGINPROC SSMR3GetS128
    jmp RTCCPTR_PRE [g_pfnSSMR3GetS128 xWrtRIP]
ENDPROC   SSMR3GetS128
BEGINPROC SSMR3GetS16
    jmp RTCCPTR_PRE [g_pfnSSMR3GetS16 xWrtRIP]
ENDPROC   SSMR3GetS16
BEGINPROC SSMR3GetS32
    jmp RTCCPTR_PRE [g_pfnSSMR3GetS32 xWrtRIP]
ENDPROC   SSMR3GetS32
BEGINPROC SSMR3GetS64
    jmp RTCCPTR_PRE [g_pfnSSMR3GetS64 xWrtRIP]
ENDPROC   SSMR3GetS64
BEGINPROC SSMR3GetS8
    jmp RTCCPTR_PRE [g_pfnSSMR3GetS8 xWrtRIP]
ENDPROC   SSMR3GetS8
BEGINPROC SSMR3GetSInt
    jmp RTCCPTR_PRE [g_pfnSSMR3GetSInt xWrtRIP]
ENDPROC   SSMR3GetSInt
BEGINPROC SSMR3GetSel
    jmp RTCCPTR_PRE [g_pfnSSMR3GetSel xWrtRIP]
ENDPROC   SSMR3GetSel
BEGINPROC SSMR3GetStrZ
    jmp RTCCPTR_PRE [g_pfnSSMR3GetStrZ xWrtRIP]
ENDPROC   SSMR3GetStrZ
BEGINPROC SSMR3GetStrZEx
    jmp RTCCPTR_PRE [g_pfnSSMR3GetStrZEx xWrtRIP]
ENDPROC   SSMR3GetStrZEx
BEGINPROC SSMR3GetStruct
    jmp RTCCPTR_PRE [g_pfnSSMR3GetStruct xWrtRIP]
ENDPROC   SSMR3GetStruct
BEGINPROC SSMR3GetStructEx
    jmp RTCCPTR_PRE [g_pfnSSMR3GetStructEx xWrtRIP]
ENDPROC   SSMR3GetStructEx
BEGINPROC SSMR3GetU128
    jmp RTCCPTR_PRE [g_pfnSSMR3GetU128 xWrtRIP]
ENDPROC   SSMR3GetU128
BEGINPROC SSMR3GetU16
    jmp RTCCPTR_PRE [g_pfnSSMR3GetU16 xWrtRIP]
ENDPROC   SSMR3GetU16
BEGINPROC SSMR3GetU32
    jmp RTCCPTR_PRE [g_pfnSSMR3GetU32 xWrtRIP]
ENDPROC   SSMR3GetU32
BEGINPROC SSMR3GetU64
    jmp RTCCPTR_PRE [g_pfnSSMR3GetU64 xWrtRIP]
ENDPROC   SSMR3GetU64
BEGINPROC SSMR3GetU8
    jmp RTCCPTR_PRE [g_pfnSSMR3GetU8 xWrtRIP]
ENDPROC   SSMR3GetU8
BEGINPROC SSMR3GetUInt
    jmp RTCCPTR_PRE [g_pfnSSMR3GetUInt xWrtRIP]
ENDPROC   SSMR3GetUInt
BEGINPROC SSMR3HandleGetAfter
    jmp RTCCPTR_PRE [g_pfnSSMR3HandleGetAfter xWrtRIP]
ENDPROC   SSMR3HandleGetAfter
BEGINPROC SSMR3HandleGetStatus
    jmp RTCCPTR_PRE [g_pfnSSMR3HandleGetStatus xWrtRIP]
ENDPROC   SSMR3HandleGetStatus
BEGINPROC SSMR3HandleHostBits
    jmp RTCCPTR_PRE [g_pfnSSMR3HandleHostBits xWrtRIP]
ENDPROC   SSMR3HandleHostBits
BEGINPROC SSMR3HandleHostOSAndArch
    jmp RTCCPTR_PRE [g_pfnSSMR3HandleHostOSAndArch xWrtRIP]
ENDPROC   SSMR3HandleHostOSAndArch
BEGINPROC SSMR3HandleIsLiveSave
    jmp RTCCPTR_PRE [g_pfnSSMR3HandleIsLiveSave xWrtRIP]
ENDPROC   SSMR3HandleIsLiveSave
BEGINPROC SSMR3HandleMaxDowntime
    jmp RTCCPTR_PRE [g_pfnSSMR3HandleMaxDowntime xWrtRIP]
ENDPROC   SSMR3HandleMaxDowntime
BEGINPROC SSMR3HandleReportLivePercent
    jmp RTCCPTR_PRE [g_pfnSSMR3HandleReportLivePercent xWrtRIP]
ENDPROC   SSMR3HandleReportLivePercent
BEGINPROC SSMR3HandleRevision
    jmp RTCCPTR_PRE [g_pfnSSMR3HandleRevision xWrtRIP]
ENDPROC   SSMR3HandleRevision
BEGINPROC SSMR3HandleSetStatus
    jmp RTCCPTR_PRE [g_pfnSSMR3HandleSetStatus xWrtRIP]
ENDPROC   SSMR3HandleSetStatus
BEGINPROC SSMR3HandleVersion
    jmp RTCCPTR_PRE [g_pfnSSMR3HandleVersion xWrtRIP]
ENDPROC   SSMR3HandleVersion
BEGINPROC SSMR3Open
    jmp RTCCPTR_PRE [g_pfnSSMR3Open xWrtRIP]
ENDPROC   SSMR3Open
BEGINPROC SSMR3PutBool
    jmp RTCCPTR_PRE [g_pfnSSMR3PutBool xWrtRIP]
ENDPROC   SSMR3PutBool
BEGINPROC SSMR3PutGCPhys
    jmp RTCCPTR_PRE [g_pfnSSMR3PutGCPhys xWrtRIP]
ENDPROC   SSMR3PutGCPhys
BEGINPROC SSMR3PutGCPhys32
    jmp RTCCPTR_PRE [g_pfnSSMR3PutGCPhys32 xWrtRIP]
ENDPROC   SSMR3PutGCPhys32
BEGINPROC SSMR3PutGCPhys64
    jmp RTCCPTR_PRE [g_pfnSSMR3PutGCPhys64 xWrtRIP]
ENDPROC   SSMR3PutGCPhys64
BEGINPROC SSMR3PutGCPtr
    jmp RTCCPTR_PRE [g_pfnSSMR3PutGCPtr xWrtRIP]
ENDPROC   SSMR3PutGCPtr
BEGINPROC SSMR3PutGCUInt
    jmp RTCCPTR_PRE [g_pfnSSMR3PutGCUInt xWrtRIP]
ENDPROC   SSMR3PutGCUInt
BEGINPROC SSMR3PutGCUIntPtr
    jmp RTCCPTR_PRE [g_pfnSSMR3PutGCUIntPtr xWrtRIP]
ENDPROC   SSMR3PutGCUIntPtr
BEGINPROC SSMR3PutGCUIntReg
    jmp RTCCPTR_PRE [g_pfnSSMR3PutGCUIntReg xWrtRIP]
ENDPROC   SSMR3PutGCUIntReg
BEGINPROC SSMR3PutIOPort
    jmp RTCCPTR_PRE [g_pfnSSMR3PutIOPort xWrtRIP]
ENDPROC   SSMR3PutIOPort
BEGINPROC SSMR3PutMem
    jmp RTCCPTR_PRE [g_pfnSSMR3PutMem xWrtRIP]
ENDPROC   SSMR3PutMem
BEGINPROC SSMR3PutRCPtr
    jmp RTCCPTR_PRE [g_pfnSSMR3PutRCPtr xWrtRIP]
ENDPROC   SSMR3PutRCPtr
BEGINPROC SSMR3PutS128
    jmp RTCCPTR_PRE [g_pfnSSMR3PutS128 xWrtRIP]
ENDPROC   SSMR3PutS128
BEGINPROC SSMR3PutS16
    jmp RTCCPTR_PRE [g_pfnSSMR3PutS16 xWrtRIP]
ENDPROC   SSMR3PutS16
BEGINPROC SSMR3PutS32
    jmp RTCCPTR_PRE [g_pfnSSMR3PutS32 xWrtRIP]
ENDPROC   SSMR3PutS32
BEGINPROC SSMR3PutS64
    jmp RTCCPTR_PRE [g_pfnSSMR3PutS64 xWrtRIP]
ENDPROC   SSMR3PutS64
BEGINPROC SSMR3PutS8
    jmp RTCCPTR_PRE [g_pfnSSMR3PutS8 xWrtRIP]
ENDPROC   SSMR3PutS8
BEGINPROC SSMR3PutSInt
    jmp RTCCPTR_PRE [g_pfnSSMR3PutSInt xWrtRIP]
ENDPROC   SSMR3PutSInt
BEGINPROC SSMR3PutSel
    jmp RTCCPTR_PRE [g_pfnSSMR3PutSel xWrtRIP]
ENDPROC   SSMR3PutSel
BEGINPROC SSMR3PutStrZ
    jmp RTCCPTR_PRE [g_pfnSSMR3PutStrZ xWrtRIP]
ENDPROC   SSMR3PutStrZ
BEGINPROC SSMR3PutStruct
    jmp RTCCPTR_PRE [g_pfnSSMR3PutStruct xWrtRIP]
ENDPROC   SSMR3PutStruct
BEGINPROC SSMR3PutStructEx
    jmp RTCCPTR_PRE [g_pfnSSMR3PutStructEx xWrtRIP]
ENDPROC   SSMR3PutStructEx
BEGINPROC SSMR3PutU128
    jmp RTCCPTR_PRE [g_pfnSSMR3PutU128 xWrtRIP]
ENDPROC   SSMR3PutU128
BEGINPROC SSMR3PutU16
    jmp RTCCPTR_PRE [g_pfnSSMR3PutU16 xWrtRIP]
ENDPROC   SSMR3PutU16
BEGINPROC SSMR3PutU32
    jmp RTCCPTR_PRE [g_pfnSSMR3PutU32 xWrtRIP]
ENDPROC   SSMR3PutU32
BEGINPROC SSMR3PutU64
    jmp RTCCPTR_PRE [g_pfnSSMR3PutU64 xWrtRIP]
ENDPROC   SSMR3PutU64
BEGINPROC SSMR3PutU8
    jmp RTCCPTR_PRE [g_pfnSSMR3PutU8 xWrtRIP]
ENDPROC   SSMR3PutU8
BEGINPROC SSMR3PutUInt
    jmp RTCCPTR_PRE [g_pfnSSMR3PutUInt xWrtRIP]
ENDPROC   SSMR3PutUInt
BEGINPROC SSMR3Seek
    jmp RTCCPTR_PRE [g_pfnSSMR3Seek xWrtRIP]
ENDPROC   SSMR3Seek
BEGINPROC SSMR3SetCfgError
    jmp RTCCPTR_PRE [g_pfnSSMR3SetCfgError xWrtRIP]
ENDPROC   SSMR3SetCfgError
BEGINPROC SSMR3SetLoadError
    jmp RTCCPTR_PRE [g_pfnSSMR3SetLoadError xWrtRIP]
ENDPROC   SSMR3SetLoadError
BEGINPROC SSMR3SetLoadErrorV
    jmp RTCCPTR_PRE [g_pfnSSMR3SetLoadErrorV xWrtRIP]
ENDPROC   SSMR3SetLoadErrorV
BEGINPROC SSMR3Skip
    jmp RTCCPTR_PRE [g_pfnSSMR3Skip xWrtRIP]
ENDPROC   SSMR3Skip
BEGINPROC SSMR3SkipToEndOfUnit
    jmp RTCCPTR_PRE [g_pfnSSMR3SkipToEndOfUnit xWrtRIP]
ENDPROC   SSMR3SkipToEndOfUnit
BEGINPROC SSMR3ValidateFile
    jmp RTCCPTR_PRE [g_pfnSSMR3ValidateFile xWrtRIP]
ENDPROC   SSMR3ValidateFile
BEGINPROC SSMR3Cancel
    jmp RTCCPTR_PRE [g_pfnSSMR3Cancel xWrtRIP]
ENDPROC   SSMR3Cancel
BEGINPROC SSMR3RegisterExternal
    jmp RTCCPTR_PRE [g_pfnSSMR3RegisterExternal xWrtRIP]
ENDPROC   SSMR3RegisterExternal
BEGINPROC STAMR3Dump
    jmp RTCCPTR_PRE [g_pfnSTAMR3Dump xWrtRIP]
ENDPROC   STAMR3Dump
BEGINPROC STAMR3Enum
    jmp RTCCPTR_PRE [g_pfnSTAMR3Enum xWrtRIP]
ENDPROC   STAMR3Enum
BEGINPROC STAMR3Reset
    jmp RTCCPTR_PRE [g_pfnSTAMR3Reset xWrtRIP]
ENDPROC   STAMR3Reset
BEGINPROC STAMR3Snapshot
    jmp RTCCPTR_PRE [g_pfnSTAMR3Snapshot xWrtRIP]
ENDPROC   STAMR3Snapshot
BEGINPROC STAMR3SnapshotFree
    jmp RTCCPTR_PRE [g_pfnSTAMR3SnapshotFree xWrtRIP]
ENDPROC   STAMR3SnapshotFree
BEGINPROC STAMR3GetUnit
    jmp RTCCPTR_PRE [g_pfnSTAMR3GetUnit xWrtRIP]
ENDPROC   STAMR3GetUnit
BEGINPROC TMR3TimerSetCritSect
    jmp RTCCPTR_PRE [g_pfnTMR3TimerSetCritSect xWrtRIP]
ENDPROC   TMR3TimerSetCritSect
BEGINPROC TMR3TimerLoad
    jmp RTCCPTR_PRE [g_pfnTMR3TimerLoad xWrtRIP]
ENDPROC   TMR3TimerLoad
BEGINPROC TMR3TimerSave
    jmp RTCCPTR_PRE [g_pfnTMR3TimerSave xWrtRIP]
ENDPROC   TMR3TimerSave
BEGINPROC TMR3TimerDestroy
    jmp RTCCPTR_PRE [g_pfnTMR3TimerDestroy xWrtRIP]
ENDPROC   TMR3TimerDestroy
BEGINPROC TMTimerFromMicro
    jmp RTCCPTR_PRE [g_pfnTMTimerFromMicro xWrtRIP]
ENDPROC   TMTimerFromMicro
BEGINPROC TMTimerFromMilli
    jmp RTCCPTR_PRE [g_pfnTMTimerFromMilli xWrtRIP]
ENDPROC   TMTimerFromMilli
BEGINPROC TMTimerFromNano
    jmp RTCCPTR_PRE [g_pfnTMTimerFromNano xWrtRIP]
ENDPROC   TMTimerFromNano
BEGINPROC TMTimerGet
    jmp RTCCPTR_PRE [g_pfnTMTimerGet xWrtRIP]
ENDPROC   TMTimerGet
BEGINPROC TMTimerGetFreq
    jmp RTCCPTR_PRE [g_pfnTMTimerGetFreq xWrtRIP]
ENDPROC   TMTimerGetFreq
BEGINPROC TMTimerGetMicro
    jmp RTCCPTR_PRE [g_pfnTMTimerGetMicro xWrtRIP]
ENDPROC   TMTimerGetMicro
BEGINPROC TMTimerGetMilli
    jmp RTCCPTR_PRE [g_pfnTMTimerGetMilli xWrtRIP]
ENDPROC   TMTimerGetMilli
BEGINPROC TMTimerGetNano
    jmp RTCCPTR_PRE [g_pfnTMTimerGetNano xWrtRIP]
ENDPROC   TMTimerGetNano
BEGINPROC TMTimerIsActive
    jmp RTCCPTR_PRE [g_pfnTMTimerIsActive xWrtRIP]
ENDPROC   TMTimerIsActive
BEGINPROC TMTimerIsLockOwner
    jmp RTCCPTR_PRE [g_pfnTMTimerIsLockOwner xWrtRIP]
ENDPROC   TMTimerIsLockOwner
BEGINPROC TMTimerLock
    jmp RTCCPTR_PRE [g_pfnTMTimerLock xWrtRIP]
ENDPROC   TMTimerLock
BEGINPROC TMTimerR0Ptr
    jmp RTCCPTR_PRE [g_pfnTMTimerR0Ptr xWrtRIP]
ENDPROC   TMTimerR0Ptr
BEGINPROC TMTimerR3Ptr
    jmp RTCCPTR_PRE [g_pfnTMTimerR3Ptr xWrtRIP]
ENDPROC   TMTimerR3Ptr
BEGINPROC TMTimerRCPtr
    jmp RTCCPTR_PRE [g_pfnTMTimerRCPtr xWrtRIP]
ENDPROC   TMTimerRCPtr
BEGINPROC TMTimerSet
    jmp RTCCPTR_PRE [g_pfnTMTimerSet xWrtRIP]
ENDPROC   TMTimerSet
BEGINPROC TMTimerSetFrequencyHint
    jmp RTCCPTR_PRE [g_pfnTMTimerSetFrequencyHint xWrtRIP]
ENDPROC   TMTimerSetFrequencyHint
BEGINPROC TMTimerSetMicro
    jmp RTCCPTR_PRE [g_pfnTMTimerSetMicro xWrtRIP]
ENDPROC   TMTimerSetMicro
BEGINPROC TMTimerSetMillies
    jmp RTCCPTR_PRE [g_pfnTMTimerSetMillies xWrtRIP]
ENDPROC   TMTimerSetMillies
BEGINPROC TMTimerSetNano
    jmp RTCCPTR_PRE [g_pfnTMTimerSetNano xWrtRIP]
ENDPROC   TMTimerSetNano
BEGINPROC TMTimerSetRelative
    jmp RTCCPTR_PRE [g_pfnTMTimerSetRelative xWrtRIP]
ENDPROC   TMTimerSetRelative
BEGINPROC TMTimerStop
    jmp RTCCPTR_PRE [g_pfnTMTimerStop xWrtRIP]
ENDPROC   TMTimerStop
BEGINPROC TMTimerToMicro
    jmp RTCCPTR_PRE [g_pfnTMTimerToMicro xWrtRIP]
ENDPROC   TMTimerToMicro
BEGINPROC TMTimerToMilli
    jmp RTCCPTR_PRE [g_pfnTMTimerToMilli xWrtRIP]
ENDPROC   TMTimerToMilli
BEGINPROC TMTimerToNano
    jmp RTCCPTR_PRE [g_pfnTMTimerToNano xWrtRIP]
ENDPROC   TMTimerToNano
BEGINPROC TMTimerUnlock
    jmp RTCCPTR_PRE [g_pfnTMTimerUnlock xWrtRIP]
ENDPROC   TMTimerUnlock
BEGINPROC TMR3GetWarpDrive
    jmp RTCCPTR_PRE [g_pfnTMR3GetWarpDrive xWrtRIP]
ENDPROC   TMR3GetWarpDrive
BEGINPROC TMR3SetWarpDrive
    jmp RTCCPTR_PRE [g_pfnTMR3SetWarpDrive xWrtRIP]
ENDPROC   TMR3SetWarpDrive
BEGINPROC VMMGetCpu
    jmp RTCCPTR_PRE [g_pfnVMMGetCpu xWrtRIP]
ENDPROC   VMMGetCpu
BEGINPROC VMMGetSvnRev
    jmp RTCCPTR_PRE [g_pfnVMMGetSvnRev xWrtRIP]
ENDPROC   VMMGetSvnRev
BEGINPROC VMSetError
    jmp RTCCPTR_PRE [g_pfnVMSetError xWrtRIP]
ENDPROC   VMSetError
BEGINPROC VMSetErrorV
    jmp RTCCPTR_PRE [g_pfnVMSetErrorV xWrtRIP]
ENDPROC   VMSetErrorV
BEGINPROC VMR3AtErrorDeregister
    jmp RTCCPTR_PRE [g_pfnVMR3AtErrorDeregister xWrtRIP]
ENDPROC   VMR3AtErrorDeregister
BEGINPROC VMR3AtErrorRegister
    jmp RTCCPTR_PRE [g_pfnVMR3AtErrorRegister xWrtRIP]
ENDPROC   VMR3AtErrorRegister
BEGINPROC VMR3AtRuntimeErrorRegister
    jmp RTCCPTR_PRE [g_pfnVMR3AtRuntimeErrorRegister xWrtRIP]
ENDPROC   VMR3AtRuntimeErrorRegister
BEGINPROC VMR3AtStateRegister
    jmp RTCCPTR_PRE [g_pfnVMR3AtStateRegister xWrtRIP]
ENDPROC   VMR3AtStateRegister
BEGINPROC VMR3Create
    jmp RTCCPTR_PRE [g_pfnVMR3Create xWrtRIP]
ENDPROC   VMR3Create
BEGINPROC VMR3Destroy
    jmp RTCCPTR_PRE [g_pfnVMR3Destroy xWrtRIP]
ENDPROC   VMR3Destroy
BEGINPROC VMR3GetCpuCoreAndPackageIdFromCpuId
    jmp RTCCPTR_PRE [g_pfnVMR3GetCpuCoreAndPackageIdFromCpuId xWrtRIP]
ENDPROC   VMR3GetCpuCoreAndPackageIdFromCpuId
BEGINPROC VMR3GetStateName
    jmp RTCCPTR_PRE [g_pfnVMR3GetStateName xWrtRIP]
ENDPROC   VMR3GetStateName
BEGINPROC VMR3GetStateU
    jmp RTCCPTR_PRE [g_pfnVMR3GetStateU xWrtRIP]
ENDPROC   VMR3GetStateU
BEGINPROC VMR3GetVM
    jmp RTCCPTR_PRE [g_pfnVMR3GetVM xWrtRIP]
ENDPROC   VMR3GetVM
BEGINPROC VMR3HotPlugCpu
    jmp RTCCPTR_PRE [g_pfnVMR3HotPlugCpu xWrtRIP]
ENDPROC   VMR3HotPlugCpu
BEGINPROC VMR3HotUnplugCpu
    jmp RTCCPTR_PRE [g_pfnVMR3HotUnplugCpu xWrtRIP]
ENDPROC   VMR3HotUnplugCpu
BEGINPROC VMR3LoadFromFile
    jmp RTCCPTR_PRE [g_pfnVMR3LoadFromFile xWrtRIP]
ENDPROC   VMR3LoadFromFile
BEGINPROC VMR3LoadFromStream
    jmp RTCCPTR_PRE [g_pfnVMR3LoadFromStream xWrtRIP]
ENDPROC   VMR3LoadFromStream
BEGINPROC VMR3PowerOff
    jmp RTCCPTR_PRE [g_pfnVMR3PowerOff xWrtRIP]
ENDPROC   VMR3PowerOff
BEGINPROC VMR3PowerOn
    jmp RTCCPTR_PRE [g_pfnVMR3PowerOn xWrtRIP]
ENDPROC   VMR3PowerOn
BEGINPROC VMR3ReleaseUVM
    jmp RTCCPTR_PRE [g_pfnVMR3ReleaseUVM xWrtRIP]
ENDPROC   VMR3ReleaseUVM
BEGINPROC VMR3ReqCallNoWaitU
    jmp RTCCPTR_PRE [g_pfnVMR3ReqCallNoWaitU xWrtRIP]
ENDPROC   VMR3ReqCallNoWaitU
BEGINPROC VMR3ReqCallU
    jmp RTCCPTR_PRE [g_pfnVMR3ReqCallU xWrtRIP]
ENDPROC   VMR3ReqCallU
BEGINPROC VMR3ReqCallVoidWaitU
    jmp RTCCPTR_PRE [g_pfnVMR3ReqCallVoidWaitU xWrtRIP]
ENDPROC   VMR3ReqCallVoidWaitU
BEGINPROC VMR3ReqCallWaitU
    jmp RTCCPTR_PRE [g_pfnVMR3ReqCallWaitU xWrtRIP]
ENDPROC   VMR3ReqCallWaitU
BEGINPROC VMR3ReqFree
    jmp RTCCPTR_PRE [g_pfnVMR3ReqFree xWrtRIP]
ENDPROC   VMR3ReqFree
BEGINPROC VMR3ReqPriorityCallWaitU
    jmp RTCCPTR_PRE [g_pfnVMR3ReqPriorityCallWaitU xWrtRIP]
ENDPROC   VMR3ReqPriorityCallWaitU
BEGINPROC VMR3ReqWait
    jmp RTCCPTR_PRE [g_pfnVMR3ReqWait xWrtRIP]
ENDPROC   VMR3ReqWait
BEGINPROC VMR3Reset
    jmp RTCCPTR_PRE [g_pfnVMR3Reset xWrtRIP]
ENDPROC   VMR3Reset
BEGINPROC VMR3Resume
    jmp RTCCPTR_PRE [g_pfnVMR3Resume xWrtRIP]
ENDPROC   VMR3Resume
BEGINPROC VMR3RetainUVM
    jmp RTCCPTR_PRE [g_pfnVMR3RetainUVM xWrtRIP]
ENDPROC   VMR3RetainUVM
BEGINPROC VMR3Save
    jmp RTCCPTR_PRE [g_pfnVMR3Save xWrtRIP]
ENDPROC   VMR3Save
BEGINPROC VMR3SetCpuExecutionCap
    jmp RTCCPTR_PRE [g_pfnVMR3SetCpuExecutionCap xWrtRIP]
ENDPROC   VMR3SetCpuExecutionCap
BEGINPROC VMR3SetError
    jmp RTCCPTR_PRE [g_pfnVMR3SetError xWrtRIP]
ENDPROC   VMR3SetError
BEGINPROC VMR3SetPowerOffInsteadOfReset
    jmp RTCCPTR_PRE [g_pfnVMR3SetPowerOffInsteadOfReset xWrtRIP]
ENDPROC   VMR3SetPowerOffInsteadOfReset
BEGINPROC VMR3Suspend
    jmp RTCCPTR_PRE [g_pfnVMR3Suspend xWrtRIP]
ENDPROC   VMR3Suspend
BEGINPROC VMR3Teleport
    jmp RTCCPTR_PRE [g_pfnVMR3Teleport xWrtRIP]
ENDPROC   VMR3Teleport
BEGINPROC VMR3AtStateDeregister
    jmp RTCCPTR_PRE [g_pfnVMR3AtStateDeregister xWrtRIP]
ENDPROC   VMR3AtStateDeregister
BEGINPROC VMR3GetUVM
    jmp RTCCPTR_PRE [g_pfnVMR3GetUVM xWrtRIP]
ENDPROC   VMR3GetUVM


;
; Import pointers. Initialized to point a lazy loading stubs.
;
BEGINDATA
g_apfnImports:
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3GetRoot
__imp_CFGMR3GetRoot:
%endif
g_pfnCFGMR3GetRoot RTCCPTR_DEF ___LazyLoad___CFGMR3GetRoot
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3GetFirstChild
__imp_CFGMR3GetFirstChild:
%endif
g_pfnCFGMR3GetFirstChild RTCCPTR_DEF ___LazyLoad___CFGMR3GetFirstChild
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3GetNextChild
__imp_CFGMR3GetNextChild:
%endif
g_pfnCFGMR3GetNextChild RTCCPTR_DEF ___LazyLoad___CFGMR3GetNextChild
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3GetNameLen
__imp_CFGMR3GetNameLen:
%endif
g_pfnCFGMR3GetNameLen RTCCPTR_DEF ___LazyLoad___CFGMR3GetNameLen
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3GetFirstValue
__imp_CFGMR3GetFirstValue:
%endif
g_pfnCFGMR3GetFirstValue RTCCPTR_DEF ___LazyLoad___CFGMR3GetFirstValue
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3GetNextValue
__imp_CFGMR3GetNextValue:
%endif
g_pfnCFGMR3GetNextValue RTCCPTR_DEF ___LazyLoad___CFGMR3GetNextValue
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3GetValueNameLen
__imp_CFGMR3GetValueNameLen:
%endif
g_pfnCFGMR3GetValueNameLen RTCCPTR_DEF ___LazyLoad___CFGMR3GetValueNameLen
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3GetValueType
__imp_CFGMR3GetValueType:
%endif
g_pfnCFGMR3GetValueType RTCCPTR_DEF ___LazyLoad___CFGMR3GetValueType
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3Dump
__imp_CFGMR3Dump:
%endif
g_pfnCFGMR3Dump RTCCPTR_DEF ___LazyLoad___CFGMR3Dump
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3CreateTree
__imp_CFGMR3CreateTree:
%endif
g_pfnCFGMR3CreateTree RTCCPTR_DEF ___LazyLoad___CFGMR3CreateTree
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3DestroyTree
__imp_CFGMR3DestroyTree:
%endif
g_pfnCFGMR3DestroyTree RTCCPTR_DEF ___LazyLoad___CFGMR3DestroyTree
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3GetValueName
__imp_CFGMR3GetValueName:
%endif
g_pfnCFGMR3GetValueName RTCCPTR_DEF ___LazyLoad___CFGMR3GetValueName
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3GetName
__imp_CFGMR3GetName:
%endif
g_pfnCFGMR3GetName RTCCPTR_DEF ___LazyLoad___CFGMR3GetName
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3RemoveNode
__imp_CFGMR3RemoveNode:
%endif
g_pfnCFGMR3RemoveNode RTCCPTR_DEF ___LazyLoad___CFGMR3RemoveNode
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3InsertBytes
__imp_CFGMR3InsertBytes:
%endif
g_pfnCFGMR3InsertBytes RTCCPTR_DEF ___LazyLoad___CFGMR3InsertBytes
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3InsertStringFV
__imp_CFGMR3InsertStringFV:
%endif
g_pfnCFGMR3InsertStringFV RTCCPTR_DEF ___LazyLoad___CFGMR3InsertStringFV
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3InsertStringF
__imp_CFGMR3InsertStringF:
%endif
g_pfnCFGMR3InsertStringF RTCCPTR_DEF ___LazyLoad___CFGMR3InsertStringF
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3InsertStringN
__imp_CFGMR3InsertStringN:
%endif
g_pfnCFGMR3InsertStringN RTCCPTR_DEF ___LazyLoad___CFGMR3InsertStringN
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3InsertString
__imp_CFGMR3InsertString:
%endif
g_pfnCFGMR3InsertString RTCCPTR_DEF ___LazyLoad___CFGMR3InsertString
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3InsertStringW
__imp_CFGMR3InsertStringW:
%endif
g_pfnCFGMR3InsertStringW RTCCPTR_DEF ___LazyLoad___CFGMR3InsertStringW
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3InsertInteger
__imp_CFGMR3InsertInteger:
%endif
g_pfnCFGMR3InsertInteger RTCCPTR_DEF ___LazyLoad___CFGMR3InsertInteger
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryStringAllocDef
__imp_CFGMR3QueryStringAllocDef:
%endif
g_pfnCFGMR3QueryStringAllocDef RTCCPTR_DEF ___LazyLoad___CFGMR3QueryStringAllocDef
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3RemoveValue
__imp_CFGMR3RemoveValue:
%endif
g_pfnCFGMR3RemoveValue RTCCPTR_DEF ___LazyLoad___CFGMR3RemoveValue
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryIntegerDef
__imp_CFGMR3QueryIntegerDef:
%endif
g_pfnCFGMR3QueryIntegerDef RTCCPTR_DEF ___LazyLoad___CFGMR3QueryIntegerDef
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryGCPtrSDef
__imp_CFGMR3QueryGCPtrSDef:
%endif
g_pfnCFGMR3QueryGCPtrSDef RTCCPTR_DEF ___LazyLoad___CFGMR3QueryGCPtrSDef
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryGCPtrUDef
__imp_CFGMR3QueryGCPtrUDef:
%endif
g_pfnCFGMR3QueryGCPtrUDef RTCCPTR_DEF ___LazyLoad___CFGMR3QueryGCPtrUDef
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryGCPtrDef
__imp_CFGMR3QueryGCPtrDef:
%endif
g_pfnCFGMR3QueryGCPtrDef RTCCPTR_DEF ___LazyLoad___CFGMR3QueryGCPtrDef
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryPtrDef
__imp_CFGMR3QueryPtrDef:
%endif
g_pfnCFGMR3QueryPtrDef RTCCPTR_DEF ___LazyLoad___CFGMR3QueryPtrDef
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryBoolDef
__imp_CFGMR3QueryBoolDef:
%endif
g_pfnCFGMR3QueryBoolDef RTCCPTR_DEF ___LazyLoad___CFGMR3QueryBoolDef
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryS8Def
__imp_CFGMR3QueryS8Def:
%endif
g_pfnCFGMR3QueryS8Def RTCCPTR_DEF ___LazyLoad___CFGMR3QueryS8Def
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryU8Def
__imp_CFGMR3QueryU8Def:
%endif
g_pfnCFGMR3QueryU8Def RTCCPTR_DEF ___LazyLoad___CFGMR3QueryU8Def
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryS16Def
__imp_CFGMR3QueryS16Def:
%endif
g_pfnCFGMR3QueryS16Def RTCCPTR_DEF ___LazyLoad___CFGMR3QueryS16Def
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryU16Def
__imp_CFGMR3QueryU16Def:
%endif
g_pfnCFGMR3QueryU16Def RTCCPTR_DEF ___LazyLoad___CFGMR3QueryU16Def
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryPortDef
__imp_CFGMR3QueryPortDef:
%endif
g_pfnCFGMR3QueryPortDef RTCCPTR_DEF ___LazyLoad___CFGMR3QueryPortDef
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryS32Def
__imp_CFGMR3QueryS32Def:
%endif
g_pfnCFGMR3QueryS32Def RTCCPTR_DEF ___LazyLoad___CFGMR3QueryS32Def
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QuerySIntDef
__imp_CFGMR3QuerySIntDef:
%endif
g_pfnCFGMR3QuerySIntDef RTCCPTR_DEF ___LazyLoad___CFGMR3QuerySIntDef
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryU32Def
__imp_CFGMR3QueryU32Def:
%endif
g_pfnCFGMR3QueryU32Def RTCCPTR_DEF ___LazyLoad___CFGMR3QueryU32Def
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryUIntDef
__imp_CFGMR3QueryUIntDef:
%endif
g_pfnCFGMR3QueryUIntDef RTCCPTR_DEF ___LazyLoad___CFGMR3QueryUIntDef
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryS64Def
__imp_CFGMR3QueryS64Def:
%endif
g_pfnCFGMR3QueryS64Def RTCCPTR_DEF ___LazyLoad___CFGMR3QueryS64Def
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryU64Def
__imp_CFGMR3QueryU64Def:
%endif
g_pfnCFGMR3QueryU64Def RTCCPTR_DEF ___LazyLoad___CFGMR3QueryU64Def
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryInteger
__imp_CFGMR3QueryInteger:
%endif
g_pfnCFGMR3QueryInteger RTCCPTR_DEF ___LazyLoad___CFGMR3QueryInteger
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryGCPtrS
__imp_CFGMR3QueryGCPtrS:
%endif
g_pfnCFGMR3QueryGCPtrS RTCCPTR_DEF ___LazyLoad___CFGMR3QueryGCPtrS
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryGCPtrU
__imp_CFGMR3QueryGCPtrU:
%endif
g_pfnCFGMR3QueryGCPtrU RTCCPTR_DEF ___LazyLoad___CFGMR3QueryGCPtrU
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryGCPtr
__imp_CFGMR3QueryGCPtr:
%endif
g_pfnCFGMR3QueryGCPtr RTCCPTR_DEF ___LazyLoad___CFGMR3QueryGCPtr
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryPtr
__imp_CFGMR3QueryPtr:
%endif
g_pfnCFGMR3QueryPtr RTCCPTR_DEF ___LazyLoad___CFGMR3QueryPtr
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryBool
__imp_CFGMR3QueryBool:
%endif
g_pfnCFGMR3QueryBool RTCCPTR_DEF ___LazyLoad___CFGMR3QueryBool
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryS8
__imp_CFGMR3QueryS8:
%endif
g_pfnCFGMR3QueryS8 RTCCPTR_DEF ___LazyLoad___CFGMR3QueryS8
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryU8
__imp_CFGMR3QueryU8:
%endif
g_pfnCFGMR3QueryU8 RTCCPTR_DEF ___LazyLoad___CFGMR3QueryU8
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryS16
__imp_CFGMR3QueryS16:
%endif
g_pfnCFGMR3QueryS16 RTCCPTR_DEF ___LazyLoad___CFGMR3QueryS16
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryU16
__imp_CFGMR3QueryU16:
%endif
g_pfnCFGMR3QueryU16 RTCCPTR_DEF ___LazyLoad___CFGMR3QueryU16
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryPort
__imp_CFGMR3QueryPort:
%endif
g_pfnCFGMR3QueryPort RTCCPTR_DEF ___LazyLoad___CFGMR3QueryPort
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryS32
__imp_CFGMR3QueryS32:
%endif
g_pfnCFGMR3QueryS32 RTCCPTR_DEF ___LazyLoad___CFGMR3QueryS32
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QuerySInt
__imp_CFGMR3QuerySInt:
%endif
g_pfnCFGMR3QuerySInt RTCCPTR_DEF ___LazyLoad___CFGMR3QuerySInt
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryU32
__imp_CFGMR3QueryU32:
%endif
g_pfnCFGMR3QueryU32 RTCCPTR_DEF ___LazyLoad___CFGMR3QueryU32
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryUInt
__imp_CFGMR3QueryUInt:
%endif
g_pfnCFGMR3QueryUInt RTCCPTR_DEF ___LazyLoad___CFGMR3QueryUInt
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryS64
__imp_CFGMR3QueryS64:
%endif
g_pfnCFGMR3QueryS64 RTCCPTR_DEF ___LazyLoad___CFGMR3QueryS64
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryU64
__imp_CFGMR3QueryU64:
%endif
g_pfnCFGMR3QueryU64 RTCCPTR_DEF ___LazyLoad___CFGMR3QueryU64
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QuerySize
__imp_CFGMR3QuerySize:
%endif
g_pfnCFGMR3QuerySize RTCCPTR_DEF ___LazyLoad___CFGMR3QuerySize
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryType
__imp_CFGMR3QueryType:
%endif
g_pfnCFGMR3QueryType RTCCPTR_DEF ___LazyLoad___CFGMR3QueryType
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3AreValuesValid
__imp_CFGMR3AreValuesValid:
%endif
g_pfnCFGMR3AreValuesValid RTCCPTR_DEF ___LazyLoad___CFGMR3AreValuesValid
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3AreChildrenValid
__imp_CFGMR3AreChildrenValid:
%endif
g_pfnCFGMR3AreChildrenValid RTCCPTR_DEF ___LazyLoad___CFGMR3AreChildrenValid
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3GetChildFV
__imp_CFGMR3GetChildFV:
%endif
g_pfnCFGMR3GetChildFV RTCCPTR_DEF ___LazyLoad___CFGMR3GetChildFV
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3GetChildF
__imp_CFGMR3GetChildF:
%endif
g_pfnCFGMR3GetChildF RTCCPTR_DEF ___LazyLoad___CFGMR3GetChildF
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3GetChild
__imp_CFGMR3GetChild:
%endif
g_pfnCFGMR3GetChild RTCCPTR_DEF ___LazyLoad___CFGMR3GetChild
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3InsertNode
__imp_CFGMR3InsertNode:
%endif
g_pfnCFGMR3InsertNode RTCCPTR_DEF ___LazyLoad___CFGMR3InsertNode
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3InsertNodeFV
__imp_CFGMR3InsertNodeFV:
%endif
g_pfnCFGMR3InsertNodeFV RTCCPTR_DEF ___LazyLoad___CFGMR3InsertNodeFV
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3InsertNodeF
__imp_CFGMR3InsertNodeF:
%endif
g_pfnCFGMR3InsertNodeF RTCCPTR_DEF ___LazyLoad___CFGMR3InsertNodeF
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3InsertSubTree
__imp_CFGMR3InsertSubTree:
%endif
g_pfnCFGMR3InsertSubTree RTCCPTR_DEF ___LazyLoad___CFGMR3InsertSubTree
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3ValidateConfig
__imp_CFGMR3ValidateConfig:
%endif
g_pfnCFGMR3ValidateConfig RTCCPTR_DEF ___LazyLoad___CFGMR3ValidateConfig
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryBytes
__imp_CFGMR3QueryBytes:
%endif
g_pfnCFGMR3QueryBytes RTCCPTR_DEF ___LazyLoad___CFGMR3QueryBytes
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryStringDef
__imp_CFGMR3QueryStringDef:
%endif
g_pfnCFGMR3QueryStringDef RTCCPTR_DEF ___LazyLoad___CFGMR3QueryStringDef
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryString
__imp_CFGMR3QueryString:
%endif
g_pfnCFGMR3QueryString RTCCPTR_DEF ___LazyLoad___CFGMR3QueryString
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3QueryStringAlloc
__imp_CFGMR3QueryStringAlloc:
%endif
g_pfnCFGMR3QueryStringAlloc RTCCPTR_DEF ___LazyLoad___CFGMR3QueryStringAlloc
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3GetParent
__imp_CFGMR3GetParent:
%endif
g_pfnCFGMR3GetParent RTCCPTR_DEF ___LazyLoad___CFGMR3GetParent
%ifdef ASM_FORMAT_PE
global __imp_CFGMR3GetRootU
__imp_CFGMR3GetRootU:
%endif
g_pfnCFGMR3GetRootU RTCCPTR_DEF ___LazyLoad___CFGMR3GetRootU
%ifdef ASM_FORMAT_PE
global __imp_CSAMR3IsEnabled
__imp_CSAMR3IsEnabled:
%endif
g_pfnCSAMR3IsEnabled RTCCPTR_DEF ___LazyLoad___CSAMR3IsEnabled
%ifdef ASM_FORMAT_PE
global __imp_CSAMR3SetScanningEnabled
__imp_CSAMR3SetScanningEnabled:
%endif
g_pfnCSAMR3SetScanningEnabled RTCCPTR_DEF ___LazyLoad___CSAMR3SetScanningEnabled
%ifdef ASM_FORMAT_PE
global __imp_DBGCCreate
__imp_DBGCCreate:
%endif
g_pfnDBGCCreate RTCCPTR_DEF ___LazyLoad___DBGCCreate
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3CoreWrite
__imp_DBGFR3CoreWrite:
%endif
g_pfnDBGFR3CoreWrite RTCCPTR_DEF ___LazyLoad___DBGFR3CoreWrite
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3Info
__imp_DBGFR3Info:
%endif
g_pfnDBGFR3Info RTCCPTR_DEF ___LazyLoad___DBGFR3Info
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3InfoRegisterExternal
__imp_DBGFR3InfoRegisterExternal:
%endif
g_pfnDBGFR3InfoRegisterExternal RTCCPTR_DEF ___LazyLoad___DBGFR3InfoRegisterExternal
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3InjectNMI
__imp_DBGFR3InjectNMI:
%endif
g_pfnDBGFR3InjectNMI RTCCPTR_DEF ___LazyLoad___DBGFR3InjectNMI
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3LogModifyDestinations
__imp_DBGFR3LogModifyDestinations:
%endif
g_pfnDBGFR3LogModifyDestinations RTCCPTR_DEF ___LazyLoad___DBGFR3LogModifyDestinations
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3LogModifyFlags
__imp_DBGFR3LogModifyFlags:
%endif
g_pfnDBGFR3LogModifyFlags RTCCPTR_DEF ___LazyLoad___DBGFR3LogModifyFlags
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3LogModifyGroups
__imp_DBGFR3LogModifyGroups:
%endif
g_pfnDBGFR3LogModifyGroups RTCCPTR_DEF ___LazyLoad___DBGFR3LogModifyGroups
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3OSDetect
__imp_DBGFR3OSDetect:
%endif
g_pfnDBGFR3OSDetect RTCCPTR_DEF ___LazyLoad___DBGFR3OSDetect
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3OSQueryNameAndVersion
__imp_DBGFR3OSQueryNameAndVersion:
%endif
g_pfnDBGFR3OSQueryNameAndVersion RTCCPTR_DEF ___LazyLoad___DBGFR3OSQueryNameAndVersion
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3RegCpuQueryU32
__imp_DBGFR3RegCpuQueryU32:
%endif
g_pfnDBGFR3RegCpuQueryU32 RTCCPTR_DEF ___LazyLoad___DBGFR3RegCpuQueryU32
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3RegFormatValue
__imp_DBGFR3RegFormatValue:
%endif
g_pfnDBGFR3RegFormatValue RTCCPTR_DEF ___LazyLoad___DBGFR3RegFormatValue
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3RegNmQuery
__imp_DBGFR3RegNmQuery:
%endif
g_pfnDBGFR3RegNmQuery RTCCPTR_DEF ___LazyLoad___DBGFR3RegNmQuery
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3RegNmQueryAll
__imp_DBGFR3RegNmQueryAll:
%endif
g_pfnDBGFR3RegNmQueryAll RTCCPTR_DEF ___LazyLoad___DBGFR3RegNmQueryAll
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3RegNmQueryAllCount
__imp_DBGFR3RegNmQueryAllCount:
%endif
g_pfnDBGFR3RegNmQueryAllCount RTCCPTR_DEF ___LazyLoad___DBGFR3RegNmQueryAllCount
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3OSDeregister
__imp_DBGFR3OSDeregister:
%endif
g_pfnDBGFR3OSDeregister RTCCPTR_DEF ___LazyLoad___DBGFR3OSDeregister
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3OSRegister
__imp_DBGFR3OSRegister:
%endif
g_pfnDBGFR3OSRegister RTCCPTR_DEF ___LazyLoad___DBGFR3OSRegister
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3MemReadString
__imp_DBGFR3MemReadString:
%endif
g_pfnDBGFR3MemReadString RTCCPTR_DEF ___LazyLoad___DBGFR3MemReadString
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3MemRead
__imp_DBGFR3MemRead:
%endif
g_pfnDBGFR3MemRead RTCCPTR_DEF ___LazyLoad___DBGFR3MemRead
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3MemScan
__imp_DBGFR3MemScan:
%endif
g_pfnDBGFR3MemScan RTCCPTR_DEF ___LazyLoad___DBGFR3MemScan
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3AddrFromFlat
__imp_DBGFR3AddrFromFlat:
%endif
g_pfnDBGFR3AddrFromFlat RTCCPTR_DEF ___LazyLoad___DBGFR3AddrFromFlat
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3AsSymbolByName
__imp_DBGFR3AsSymbolByName:
%endif
g_pfnDBGFR3AsSymbolByName RTCCPTR_DEF ___LazyLoad___DBGFR3AsSymbolByName
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3AsResolveAndRetain
__imp_DBGFR3AsResolveAndRetain:
%endif
g_pfnDBGFR3AsResolveAndRetain RTCCPTR_DEF ___LazyLoad___DBGFR3AsResolveAndRetain
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3AsSetAlias
__imp_DBGFR3AsSetAlias:
%endif
g_pfnDBGFR3AsSetAlias RTCCPTR_DEF ___LazyLoad___DBGFR3AsSetAlias
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3AddrAdd
__imp_DBGFR3AddrAdd:
%endif
g_pfnDBGFR3AddrAdd RTCCPTR_DEF ___LazyLoad___DBGFR3AddrAdd
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3AddrSub
__imp_DBGFR3AddrSub:
%endif
g_pfnDBGFR3AddrSub RTCCPTR_DEF ___LazyLoad___DBGFR3AddrSub
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3AsGetConfig
__imp_DBGFR3AsGetConfig:
%endif
g_pfnDBGFR3AsGetConfig RTCCPTR_DEF ___LazyLoad___DBGFR3AsGetConfig
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3CpuGetMode
__imp_DBGFR3CpuGetMode:
%endif
g_pfnDBGFR3CpuGetMode RTCCPTR_DEF ___LazyLoad___DBGFR3CpuGetMode
%ifdef ASM_FORMAT_PE
global __imp_DBGFR3AddrFromSelOff
__imp_DBGFR3AddrFromSelOff:
%endif
g_pfnDBGFR3AddrFromSelOff RTCCPTR_DEF ___LazyLoad___DBGFR3AddrFromSelOff
%ifdef ASM_FORMAT_PE
global __imp_EMR3QueryExecutionPolicy
__imp_EMR3QueryExecutionPolicy:
%endif
g_pfnEMR3QueryExecutionPolicy RTCCPTR_DEF ___LazyLoad___EMR3QueryExecutionPolicy
%ifdef ASM_FORMAT_PE
global __imp_EMR3SetExecutionPolicy
__imp_EMR3SetExecutionPolicy:
%endif
g_pfnEMR3SetExecutionPolicy RTCCPTR_DEF ___LazyLoad___EMR3SetExecutionPolicy
%ifdef ASM_FORMAT_PE
global __imp_FTMR3CancelStandby
__imp_FTMR3CancelStandby:
%endif
g_pfnFTMR3CancelStandby RTCCPTR_DEF ___LazyLoad___FTMR3CancelStandby
%ifdef ASM_FORMAT_PE
global __imp_FTMR3PowerOn
__imp_FTMR3PowerOn:
%endif
g_pfnFTMR3PowerOn RTCCPTR_DEF ___LazyLoad___FTMR3PowerOn
%ifdef ASM_FORMAT_PE
global __imp_HMR3IsEnabled
__imp_HMR3IsEnabled:
%endif
g_pfnHMR3IsEnabled RTCCPTR_DEF ___LazyLoad___HMR3IsEnabled
%ifdef ASM_FORMAT_PE
global __imp_HMR3IsNestedPagingActive
__imp_HMR3IsNestedPagingActive:
%endif
g_pfnHMR3IsNestedPagingActive RTCCPTR_DEF ___LazyLoad___HMR3IsNestedPagingActive
%ifdef ASM_FORMAT_PE
global __imp_HMR3IsUXActive
__imp_HMR3IsUXActive:
%endif
g_pfnHMR3IsUXActive RTCCPTR_DEF ___LazyLoad___HMR3IsUXActive
%ifdef ASM_FORMAT_PE
global __imp_HMR3IsVpidActive
__imp_HMR3IsVpidActive:
%endif
g_pfnHMR3IsVpidActive RTCCPTR_DEF ___LazyLoad___HMR3IsVpidActive
%ifdef ASM_FORMAT_PE
global __imp_MMR3HeapFree
__imp_MMR3HeapFree:
%endif
g_pfnMMR3HeapFree RTCCPTR_DEF ___LazyLoad___MMR3HeapFree
%ifdef ASM_FORMAT_PE
global __imp_MMR3HeapRealloc
__imp_MMR3HeapRealloc:
%endif
g_pfnMMR3HeapRealloc RTCCPTR_DEF ___LazyLoad___MMR3HeapRealloc
%ifdef ASM_FORMAT_PE
global __imp_PATMR3AllowPatching
__imp_PATMR3AllowPatching:
%endif
g_pfnPATMR3AllowPatching RTCCPTR_DEF ___LazyLoad___PATMR3AllowPatching
%ifdef ASM_FORMAT_PE
global __imp_PATMR3IsEnabled
__imp_PATMR3IsEnabled:
%endif
g_pfnPATMR3IsEnabled RTCCPTR_DEF ___LazyLoad___PATMR3IsEnabled
%ifdef ASM_FORMAT_PE
global __imp_PDMR3AsyncCompletionBwMgrSetMaxForFile
__imp_PDMR3AsyncCompletionBwMgrSetMaxForFile:
%endif
g_pfnPDMR3AsyncCompletionBwMgrSetMaxForFile RTCCPTR_DEF ___LazyLoad___PDMR3AsyncCompletionBwMgrSetMaxForFile
%ifdef ASM_FORMAT_PE
global __imp_PDMR3DeviceAttach
__imp_PDMR3DeviceAttach:
%endif
g_pfnPDMR3DeviceAttach RTCCPTR_DEF ___LazyLoad___PDMR3DeviceAttach
%ifdef ASM_FORMAT_PE
global __imp_PDMR3DeviceDetach
__imp_PDMR3DeviceDetach:
%endif
g_pfnPDMR3DeviceDetach RTCCPTR_DEF ___LazyLoad___PDMR3DeviceDetach
%ifdef ASM_FORMAT_PE
global __imp_PDMR3DriverAttach
__imp_PDMR3DriverAttach:
%endif
g_pfnPDMR3DriverAttach RTCCPTR_DEF ___LazyLoad___PDMR3DriverAttach
%ifdef ASM_FORMAT_PE
global __imp_PDMR3NsBwGroupSetLimit
__imp_PDMR3NsBwGroupSetLimit:
%endif
g_pfnPDMR3NsBwGroupSetLimit RTCCPTR_DEF ___LazyLoad___PDMR3NsBwGroupSetLimit
%ifdef ASM_FORMAT_PE
global __imp_PDMR3QueryDeviceLun
__imp_PDMR3QueryDeviceLun:
%endif
g_pfnPDMR3QueryDeviceLun RTCCPTR_DEF ___LazyLoad___PDMR3QueryDeviceLun
%ifdef ASM_FORMAT_PE
global __imp_PDMR3QueryDriverOnLun
__imp_PDMR3QueryDriverOnLun:
%endif
g_pfnPDMR3QueryDriverOnLun RTCCPTR_DEF ___LazyLoad___PDMR3QueryDriverOnLun
%ifdef ASM_FORMAT_PE
global __imp_PDMR3QueryLun
__imp_PDMR3QueryLun:
%endif
g_pfnPDMR3QueryLun RTCCPTR_DEF ___LazyLoad___PDMR3QueryLun
%ifdef ASM_FORMAT_PE
global __imp_PDMCritSectEnter
__imp_PDMCritSectEnter:
%endif
g_pfnPDMCritSectEnter RTCCPTR_DEF ___LazyLoad___PDMCritSectEnter
%ifdef ASM_FORMAT_PE
global __imp_PDMCritSectEnterDebug
__imp_PDMCritSectEnterDebug:
%endif
g_pfnPDMCritSectEnterDebug RTCCPTR_DEF ___LazyLoad___PDMCritSectEnterDebug
%ifdef ASM_FORMAT_PE
global __imp_PDMCritSectTryEnter
__imp_PDMCritSectTryEnter:
%endif
g_pfnPDMCritSectTryEnter RTCCPTR_DEF ___LazyLoad___PDMCritSectTryEnter
%ifdef ASM_FORMAT_PE
global __imp_PDMCritSectTryEnterDebug
__imp_PDMCritSectTryEnterDebug:
%endif
g_pfnPDMCritSectTryEnterDebug RTCCPTR_DEF ___LazyLoad___PDMCritSectTryEnterDebug
%ifdef ASM_FORMAT_PE
global __imp_PDMR3CritSectEnterEx
__imp_PDMR3CritSectEnterEx:
%endif
g_pfnPDMR3CritSectEnterEx RTCCPTR_DEF ___LazyLoad___PDMR3CritSectEnterEx
%ifdef ASM_FORMAT_PE
global __imp_PDMCritSectLeave
__imp_PDMCritSectLeave:
%endif
g_pfnPDMCritSectLeave RTCCPTR_DEF ___LazyLoad___PDMCritSectLeave
%ifdef ASM_FORMAT_PE
global __imp_PDMCritSectIsOwner
__imp_PDMCritSectIsOwner:
%endif
g_pfnPDMCritSectIsOwner RTCCPTR_DEF ___LazyLoad___PDMCritSectIsOwner
%ifdef ASM_FORMAT_PE
global __imp_PDMCritSectIsOwnerEx
__imp_PDMCritSectIsOwnerEx:
%endif
g_pfnPDMCritSectIsOwnerEx RTCCPTR_DEF ___LazyLoad___PDMCritSectIsOwnerEx
%ifdef ASM_FORMAT_PE
global __imp_PDMCritSectIsOwned
__imp_PDMCritSectIsOwned:
%endif
g_pfnPDMCritSectIsOwned RTCCPTR_DEF ___LazyLoad___PDMCritSectIsOwned
%ifdef ASM_FORMAT_PE
global __imp_PDMCritSectIsInitialized
__imp_PDMCritSectIsInitialized:
%endif
g_pfnPDMCritSectIsInitialized RTCCPTR_DEF ___LazyLoad___PDMCritSectIsInitialized
%ifdef ASM_FORMAT_PE
global __imp_PDMCritSectHasWaiters
__imp_PDMCritSectHasWaiters:
%endif
g_pfnPDMCritSectHasWaiters RTCCPTR_DEF ___LazyLoad___PDMCritSectHasWaiters
%ifdef ASM_FORMAT_PE
global __imp_PDMCritSectGetRecursion
__imp_PDMCritSectGetRecursion:
%endif
g_pfnPDMCritSectGetRecursion RTCCPTR_DEF ___LazyLoad___PDMCritSectGetRecursion
%ifdef ASM_FORMAT_PE
global __imp_PDMR3CritSectYield
__imp_PDMR3CritSectYield:
%endif
g_pfnPDMR3CritSectYield RTCCPTR_DEF ___LazyLoad___PDMR3CritSectYield
%ifdef ASM_FORMAT_PE
global __imp_PDMR3CritSectName
__imp_PDMR3CritSectName:
%endif
g_pfnPDMR3CritSectName RTCCPTR_DEF ___LazyLoad___PDMR3CritSectName
%ifdef ASM_FORMAT_PE
global __imp_PDMR3CritSectScheduleExitEvent
__imp_PDMR3CritSectScheduleExitEvent:
%endif
g_pfnPDMR3CritSectScheduleExitEvent RTCCPTR_DEF ___LazyLoad___PDMR3CritSectScheduleExitEvent
%ifdef ASM_FORMAT_PE
global __imp_PDMR3CritSectDelete
__imp_PDMR3CritSectDelete:
%endif
g_pfnPDMR3CritSectDelete RTCCPTR_DEF ___LazyLoad___PDMR3CritSectDelete
%ifdef ASM_FORMAT_PE
global __imp_PDMR3QueueDestroy
__imp_PDMR3QueueDestroy:
%endif
g_pfnPDMR3QueueDestroy RTCCPTR_DEF ___LazyLoad___PDMR3QueueDestroy
%ifdef ASM_FORMAT_PE
global __imp_PDMQueueAlloc
__imp_PDMQueueAlloc:
%endif
g_pfnPDMQueueAlloc RTCCPTR_DEF ___LazyLoad___PDMQueueAlloc
%ifdef ASM_FORMAT_PE
global __imp_PDMQueueInsert
__imp_PDMQueueInsert:
%endif
g_pfnPDMQueueInsert RTCCPTR_DEF ___LazyLoad___PDMQueueInsert
%ifdef ASM_FORMAT_PE
global __imp_PDMQueueInsertEx
__imp_PDMQueueInsertEx:
%endif
g_pfnPDMQueueInsertEx RTCCPTR_DEF ___LazyLoad___PDMQueueInsertEx
%ifdef ASM_FORMAT_PE
global __imp_PDMQueueR0Ptr
__imp_PDMQueueR0Ptr:
%endif
g_pfnPDMQueueR0Ptr RTCCPTR_DEF ___LazyLoad___PDMQueueR0Ptr
%ifdef ASM_FORMAT_PE
global __imp_PDMQueueRCPtr
__imp_PDMQueueRCPtr:
%endif
g_pfnPDMQueueRCPtr RTCCPTR_DEF ___LazyLoad___PDMQueueRCPtr
%ifdef ASM_FORMAT_PE
global __imp_PDMR3ThreadDestroy
__imp_PDMR3ThreadDestroy:
%endif
g_pfnPDMR3ThreadDestroy RTCCPTR_DEF ___LazyLoad___PDMR3ThreadDestroy
%ifdef ASM_FORMAT_PE
global __imp_PDMR3ThreadIAmRunning
__imp_PDMR3ThreadIAmRunning:
%endif
g_pfnPDMR3ThreadIAmRunning RTCCPTR_DEF ___LazyLoad___PDMR3ThreadIAmRunning
%ifdef ASM_FORMAT_PE
global __imp_PDMR3ThreadIAmSuspending
__imp_PDMR3ThreadIAmSuspending:
%endif
g_pfnPDMR3ThreadIAmSuspending RTCCPTR_DEF ___LazyLoad___PDMR3ThreadIAmSuspending
%ifdef ASM_FORMAT_PE
global __imp_PDMR3ThreadResume
__imp_PDMR3ThreadResume:
%endif
g_pfnPDMR3ThreadResume RTCCPTR_DEF ___LazyLoad___PDMR3ThreadResume
%ifdef ASM_FORMAT_PE
global __imp_PDMR3ThreadSleep
__imp_PDMR3ThreadSleep:
%endif
g_pfnPDMR3ThreadSleep RTCCPTR_DEF ___LazyLoad___PDMR3ThreadSleep
%ifdef ASM_FORMAT_PE
global __imp_PDMR3ThreadSuspend
__imp_PDMR3ThreadSuspend:
%endif
g_pfnPDMR3ThreadSuspend RTCCPTR_DEF ___LazyLoad___PDMR3ThreadSuspend
%ifdef ASM_FORMAT_PE
global __imp_PDMR3UsbCreateEmulatedDevice
__imp_PDMR3UsbCreateEmulatedDevice:
%endif
g_pfnPDMR3UsbCreateEmulatedDevice RTCCPTR_DEF ___LazyLoad___PDMR3UsbCreateEmulatedDevice
%ifdef ASM_FORMAT_PE
global __imp_PDMR3UsbCreateProxyDevice
__imp_PDMR3UsbCreateProxyDevice:
%endif
g_pfnPDMR3UsbCreateProxyDevice RTCCPTR_DEF ___LazyLoad___PDMR3UsbCreateProxyDevice
%ifdef ASM_FORMAT_PE
global __imp_PDMR3UsbDetachDevice
__imp_PDMR3UsbDetachDevice:
%endif
g_pfnPDMR3UsbDetachDevice RTCCPTR_DEF ___LazyLoad___PDMR3UsbDetachDevice
%ifdef ASM_FORMAT_PE
global __imp_PDMR3UsbHasHub
__imp_PDMR3UsbHasHub:
%endif
g_pfnPDMR3UsbHasHub RTCCPTR_DEF ___LazyLoad___PDMR3UsbHasHub
%ifdef ASM_FORMAT_PE
global __imp_PGMHandlerPhysicalPageTempOff
__imp_PGMHandlerPhysicalPageTempOff:
%endif
g_pfnPGMHandlerPhysicalPageTempOff RTCCPTR_DEF ___LazyLoad___PGMHandlerPhysicalPageTempOff
%ifdef ASM_FORMAT_PE
global __imp_PGMPhysReadGCPtr
__imp_PGMPhysReadGCPtr:
%endif
g_pfnPGMPhysReadGCPtr RTCCPTR_DEF ___LazyLoad___PGMPhysReadGCPtr
%ifdef ASM_FORMAT_PE
global __imp_PGMPhysSimpleDirtyWriteGCPtr
__imp_PGMPhysSimpleDirtyWriteGCPtr:
%endif
g_pfnPGMPhysSimpleDirtyWriteGCPtr RTCCPTR_DEF ___LazyLoad___PGMPhysSimpleDirtyWriteGCPtr
%ifdef ASM_FORMAT_PE
global __imp_PGMPhysSimpleReadGCPtr
__imp_PGMPhysSimpleReadGCPtr:
%endif
g_pfnPGMPhysSimpleReadGCPtr RTCCPTR_DEF ___LazyLoad___PGMPhysSimpleReadGCPtr
%ifdef ASM_FORMAT_PE
global __imp_PGMPhysSimpleWriteGCPhys
__imp_PGMPhysSimpleWriteGCPhys:
%endif
g_pfnPGMPhysSimpleWriteGCPhys RTCCPTR_DEF ___LazyLoad___PGMPhysSimpleWriteGCPhys
%ifdef ASM_FORMAT_PE
global __imp_PGMPhysSimpleWriteGCPtr
__imp_PGMPhysSimpleWriteGCPtr:
%endif
g_pfnPGMPhysSimpleWriteGCPtr RTCCPTR_DEF ___LazyLoad___PGMPhysSimpleWriteGCPtr
%ifdef ASM_FORMAT_PE
global __imp_PGMPhysWriteGCPtr
__imp_PGMPhysWriteGCPtr:
%endif
g_pfnPGMPhysWriteGCPtr RTCCPTR_DEF ___LazyLoad___PGMPhysWriteGCPtr
%ifdef ASM_FORMAT_PE
global __imp_PGMShwMakePageWritable
__imp_PGMShwMakePageWritable:
%endif
g_pfnPGMShwMakePageWritable RTCCPTR_DEF ___LazyLoad___PGMShwMakePageWritable
%ifdef ASM_FORMAT_PE
global __imp_PGMR3QueryGlobalMemoryStats
__imp_PGMR3QueryGlobalMemoryStats:
%endif
g_pfnPGMR3QueryGlobalMemoryStats RTCCPTR_DEF ___LazyLoad___PGMR3QueryGlobalMemoryStats
%ifdef ASM_FORMAT_PE
global __imp_PGMR3QueryMemoryStats
__imp_PGMR3QueryMemoryStats:
%endif
g_pfnPGMR3QueryMemoryStats RTCCPTR_DEF ___LazyLoad___PGMR3QueryMemoryStats
%ifdef ASM_FORMAT_PE
global __imp_SSMR3Close
__imp_SSMR3Close:
%endif
g_pfnSSMR3Close RTCCPTR_DEF ___LazyLoad___SSMR3Close
%ifdef ASM_FORMAT_PE
global __imp_SSMR3DeregisterExternal
__imp_SSMR3DeregisterExternal:
%endif
g_pfnSSMR3DeregisterExternal RTCCPTR_DEF ___LazyLoad___SSMR3DeregisterExternal
%ifdef ASM_FORMAT_PE
global __imp_SSMR3DeregisterInternal
__imp_SSMR3DeregisterInternal:
%endif
g_pfnSSMR3DeregisterInternal RTCCPTR_DEF ___LazyLoad___SSMR3DeregisterInternal
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetBool
__imp_SSMR3GetBool:
%endif
g_pfnSSMR3GetBool RTCCPTR_DEF ___LazyLoad___SSMR3GetBool
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetGCPhys
__imp_SSMR3GetGCPhys:
%endif
g_pfnSSMR3GetGCPhys RTCCPTR_DEF ___LazyLoad___SSMR3GetGCPhys
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetGCPhys32
__imp_SSMR3GetGCPhys32:
%endif
g_pfnSSMR3GetGCPhys32 RTCCPTR_DEF ___LazyLoad___SSMR3GetGCPhys32
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetGCPhys64
__imp_SSMR3GetGCPhys64:
%endif
g_pfnSSMR3GetGCPhys64 RTCCPTR_DEF ___LazyLoad___SSMR3GetGCPhys64
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetGCPtr
__imp_SSMR3GetGCPtr:
%endif
g_pfnSSMR3GetGCPtr RTCCPTR_DEF ___LazyLoad___SSMR3GetGCPtr
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetGCUInt
__imp_SSMR3GetGCUInt:
%endif
g_pfnSSMR3GetGCUInt RTCCPTR_DEF ___LazyLoad___SSMR3GetGCUInt
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetGCUIntPtr
__imp_SSMR3GetGCUIntPtr:
%endif
g_pfnSSMR3GetGCUIntPtr RTCCPTR_DEF ___LazyLoad___SSMR3GetGCUIntPtr
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetGCUIntReg
__imp_SSMR3GetGCUIntReg:
%endif
g_pfnSSMR3GetGCUIntReg RTCCPTR_DEF ___LazyLoad___SSMR3GetGCUIntReg
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetIOPort
__imp_SSMR3GetIOPort:
%endif
g_pfnSSMR3GetIOPort RTCCPTR_DEF ___LazyLoad___SSMR3GetIOPort
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetMem
__imp_SSMR3GetMem:
%endif
g_pfnSSMR3GetMem RTCCPTR_DEF ___LazyLoad___SSMR3GetMem
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetRCPtr
__imp_SSMR3GetRCPtr:
%endif
g_pfnSSMR3GetRCPtr RTCCPTR_DEF ___LazyLoad___SSMR3GetRCPtr
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetS128
__imp_SSMR3GetS128:
%endif
g_pfnSSMR3GetS128 RTCCPTR_DEF ___LazyLoad___SSMR3GetS128
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetS16
__imp_SSMR3GetS16:
%endif
g_pfnSSMR3GetS16 RTCCPTR_DEF ___LazyLoad___SSMR3GetS16
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetS32
__imp_SSMR3GetS32:
%endif
g_pfnSSMR3GetS32 RTCCPTR_DEF ___LazyLoad___SSMR3GetS32
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetS64
__imp_SSMR3GetS64:
%endif
g_pfnSSMR3GetS64 RTCCPTR_DEF ___LazyLoad___SSMR3GetS64
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetS8
__imp_SSMR3GetS8:
%endif
g_pfnSSMR3GetS8 RTCCPTR_DEF ___LazyLoad___SSMR3GetS8
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetSInt
__imp_SSMR3GetSInt:
%endif
g_pfnSSMR3GetSInt RTCCPTR_DEF ___LazyLoad___SSMR3GetSInt
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetSel
__imp_SSMR3GetSel:
%endif
g_pfnSSMR3GetSel RTCCPTR_DEF ___LazyLoad___SSMR3GetSel
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetStrZ
__imp_SSMR3GetStrZ:
%endif
g_pfnSSMR3GetStrZ RTCCPTR_DEF ___LazyLoad___SSMR3GetStrZ
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetStrZEx
__imp_SSMR3GetStrZEx:
%endif
g_pfnSSMR3GetStrZEx RTCCPTR_DEF ___LazyLoad___SSMR3GetStrZEx
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetStruct
__imp_SSMR3GetStruct:
%endif
g_pfnSSMR3GetStruct RTCCPTR_DEF ___LazyLoad___SSMR3GetStruct
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetStructEx
__imp_SSMR3GetStructEx:
%endif
g_pfnSSMR3GetStructEx RTCCPTR_DEF ___LazyLoad___SSMR3GetStructEx
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetU128
__imp_SSMR3GetU128:
%endif
g_pfnSSMR3GetU128 RTCCPTR_DEF ___LazyLoad___SSMR3GetU128
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetU16
__imp_SSMR3GetU16:
%endif
g_pfnSSMR3GetU16 RTCCPTR_DEF ___LazyLoad___SSMR3GetU16
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetU32
__imp_SSMR3GetU32:
%endif
g_pfnSSMR3GetU32 RTCCPTR_DEF ___LazyLoad___SSMR3GetU32
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetU64
__imp_SSMR3GetU64:
%endif
g_pfnSSMR3GetU64 RTCCPTR_DEF ___LazyLoad___SSMR3GetU64
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetU8
__imp_SSMR3GetU8:
%endif
g_pfnSSMR3GetU8 RTCCPTR_DEF ___LazyLoad___SSMR3GetU8
%ifdef ASM_FORMAT_PE
global __imp_SSMR3GetUInt
__imp_SSMR3GetUInt:
%endif
g_pfnSSMR3GetUInt RTCCPTR_DEF ___LazyLoad___SSMR3GetUInt
%ifdef ASM_FORMAT_PE
global __imp_SSMR3HandleGetAfter
__imp_SSMR3HandleGetAfter:
%endif
g_pfnSSMR3HandleGetAfter RTCCPTR_DEF ___LazyLoad___SSMR3HandleGetAfter
%ifdef ASM_FORMAT_PE
global __imp_SSMR3HandleGetStatus
__imp_SSMR3HandleGetStatus:
%endif
g_pfnSSMR3HandleGetStatus RTCCPTR_DEF ___LazyLoad___SSMR3HandleGetStatus
%ifdef ASM_FORMAT_PE
global __imp_SSMR3HandleHostBits
__imp_SSMR3HandleHostBits:
%endif
g_pfnSSMR3HandleHostBits RTCCPTR_DEF ___LazyLoad___SSMR3HandleHostBits
%ifdef ASM_FORMAT_PE
global __imp_SSMR3HandleHostOSAndArch
__imp_SSMR3HandleHostOSAndArch:
%endif
g_pfnSSMR3HandleHostOSAndArch RTCCPTR_DEF ___LazyLoad___SSMR3HandleHostOSAndArch
%ifdef ASM_FORMAT_PE
global __imp_SSMR3HandleIsLiveSave
__imp_SSMR3HandleIsLiveSave:
%endif
g_pfnSSMR3HandleIsLiveSave RTCCPTR_DEF ___LazyLoad___SSMR3HandleIsLiveSave
%ifdef ASM_FORMAT_PE
global __imp_SSMR3HandleMaxDowntime
__imp_SSMR3HandleMaxDowntime:
%endif
g_pfnSSMR3HandleMaxDowntime RTCCPTR_DEF ___LazyLoad___SSMR3HandleMaxDowntime
%ifdef ASM_FORMAT_PE
global __imp_SSMR3HandleReportLivePercent
__imp_SSMR3HandleReportLivePercent:
%endif
g_pfnSSMR3HandleReportLivePercent RTCCPTR_DEF ___LazyLoad___SSMR3HandleReportLivePercent
%ifdef ASM_FORMAT_PE
global __imp_SSMR3HandleRevision
__imp_SSMR3HandleRevision:
%endif
g_pfnSSMR3HandleRevision RTCCPTR_DEF ___LazyLoad___SSMR3HandleRevision
%ifdef ASM_FORMAT_PE
global __imp_SSMR3HandleSetStatus
__imp_SSMR3HandleSetStatus:
%endif
g_pfnSSMR3HandleSetStatus RTCCPTR_DEF ___LazyLoad___SSMR3HandleSetStatus
%ifdef ASM_FORMAT_PE
global __imp_SSMR3HandleVersion
__imp_SSMR3HandleVersion:
%endif
g_pfnSSMR3HandleVersion RTCCPTR_DEF ___LazyLoad___SSMR3HandleVersion
%ifdef ASM_FORMAT_PE
global __imp_SSMR3Open
__imp_SSMR3Open:
%endif
g_pfnSSMR3Open RTCCPTR_DEF ___LazyLoad___SSMR3Open
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutBool
__imp_SSMR3PutBool:
%endif
g_pfnSSMR3PutBool RTCCPTR_DEF ___LazyLoad___SSMR3PutBool
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutGCPhys
__imp_SSMR3PutGCPhys:
%endif
g_pfnSSMR3PutGCPhys RTCCPTR_DEF ___LazyLoad___SSMR3PutGCPhys
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutGCPhys32
__imp_SSMR3PutGCPhys32:
%endif
g_pfnSSMR3PutGCPhys32 RTCCPTR_DEF ___LazyLoad___SSMR3PutGCPhys32
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutGCPhys64
__imp_SSMR3PutGCPhys64:
%endif
g_pfnSSMR3PutGCPhys64 RTCCPTR_DEF ___LazyLoad___SSMR3PutGCPhys64
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutGCPtr
__imp_SSMR3PutGCPtr:
%endif
g_pfnSSMR3PutGCPtr RTCCPTR_DEF ___LazyLoad___SSMR3PutGCPtr
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutGCUInt
__imp_SSMR3PutGCUInt:
%endif
g_pfnSSMR3PutGCUInt RTCCPTR_DEF ___LazyLoad___SSMR3PutGCUInt
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutGCUIntPtr
__imp_SSMR3PutGCUIntPtr:
%endif
g_pfnSSMR3PutGCUIntPtr RTCCPTR_DEF ___LazyLoad___SSMR3PutGCUIntPtr
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutGCUIntReg
__imp_SSMR3PutGCUIntReg:
%endif
g_pfnSSMR3PutGCUIntReg RTCCPTR_DEF ___LazyLoad___SSMR3PutGCUIntReg
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutIOPort
__imp_SSMR3PutIOPort:
%endif
g_pfnSSMR3PutIOPort RTCCPTR_DEF ___LazyLoad___SSMR3PutIOPort
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutMem
__imp_SSMR3PutMem:
%endif
g_pfnSSMR3PutMem RTCCPTR_DEF ___LazyLoad___SSMR3PutMem
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutRCPtr
__imp_SSMR3PutRCPtr:
%endif
g_pfnSSMR3PutRCPtr RTCCPTR_DEF ___LazyLoad___SSMR3PutRCPtr
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutS128
__imp_SSMR3PutS128:
%endif
g_pfnSSMR3PutS128 RTCCPTR_DEF ___LazyLoad___SSMR3PutS128
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutS16
__imp_SSMR3PutS16:
%endif
g_pfnSSMR3PutS16 RTCCPTR_DEF ___LazyLoad___SSMR3PutS16
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutS32
__imp_SSMR3PutS32:
%endif
g_pfnSSMR3PutS32 RTCCPTR_DEF ___LazyLoad___SSMR3PutS32
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutS64
__imp_SSMR3PutS64:
%endif
g_pfnSSMR3PutS64 RTCCPTR_DEF ___LazyLoad___SSMR3PutS64
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutS8
__imp_SSMR3PutS8:
%endif
g_pfnSSMR3PutS8 RTCCPTR_DEF ___LazyLoad___SSMR3PutS8
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutSInt
__imp_SSMR3PutSInt:
%endif
g_pfnSSMR3PutSInt RTCCPTR_DEF ___LazyLoad___SSMR3PutSInt
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutSel
__imp_SSMR3PutSel:
%endif
g_pfnSSMR3PutSel RTCCPTR_DEF ___LazyLoad___SSMR3PutSel
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutStrZ
__imp_SSMR3PutStrZ:
%endif
g_pfnSSMR3PutStrZ RTCCPTR_DEF ___LazyLoad___SSMR3PutStrZ
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutStruct
__imp_SSMR3PutStruct:
%endif
g_pfnSSMR3PutStruct RTCCPTR_DEF ___LazyLoad___SSMR3PutStruct
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutStructEx
__imp_SSMR3PutStructEx:
%endif
g_pfnSSMR3PutStructEx RTCCPTR_DEF ___LazyLoad___SSMR3PutStructEx
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutU128
__imp_SSMR3PutU128:
%endif
g_pfnSSMR3PutU128 RTCCPTR_DEF ___LazyLoad___SSMR3PutU128
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutU16
__imp_SSMR3PutU16:
%endif
g_pfnSSMR3PutU16 RTCCPTR_DEF ___LazyLoad___SSMR3PutU16
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutU32
__imp_SSMR3PutU32:
%endif
g_pfnSSMR3PutU32 RTCCPTR_DEF ___LazyLoad___SSMR3PutU32
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutU64
__imp_SSMR3PutU64:
%endif
g_pfnSSMR3PutU64 RTCCPTR_DEF ___LazyLoad___SSMR3PutU64
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutU8
__imp_SSMR3PutU8:
%endif
g_pfnSSMR3PutU8 RTCCPTR_DEF ___LazyLoad___SSMR3PutU8
%ifdef ASM_FORMAT_PE
global __imp_SSMR3PutUInt
__imp_SSMR3PutUInt:
%endif
g_pfnSSMR3PutUInt RTCCPTR_DEF ___LazyLoad___SSMR3PutUInt
%ifdef ASM_FORMAT_PE
global __imp_SSMR3Seek
__imp_SSMR3Seek:
%endif
g_pfnSSMR3Seek RTCCPTR_DEF ___LazyLoad___SSMR3Seek
%ifdef ASM_FORMAT_PE
global __imp_SSMR3SetCfgError
__imp_SSMR3SetCfgError:
%endif
g_pfnSSMR3SetCfgError RTCCPTR_DEF ___LazyLoad___SSMR3SetCfgError
%ifdef ASM_FORMAT_PE
global __imp_SSMR3SetLoadError
__imp_SSMR3SetLoadError:
%endif
g_pfnSSMR3SetLoadError RTCCPTR_DEF ___LazyLoad___SSMR3SetLoadError
%ifdef ASM_FORMAT_PE
global __imp_SSMR3SetLoadErrorV
__imp_SSMR3SetLoadErrorV:
%endif
g_pfnSSMR3SetLoadErrorV RTCCPTR_DEF ___LazyLoad___SSMR3SetLoadErrorV
%ifdef ASM_FORMAT_PE
global __imp_SSMR3Skip
__imp_SSMR3Skip:
%endif
g_pfnSSMR3Skip RTCCPTR_DEF ___LazyLoad___SSMR3Skip
%ifdef ASM_FORMAT_PE
global __imp_SSMR3SkipToEndOfUnit
__imp_SSMR3SkipToEndOfUnit:
%endif
g_pfnSSMR3SkipToEndOfUnit RTCCPTR_DEF ___LazyLoad___SSMR3SkipToEndOfUnit
%ifdef ASM_FORMAT_PE
global __imp_SSMR3ValidateFile
__imp_SSMR3ValidateFile:
%endif
g_pfnSSMR3ValidateFile RTCCPTR_DEF ___LazyLoad___SSMR3ValidateFile
%ifdef ASM_FORMAT_PE
global __imp_SSMR3Cancel
__imp_SSMR3Cancel:
%endif
g_pfnSSMR3Cancel RTCCPTR_DEF ___LazyLoad___SSMR3Cancel
%ifdef ASM_FORMAT_PE
global __imp_SSMR3RegisterExternal
__imp_SSMR3RegisterExternal:
%endif
g_pfnSSMR3RegisterExternal RTCCPTR_DEF ___LazyLoad___SSMR3RegisterExternal
%ifdef ASM_FORMAT_PE
global __imp_STAMR3Dump
__imp_STAMR3Dump:
%endif
g_pfnSTAMR3Dump RTCCPTR_DEF ___LazyLoad___STAMR3Dump
%ifdef ASM_FORMAT_PE
global __imp_STAMR3Enum
__imp_STAMR3Enum:
%endif
g_pfnSTAMR3Enum RTCCPTR_DEF ___LazyLoad___STAMR3Enum
%ifdef ASM_FORMAT_PE
global __imp_STAMR3Reset
__imp_STAMR3Reset:
%endif
g_pfnSTAMR3Reset RTCCPTR_DEF ___LazyLoad___STAMR3Reset
%ifdef ASM_FORMAT_PE
global __imp_STAMR3Snapshot
__imp_STAMR3Snapshot:
%endif
g_pfnSTAMR3Snapshot RTCCPTR_DEF ___LazyLoad___STAMR3Snapshot
%ifdef ASM_FORMAT_PE
global __imp_STAMR3SnapshotFree
__imp_STAMR3SnapshotFree:
%endif
g_pfnSTAMR3SnapshotFree RTCCPTR_DEF ___LazyLoad___STAMR3SnapshotFree
%ifdef ASM_FORMAT_PE
global __imp_STAMR3GetUnit
__imp_STAMR3GetUnit:
%endif
g_pfnSTAMR3GetUnit RTCCPTR_DEF ___LazyLoad___STAMR3GetUnit
%ifdef ASM_FORMAT_PE
global __imp_TMR3TimerSetCritSect
__imp_TMR3TimerSetCritSect:
%endif
g_pfnTMR3TimerSetCritSect RTCCPTR_DEF ___LazyLoad___TMR3TimerSetCritSect
%ifdef ASM_FORMAT_PE
global __imp_TMR3TimerLoad
__imp_TMR3TimerLoad:
%endif
g_pfnTMR3TimerLoad RTCCPTR_DEF ___LazyLoad___TMR3TimerLoad
%ifdef ASM_FORMAT_PE
global __imp_TMR3TimerSave
__imp_TMR3TimerSave:
%endif
g_pfnTMR3TimerSave RTCCPTR_DEF ___LazyLoad___TMR3TimerSave
%ifdef ASM_FORMAT_PE
global __imp_TMR3TimerDestroy
__imp_TMR3TimerDestroy:
%endif
g_pfnTMR3TimerDestroy RTCCPTR_DEF ___LazyLoad___TMR3TimerDestroy
%ifdef ASM_FORMAT_PE
global __imp_TMTimerFromMicro
__imp_TMTimerFromMicro:
%endif
g_pfnTMTimerFromMicro RTCCPTR_DEF ___LazyLoad___TMTimerFromMicro
%ifdef ASM_FORMAT_PE
global __imp_TMTimerFromMilli
__imp_TMTimerFromMilli:
%endif
g_pfnTMTimerFromMilli RTCCPTR_DEF ___LazyLoad___TMTimerFromMilli
%ifdef ASM_FORMAT_PE
global __imp_TMTimerFromNano
__imp_TMTimerFromNano:
%endif
g_pfnTMTimerFromNano RTCCPTR_DEF ___LazyLoad___TMTimerFromNano
%ifdef ASM_FORMAT_PE
global __imp_TMTimerGet
__imp_TMTimerGet:
%endif
g_pfnTMTimerGet RTCCPTR_DEF ___LazyLoad___TMTimerGet
%ifdef ASM_FORMAT_PE
global __imp_TMTimerGetFreq
__imp_TMTimerGetFreq:
%endif
g_pfnTMTimerGetFreq RTCCPTR_DEF ___LazyLoad___TMTimerGetFreq
%ifdef ASM_FORMAT_PE
global __imp_TMTimerGetMicro
__imp_TMTimerGetMicro:
%endif
g_pfnTMTimerGetMicro RTCCPTR_DEF ___LazyLoad___TMTimerGetMicro
%ifdef ASM_FORMAT_PE
global __imp_TMTimerGetMilli
__imp_TMTimerGetMilli:
%endif
g_pfnTMTimerGetMilli RTCCPTR_DEF ___LazyLoad___TMTimerGetMilli
%ifdef ASM_FORMAT_PE
global __imp_TMTimerGetNano
__imp_TMTimerGetNano:
%endif
g_pfnTMTimerGetNano RTCCPTR_DEF ___LazyLoad___TMTimerGetNano
%ifdef ASM_FORMAT_PE
global __imp_TMTimerIsActive
__imp_TMTimerIsActive:
%endif
g_pfnTMTimerIsActive RTCCPTR_DEF ___LazyLoad___TMTimerIsActive
%ifdef ASM_FORMAT_PE
global __imp_TMTimerIsLockOwner
__imp_TMTimerIsLockOwner:
%endif
g_pfnTMTimerIsLockOwner RTCCPTR_DEF ___LazyLoad___TMTimerIsLockOwner
%ifdef ASM_FORMAT_PE
global __imp_TMTimerLock
__imp_TMTimerLock:
%endif
g_pfnTMTimerLock RTCCPTR_DEF ___LazyLoad___TMTimerLock
%ifdef ASM_FORMAT_PE
global __imp_TMTimerR0Ptr
__imp_TMTimerR0Ptr:
%endif
g_pfnTMTimerR0Ptr RTCCPTR_DEF ___LazyLoad___TMTimerR0Ptr
%ifdef ASM_FORMAT_PE
global __imp_TMTimerR3Ptr
__imp_TMTimerR3Ptr:
%endif
g_pfnTMTimerR3Ptr RTCCPTR_DEF ___LazyLoad___TMTimerR3Ptr
%ifdef ASM_FORMAT_PE
global __imp_TMTimerRCPtr
__imp_TMTimerRCPtr:
%endif
g_pfnTMTimerRCPtr RTCCPTR_DEF ___LazyLoad___TMTimerRCPtr
%ifdef ASM_FORMAT_PE
global __imp_TMTimerSet
__imp_TMTimerSet:
%endif
g_pfnTMTimerSet RTCCPTR_DEF ___LazyLoad___TMTimerSet
%ifdef ASM_FORMAT_PE
global __imp_TMTimerSetFrequencyHint
__imp_TMTimerSetFrequencyHint:
%endif
g_pfnTMTimerSetFrequencyHint RTCCPTR_DEF ___LazyLoad___TMTimerSetFrequencyHint
%ifdef ASM_FORMAT_PE
global __imp_TMTimerSetMicro
__imp_TMTimerSetMicro:
%endif
g_pfnTMTimerSetMicro RTCCPTR_DEF ___LazyLoad___TMTimerSetMicro
%ifdef ASM_FORMAT_PE
global __imp_TMTimerSetMillies
__imp_TMTimerSetMillies:
%endif
g_pfnTMTimerSetMillies RTCCPTR_DEF ___LazyLoad___TMTimerSetMillies
%ifdef ASM_FORMAT_PE
global __imp_TMTimerSetNano
__imp_TMTimerSetNano:
%endif
g_pfnTMTimerSetNano RTCCPTR_DEF ___LazyLoad___TMTimerSetNano
%ifdef ASM_FORMAT_PE
global __imp_TMTimerSetRelative
__imp_TMTimerSetRelative:
%endif
g_pfnTMTimerSetRelative RTCCPTR_DEF ___LazyLoad___TMTimerSetRelative
%ifdef ASM_FORMAT_PE
global __imp_TMTimerStop
__imp_TMTimerStop:
%endif
g_pfnTMTimerStop RTCCPTR_DEF ___LazyLoad___TMTimerStop
%ifdef ASM_FORMAT_PE
global __imp_TMTimerToMicro
__imp_TMTimerToMicro:
%endif
g_pfnTMTimerToMicro RTCCPTR_DEF ___LazyLoad___TMTimerToMicro
%ifdef ASM_FORMAT_PE
global __imp_TMTimerToMilli
__imp_TMTimerToMilli:
%endif
g_pfnTMTimerToMilli RTCCPTR_DEF ___LazyLoad___TMTimerToMilli
%ifdef ASM_FORMAT_PE
global __imp_TMTimerToNano
__imp_TMTimerToNano:
%endif
g_pfnTMTimerToNano RTCCPTR_DEF ___LazyLoad___TMTimerToNano
%ifdef ASM_FORMAT_PE
global __imp_TMTimerUnlock
__imp_TMTimerUnlock:
%endif
g_pfnTMTimerUnlock RTCCPTR_DEF ___LazyLoad___TMTimerUnlock
%ifdef ASM_FORMAT_PE
global __imp_TMR3GetWarpDrive
__imp_TMR3GetWarpDrive:
%endif
g_pfnTMR3GetWarpDrive RTCCPTR_DEF ___LazyLoad___TMR3GetWarpDrive
%ifdef ASM_FORMAT_PE
global __imp_TMR3SetWarpDrive
__imp_TMR3SetWarpDrive:
%endif
g_pfnTMR3SetWarpDrive RTCCPTR_DEF ___LazyLoad___TMR3SetWarpDrive
%ifdef ASM_FORMAT_PE
global __imp_VMMGetCpu
__imp_VMMGetCpu:
%endif
g_pfnVMMGetCpu RTCCPTR_DEF ___LazyLoad___VMMGetCpu
%ifdef ASM_FORMAT_PE
global __imp_VMMGetSvnRev
__imp_VMMGetSvnRev:
%endif
g_pfnVMMGetSvnRev RTCCPTR_DEF ___LazyLoad___VMMGetSvnRev
%ifdef ASM_FORMAT_PE
global __imp_VMSetError
__imp_VMSetError:
%endif
g_pfnVMSetError RTCCPTR_DEF ___LazyLoad___VMSetError
%ifdef ASM_FORMAT_PE
global __imp_VMSetErrorV
__imp_VMSetErrorV:
%endif
g_pfnVMSetErrorV RTCCPTR_DEF ___LazyLoad___VMSetErrorV
%ifdef ASM_FORMAT_PE
global __imp_VMR3AtErrorDeregister
__imp_VMR3AtErrorDeregister:
%endif
g_pfnVMR3AtErrorDeregister RTCCPTR_DEF ___LazyLoad___VMR3AtErrorDeregister
%ifdef ASM_FORMAT_PE
global __imp_VMR3AtErrorRegister
__imp_VMR3AtErrorRegister:
%endif
g_pfnVMR3AtErrorRegister RTCCPTR_DEF ___LazyLoad___VMR3AtErrorRegister
%ifdef ASM_FORMAT_PE
global __imp_VMR3AtRuntimeErrorRegister
__imp_VMR3AtRuntimeErrorRegister:
%endif
g_pfnVMR3AtRuntimeErrorRegister RTCCPTR_DEF ___LazyLoad___VMR3AtRuntimeErrorRegister
%ifdef ASM_FORMAT_PE
global __imp_VMR3AtStateRegister
__imp_VMR3AtStateRegister:
%endif
g_pfnVMR3AtStateRegister RTCCPTR_DEF ___LazyLoad___VMR3AtStateRegister
%ifdef ASM_FORMAT_PE
global __imp_VMR3Create
__imp_VMR3Create:
%endif
g_pfnVMR3Create RTCCPTR_DEF ___LazyLoad___VMR3Create
%ifdef ASM_FORMAT_PE
global __imp_VMR3Destroy
__imp_VMR3Destroy:
%endif
g_pfnVMR3Destroy RTCCPTR_DEF ___LazyLoad___VMR3Destroy
%ifdef ASM_FORMAT_PE
global __imp_VMR3GetCpuCoreAndPackageIdFromCpuId
__imp_VMR3GetCpuCoreAndPackageIdFromCpuId:
%endif
g_pfnVMR3GetCpuCoreAndPackageIdFromCpuId RTCCPTR_DEF ___LazyLoad___VMR3GetCpuCoreAndPackageIdFromCpuId
%ifdef ASM_FORMAT_PE
global __imp_VMR3GetStateName
__imp_VMR3GetStateName:
%endif
g_pfnVMR3GetStateName RTCCPTR_DEF ___LazyLoad___VMR3GetStateName
%ifdef ASM_FORMAT_PE
global __imp_VMR3GetStateU
__imp_VMR3GetStateU:
%endif
g_pfnVMR3GetStateU RTCCPTR_DEF ___LazyLoad___VMR3GetStateU
%ifdef ASM_FORMAT_PE
global __imp_VMR3GetVM
__imp_VMR3GetVM:
%endif
g_pfnVMR3GetVM RTCCPTR_DEF ___LazyLoad___VMR3GetVM
%ifdef ASM_FORMAT_PE
global __imp_VMR3HotPlugCpu
__imp_VMR3HotPlugCpu:
%endif
g_pfnVMR3HotPlugCpu RTCCPTR_DEF ___LazyLoad___VMR3HotPlugCpu
%ifdef ASM_FORMAT_PE
global __imp_VMR3HotUnplugCpu
__imp_VMR3HotUnplugCpu:
%endif
g_pfnVMR3HotUnplugCpu RTCCPTR_DEF ___LazyLoad___VMR3HotUnplugCpu
%ifdef ASM_FORMAT_PE
global __imp_VMR3LoadFromFile
__imp_VMR3LoadFromFile:
%endif
g_pfnVMR3LoadFromFile RTCCPTR_DEF ___LazyLoad___VMR3LoadFromFile
%ifdef ASM_FORMAT_PE
global __imp_VMR3LoadFromStream
__imp_VMR3LoadFromStream:
%endif
g_pfnVMR3LoadFromStream RTCCPTR_DEF ___LazyLoad___VMR3LoadFromStream
%ifdef ASM_FORMAT_PE
global __imp_VMR3PowerOff
__imp_VMR3PowerOff:
%endif
g_pfnVMR3PowerOff RTCCPTR_DEF ___LazyLoad___VMR3PowerOff
%ifdef ASM_FORMAT_PE
global __imp_VMR3PowerOn
__imp_VMR3PowerOn:
%endif
g_pfnVMR3PowerOn RTCCPTR_DEF ___LazyLoad___VMR3PowerOn
%ifdef ASM_FORMAT_PE
global __imp_VMR3ReleaseUVM
__imp_VMR3ReleaseUVM:
%endif
g_pfnVMR3ReleaseUVM RTCCPTR_DEF ___LazyLoad___VMR3ReleaseUVM
%ifdef ASM_FORMAT_PE
global __imp_VMR3ReqCallNoWaitU
__imp_VMR3ReqCallNoWaitU:
%endif
g_pfnVMR3ReqCallNoWaitU RTCCPTR_DEF ___LazyLoad___VMR3ReqCallNoWaitU
%ifdef ASM_FORMAT_PE
global __imp_VMR3ReqCallU
__imp_VMR3ReqCallU:
%endif
g_pfnVMR3ReqCallU RTCCPTR_DEF ___LazyLoad___VMR3ReqCallU
%ifdef ASM_FORMAT_PE
global __imp_VMR3ReqCallVoidWaitU
__imp_VMR3ReqCallVoidWaitU:
%endif
g_pfnVMR3ReqCallVoidWaitU RTCCPTR_DEF ___LazyLoad___VMR3ReqCallVoidWaitU
%ifdef ASM_FORMAT_PE
global __imp_VMR3ReqCallWaitU
__imp_VMR3ReqCallWaitU:
%endif
g_pfnVMR3ReqCallWaitU RTCCPTR_DEF ___LazyLoad___VMR3ReqCallWaitU
%ifdef ASM_FORMAT_PE
global __imp_VMR3ReqFree
__imp_VMR3ReqFree:
%endif
g_pfnVMR3ReqFree RTCCPTR_DEF ___LazyLoad___VMR3ReqFree
%ifdef ASM_FORMAT_PE
global __imp_VMR3ReqPriorityCallWaitU
__imp_VMR3ReqPriorityCallWaitU:
%endif
g_pfnVMR3ReqPriorityCallWaitU RTCCPTR_DEF ___LazyLoad___VMR3ReqPriorityCallWaitU
%ifdef ASM_FORMAT_PE
global __imp_VMR3ReqWait
__imp_VMR3ReqWait:
%endif
g_pfnVMR3ReqWait RTCCPTR_DEF ___LazyLoad___VMR3ReqWait
%ifdef ASM_FORMAT_PE
global __imp_VMR3Reset
__imp_VMR3Reset:
%endif
g_pfnVMR3Reset RTCCPTR_DEF ___LazyLoad___VMR3Reset
%ifdef ASM_FORMAT_PE
global __imp_VMR3Resume
__imp_VMR3Resume:
%endif
g_pfnVMR3Resume RTCCPTR_DEF ___LazyLoad___VMR3Resume
%ifdef ASM_FORMAT_PE
global __imp_VMR3RetainUVM
__imp_VMR3RetainUVM:
%endif
g_pfnVMR3RetainUVM RTCCPTR_DEF ___LazyLoad___VMR3RetainUVM
%ifdef ASM_FORMAT_PE
global __imp_VMR3Save
__imp_VMR3Save:
%endif
g_pfnVMR3Save RTCCPTR_DEF ___LazyLoad___VMR3Save
%ifdef ASM_FORMAT_PE
global __imp_VMR3SetCpuExecutionCap
__imp_VMR3SetCpuExecutionCap:
%endif
g_pfnVMR3SetCpuExecutionCap RTCCPTR_DEF ___LazyLoad___VMR3SetCpuExecutionCap
%ifdef ASM_FORMAT_PE
global __imp_VMR3SetError
__imp_VMR3SetError:
%endif
g_pfnVMR3SetError RTCCPTR_DEF ___LazyLoad___VMR3SetError
%ifdef ASM_FORMAT_PE
global __imp_VMR3SetPowerOffInsteadOfReset
__imp_VMR3SetPowerOffInsteadOfReset:
%endif
g_pfnVMR3SetPowerOffInsteadOfReset RTCCPTR_DEF ___LazyLoad___VMR3SetPowerOffInsteadOfReset
%ifdef ASM_FORMAT_PE
global __imp_VMR3Suspend
__imp_VMR3Suspend:
%endif
g_pfnVMR3Suspend RTCCPTR_DEF ___LazyLoad___VMR3Suspend
%ifdef ASM_FORMAT_PE
global __imp_VMR3Teleport
__imp_VMR3Teleport:
%endif
g_pfnVMR3Teleport RTCCPTR_DEF ___LazyLoad___VMR3Teleport
%ifdef ASM_FORMAT_PE
global __imp_VMR3AtStateDeregister
__imp_VMR3AtStateDeregister:
%endif
g_pfnVMR3AtStateDeregister RTCCPTR_DEF ___LazyLoad___VMR3AtStateDeregister
%ifdef ASM_FORMAT_PE
global __imp_VMR3GetUVM
__imp_VMR3GetUVM:
%endif
g_pfnVMR3GetUVM RTCCPTR_DEF ___LazyLoad___VMR3GetUVM
RTCCPTR_DEF 0 ; Terminator entry for traversal.


;
; Imported names.
;
BEGINCODE
g_szLibrary db 'VBoxVMM',0
g_szzNames:
g_szCFGMR3GetRoot: db 'CFGMR3GetRoot',0
g_szCFGMR3GetFirstChild: db 'CFGMR3GetFirstChild',0
g_szCFGMR3GetNextChild: db 'CFGMR3GetNextChild',0
g_szCFGMR3GetNameLen: db 'CFGMR3GetNameLen',0
g_szCFGMR3GetFirstValue: db 'CFGMR3GetFirstValue',0
g_szCFGMR3GetNextValue: db 'CFGMR3GetNextValue',0
g_szCFGMR3GetValueNameLen: db 'CFGMR3GetValueNameLen',0
g_szCFGMR3GetValueType: db 'CFGMR3GetValueType',0
g_szCFGMR3Dump: db 'CFGMR3Dump',0
g_szCFGMR3CreateTree: db 'CFGMR3CreateTree',0
g_szCFGMR3DestroyTree: db 'CFGMR3DestroyTree',0
g_szCFGMR3GetValueName: db 'CFGMR3GetValueName',0
g_szCFGMR3GetName: db 'CFGMR3GetName',0
g_szCFGMR3RemoveNode: db 'CFGMR3RemoveNode',0
g_szCFGMR3InsertBytes: db 'CFGMR3InsertBytes',0
g_szCFGMR3InsertStringFV: db 'CFGMR3InsertStringFV',0
g_szCFGMR3InsertStringF: db 'CFGMR3InsertStringF',0
g_szCFGMR3InsertStringN: db 'CFGMR3InsertStringN',0
g_szCFGMR3InsertString: db 'CFGMR3InsertString',0
g_szCFGMR3InsertStringW: db 'CFGMR3InsertStringW',0
g_szCFGMR3InsertInteger: db 'CFGMR3InsertInteger',0
g_szCFGMR3QueryStringAllocDef: db 'CFGMR3QueryStringAllocDef',0
g_szCFGMR3RemoveValue: db 'CFGMR3RemoveValue',0
g_szCFGMR3QueryIntegerDef: db 'CFGMR3QueryIntegerDef',0
g_szCFGMR3QueryGCPtrSDef: db 'CFGMR3QueryGCPtrSDef',0
g_szCFGMR3QueryGCPtrUDef: db 'CFGMR3QueryGCPtrUDef',0
g_szCFGMR3QueryGCPtrDef: db 'CFGMR3QueryGCPtrDef',0
g_szCFGMR3QueryPtrDef: db 'CFGMR3QueryPtrDef',0
g_szCFGMR3QueryBoolDef: db 'CFGMR3QueryBoolDef',0
g_szCFGMR3QueryS8Def: db 'CFGMR3QueryS8Def',0
g_szCFGMR3QueryU8Def: db 'CFGMR3QueryU8Def',0
g_szCFGMR3QueryS16Def: db 'CFGMR3QueryS16Def',0
g_szCFGMR3QueryU16Def: db 'CFGMR3QueryU16Def',0
g_szCFGMR3QueryPortDef: db 'CFGMR3QueryPortDef',0
g_szCFGMR3QueryS32Def: db 'CFGMR3QueryS32Def',0
g_szCFGMR3QuerySIntDef: db 'CFGMR3QuerySIntDef',0
g_szCFGMR3QueryU32Def: db 'CFGMR3QueryU32Def',0
g_szCFGMR3QueryUIntDef: db 'CFGMR3QueryUIntDef',0
g_szCFGMR3QueryS64Def: db 'CFGMR3QueryS64Def',0
g_szCFGMR3QueryU64Def: db 'CFGMR3QueryU64Def',0
g_szCFGMR3QueryInteger: db 'CFGMR3QueryInteger',0
g_szCFGMR3QueryGCPtrS: db 'CFGMR3QueryGCPtrS',0
g_szCFGMR3QueryGCPtrU: db 'CFGMR3QueryGCPtrU',0
g_szCFGMR3QueryGCPtr: db 'CFGMR3QueryGCPtr',0
g_szCFGMR3QueryPtr: db 'CFGMR3QueryPtr',0
g_szCFGMR3QueryBool: db 'CFGMR3QueryBool',0
g_szCFGMR3QueryS8: db 'CFGMR3QueryS8',0
g_szCFGMR3QueryU8: db 'CFGMR3QueryU8',0
g_szCFGMR3QueryS16: db 'CFGMR3QueryS16',0
g_szCFGMR3QueryU16: db 'CFGMR3QueryU16',0
g_szCFGMR3QueryPort: db 'CFGMR3QueryPort',0
g_szCFGMR3QueryS32: db 'CFGMR3QueryS32',0
g_szCFGMR3QuerySInt: db 'CFGMR3QuerySInt',0
g_szCFGMR3QueryU32: db 'CFGMR3QueryU32',0
g_szCFGMR3QueryUInt: db 'CFGMR3QueryUInt',0
g_szCFGMR3QueryS64: db 'CFGMR3QueryS64',0
g_szCFGMR3QueryU64: db 'CFGMR3QueryU64',0
g_szCFGMR3QuerySize: db 'CFGMR3QuerySize',0
g_szCFGMR3QueryType: db 'CFGMR3QueryType',0
g_szCFGMR3AreValuesValid: db 'CFGMR3AreValuesValid',0
g_szCFGMR3AreChildrenValid: db 'CFGMR3AreChildrenValid',0
g_szCFGMR3GetChildFV: db 'CFGMR3GetChildFV',0
g_szCFGMR3GetChildF: db 'CFGMR3GetChildF',0
g_szCFGMR3GetChild: db 'CFGMR3GetChild',0
g_szCFGMR3InsertNode: db 'CFGMR3InsertNode',0
g_szCFGMR3InsertNodeFV: db 'CFGMR3InsertNodeFV',0
g_szCFGMR3InsertNodeF: db 'CFGMR3InsertNodeF',0
g_szCFGMR3InsertSubTree: db 'CFGMR3InsertSubTree',0
g_szCFGMR3ValidateConfig: db 'CFGMR3ValidateConfig',0
g_szCFGMR3QueryBytes: db 'CFGMR3QueryBytes',0
g_szCFGMR3QueryStringDef: db 'CFGMR3QueryStringDef',0
g_szCFGMR3QueryString: db 'CFGMR3QueryString',0
g_szCFGMR3QueryStringAlloc: db 'CFGMR3QueryStringAlloc',0
g_szCFGMR3GetParent: db 'CFGMR3GetParent',0
g_szCFGMR3GetRootU: db 'CFGMR3GetRootU',0
g_szCSAMR3IsEnabled: db 'CSAMR3IsEnabled',0
g_szCSAMR3SetScanningEnabled: db 'CSAMR3SetScanningEnabled',0
g_szDBGCCreate: db 'DBGCCreate',0
g_szDBGFR3CoreWrite: db 'DBGFR3CoreWrite',0
g_szDBGFR3Info: db 'DBGFR3Info',0
g_szDBGFR3InfoRegisterExternal: db 'DBGFR3InfoRegisterExternal',0
g_szDBGFR3InjectNMI: db 'DBGFR3InjectNMI',0
g_szDBGFR3LogModifyDestinations: db 'DBGFR3LogModifyDestinations',0
g_szDBGFR3LogModifyFlags: db 'DBGFR3LogModifyFlags',0
g_szDBGFR3LogModifyGroups: db 'DBGFR3LogModifyGroups',0
g_szDBGFR3OSDetect: db 'DBGFR3OSDetect',0
g_szDBGFR3OSQueryNameAndVersion: db 'DBGFR3OSQueryNameAndVersion',0
g_szDBGFR3RegCpuQueryU32: db 'DBGFR3RegCpuQueryU32',0
g_szDBGFR3RegFormatValue: db 'DBGFR3RegFormatValue',0
g_szDBGFR3RegNmQuery: db 'DBGFR3RegNmQuery',0
g_szDBGFR3RegNmQueryAll: db 'DBGFR3RegNmQueryAll',0
g_szDBGFR3RegNmQueryAllCount: db 'DBGFR3RegNmQueryAllCount',0
g_szDBGFR3OSDeregister: db 'DBGFR3OSDeregister',0
g_szDBGFR3OSRegister: db 'DBGFR3OSRegister',0
g_szDBGFR3MemReadString: db 'DBGFR3MemReadString',0
g_szDBGFR3MemRead: db 'DBGFR3MemRead',0
g_szDBGFR3MemScan: db 'DBGFR3MemScan',0
g_szDBGFR3AddrFromFlat: db 'DBGFR3AddrFromFlat',0
g_szDBGFR3AsSymbolByName: db 'DBGFR3AsSymbolByName',0
g_szDBGFR3AsResolveAndRetain: db 'DBGFR3AsResolveAndRetain',0
g_szDBGFR3AsSetAlias: db 'DBGFR3AsSetAlias',0
g_szDBGFR3AddrAdd: db 'DBGFR3AddrAdd',0
g_szDBGFR3AddrSub: db 'DBGFR3AddrSub',0
g_szDBGFR3AsGetConfig: db 'DBGFR3AsGetConfig',0
g_szDBGFR3CpuGetMode: db 'DBGFR3CpuGetMode',0
g_szDBGFR3AddrFromSelOff: db 'DBGFR3AddrFromSelOff',0
g_szEMR3QueryExecutionPolicy: db 'EMR3QueryExecutionPolicy',0
g_szEMR3SetExecutionPolicy: db 'EMR3SetExecutionPolicy',0
g_szFTMR3CancelStandby: db 'FTMR3CancelStandby',0
g_szFTMR3PowerOn: db 'FTMR3PowerOn',0
g_szHMR3IsEnabled: db 'HMR3IsEnabled',0
g_szHMR3IsNestedPagingActive: db 'HMR3IsNestedPagingActive',0
g_szHMR3IsUXActive: db 'HMR3IsUXActive',0
g_szHMR3IsVpidActive: db 'HMR3IsVpidActive',0
g_szMMR3HeapFree: db 'MMR3HeapFree',0
g_szMMR3HeapRealloc: db 'MMR3HeapRealloc',0
g_szPATMR3AllowPatching: db 'PATMR3AllowPatching',0
g_szPATMR3IsEnabled: db 'PATMR3IsEnabled',0
g_szPDMR3AsyncCompletionBwMgrSetMaxForFile: db 'PDMR3AsyncCompletionBwMgrSetMaxForFile',0
g_szPDMR3DeviceAttach: db 'PDMR3DeviceAttach',0
g_szPDMR3DeviceDetach: db 'PDMR3DeviceDetach',0
g_szPDMR3DriverAttach: db 'PDMR3DriverAttach',0
g_szPDMR3NsBwGroupSetLimit: db 'PDMR3NsBwGroupSetLimit',0
g_szPDMR3QueryDeviceLun: db 'PDMR3QueryDeviceLun',0
g_szPDMR3QueryDriverOnLun: db 'PDMR3QueryDriverOnLun',0
g_szPDMR3QueryLun: db 'PDMR3QueryLun',0
g_szPDMCritSectEnter: db 'PDMCritSectEnter',0
g_szPDMCritSectEnterDebug: db 'PDMCritSectEnterDebug',0
g_szPDMCritSectTryEnter: db 'PDMCritSectTryEnter',0
g_szPDMCritSectTryEnterDebug: db 'PDMCritSectTryEnterDebug',0
g_szPDMR3CritSectEnterEx: db 'PDMR3CritSectEnterEx',0
g_szPDMCritSectLeave: db 'PDMCritSectLeave',0
g_szPDMCritSectIsOwner: db 'PDMCritSectIsOwner',0
g_szPDMCritSectIsOwnerEx: db 'PDMCritSectIsOwnerEx',0
g_szPDMCritSectIsOwned: db 'PDMCritSectIsOwned',0
g_szPDMCritSectIsInitialized: db 'PDMCritSectIsInitialized',0
g_szPDMCritSectHasWaiters: db 'PDMCritSectHasWaiters',0
g_szPDMCritSectGetRecursion: db 'PDMCritSectGetRecursion',0
g_szPDMR3CritSectYield: db 'PDMR3CritSectYield',0
g_szPDMR3CritSectName: db 'PDMR3CritSectName',0
g_szPDMR3CritSectScheduleExitEvent: db 'PDMR3CritSectScheduleExitEvent',0
g_szPDMR3CritSectDelete: db 'PDMR3CritSectDelete',0
g_szPDMR3QueueDestroy: db 'PDMR3QueueDestroy',0
g_szPDMQueueAlloc: db 'PDMQueueAlloc',0
g_szPDMQueueInsert: db 'PDMQueueInsert',0
g_szPDMQueueInsertEx: db 'PDMQueueInsertEx',0
g_szPDMQueueR0Ptr: db 'PDMQueueR0Ptr',0
g_szPDMQueueRCPtr: db 'PDMQueueRCPtr',0
g_szPDMR3ThreadDestroy: db 'PDMR3ThreadDestroy',0
g_szPDMR3ThreadIAmRunning: db 'PDMR3ThreadIAmRunning',0
g_szPDMR3ThreadIAmSuspending: db 'PDMR3ThreadIAmSuspending',0
g_szPDMR3ThreadResume: db 'PDMR3ThreadResume',0
g_szPDMR3ThreadSleep: db 'PDMR3ThreadSleep',0
g_szPDMR3ThreadSuspend: db 'PDMR3ThreadSuspend',0
g_szPDMR3UsbCreateEmulatedDevice: db 'PDMR3UsbCreateEmulatedDevice',0
g_szPDMR3UsbCreateProxyDevice: db 'PDMR3UsbCreateProxyDevice',0
g_szPDMR3UsbDetachDevice: db 'PDMR3UsbDetachDevice',0
g_szPDMR3UsbHasHub: db 'PDMR3UsbHasHub',0
g_szPGMHandlerPhysicalPageTempOff: db 'PGMHandlerPhysicalPageTempOff',0
g_szPGMPhysReadGCPtr: db 'PGMPhysReadGCPtr',0
g_szPGMPhysSimpleDirtyWriteGCPtr: db 'PGMPhysSimpleDirtyWriteGCPtr',0
g_szPGMPhysSimpleReadGCPtr: db 'PGMPhysSimpleReadGCPtr',0
g_szPGMPhysSimpleWriteGCPhys: db 'PGMPhysSimpleWriteGCPhys',0
g_szPGMPhysSimpleWriteGCPtr: db 'PGMPhysSimpleWriteGCPtr',0
g_szPGMPhysWriteGCPtr: db 'PGMPhysWriteGCPtr',0
g_szPGMShwMakePageWritable: db 'PGMShwMakePageWritable',0
g_szPGMR3QueryGlobalMemoryStats: db 'PGMR3QueryGlobalMemoryStats',0
g_szPGMR3QueryMemoryStats: db 'PGMR3QueryMemoryStats',0
g_szSSMR3Close: db 'SSMR3Close',0
g_szSSMR3DeregisterExternal: db 'SSMR3DeregisterExternal',0
g_szSSMR3DeregisterInternal: db 'SSMR3DeregisterInternal',0
g_szSSMR3GetBool: db 'SSMR3GetBool',0
g_szSSMR3GetGCPhys: db 'SSMR3GetGCPhys',0
g_szSSMR3GetGCPhys32: db 'SSMR3GetGCPhys32',0
g_szSSMR3GetGCPhys64: db 'SSMR3GetGCPhys64',0
g_szSSMR3GetGCPtr: db 'SSMR3GetGCPtr',0
g_szSSMR3GetGCUInt: db 'SSMR3GetGCUInt',0
g_szSSMR3GetGCUIntPtr: db 'SSMR3GetGCUIntPtr',0
g_szSSMR3GetGCUIntReg: db 'SSMR3GetGCUIntReg',0
g_szSSMR3GetIOPort: db 'SSMR3GetIOPort',0
g_szSSMR3GetMem: db 'SSMR3GetMem',0
g_szSSMR3GetRCPtr: db 'SSMR3GetRCPtr',0
g_szSSMR3GetS128: db 'SSMR3GetS128',0
g_szSSMR3GetS16: db 'SSMR3GetS16',0
g_szSSMR3GetS32: db 'SSMR3GetS32',0
g_szSSMR3GetS64: db 'SSMR3GetS64',0
g_szSSMR3GetS8: db 'SSMR3GetS8',0
g_szSSMR3GetSInt: db 'SSMR3GetSInt',0
g_szSSMR3GetSel: db 'SSMR3GetSel',0
g_szSSMR3GetStrZ: db 'SSMR3GetStrZ',0
g_szSSMR3GetStrZEx: db 'SSMR3GetStrZEx',0
g_szSSMR3GetStruct: db 'SSMR3GetStruct',0
g_szSSMR3GetStructEx: db 'SSMR3GetStructEx',0
g_szSSMR3GetU128: db 'SSMR3GetU128',0
g_szSSMR3GetU16: db 'SSMR3GetU16',0
g_szSSMR3GetU32: db 'SSMR3GetU32',0
g_szSSMR3GetU64: db 'SSMR3GetU64',0
g_szSSMR3GetU8: db 'SSMR3GetU8',0
g_szSSMR3GetUInt: db 'SSMR3GetUInt',0
g_szSSMR3HandleGetAfter: db 'SSMR3HandleGetAfter',0
g_szSSMR3HandleGetStatus: db 'SSMR3HandleGetStatus',0
g_szSSMR3HandleHostBits: db 'SSMR3HandleHostBits',0
g_szSSMR3HandleHostOSAndArch: db 'SSMR3HandleHostOSAndArch',0
g_szSSMR3HandleIsLiveSave: db 'SSMR3HandleIsLiveSave',0
g_szSSMR3HandleMaxDowntime: db 'SSMR3HandleMaxDowntime',0
g_szSSMR3HandleReportLivePercent: db 'SSMR3HandleReportLivePercent',0
g_szSSMR3HandleRevision: db 'SSMR3HandleRevision',0
g_szSSMR3HandleSetStatus: db 'SSMR3HandleSetStatus',0
g_szSSMR3HandleVersion: db 'SSMR3HandleVersion',0
g_szSSMR3Open: db 'SSMR3Open',0
g_szSSMR3PutBool: db 'SSMR3PutBool',0
g_szSSMR3PutGCPhys: db 'SSMR3PutGCPhys',0
g_szSSMR3PutGCPhys32: db 'SSMR3PutGCPhys32',0
g_szSSMR3PutGCPhys64: db 'SSMR3PutGCPhys64',0
g_szSSMR3PutGCPtr: db 'SSMR3PutGCPtr',0
g_szSSMR3PutGCUInt: db 'SSMR3PutGCUInt',0
g_szSSMR3PutGCUIntPtr: db 'SSMR3PutGCUIntPtr',0
g_szSSMR3PutGCUIntReg: db 'SSMR3PutGCUIntReg',0
g_szSSMR3PutIOPort: db 'SSMR3PutIOPort',0
g_szSSMR3PutMem: db 'SSMR3PutMem',0
g_szSSMR3PutRCPtr: db 'SSMR3PutRCPtr',0
g_szSSMR3PutS128: db 'SSMR3PutS128',0
g_szSSMR3PutS16: db 'SSMR3PutS16',0
g_szSSMR3PutS32: db 'SSMR3PutS32',0
g_szSSMR3PutS64: db 'SSMR3PutS64',0
g_szSSMR3PutS8: db 'SSMR3PutS8',0
g_szSSMR3PutSInt: db 'SSMR3PutSInt',0
g_szSSMR3PutSel: db 'SSMR3PutSel',0
g_szSSMR3PutStrZ: db 'SSMR3PutStrZ',0
g_szSSMR3PutStruct: db 'SSMR3PutStruct',0
g_szSSMR3PutStructEx: db 'SSMR3PutStructEx',0
g_szSSMR3PutU128: db 'SSMR3PutU128',0
g_szSSMR3PutU16: db 'SSMR3PutU16',0
g_szSSMR3PutU32: db 'SSMR3PutU32',0
g_szSSMR3PutU64: db 'SSMR3PutU64',0
g_szSSMR3PutU8: db 'SSMR3PutU8',0
g_szSSMR3PutUInt: db 'SSMR3PutUInt',0
g_szSSMR3Seek: db 'SSMR3Seek',0
g_szSSMR3SetCfgError: db 'SSMR3SetCfgError',0
g_szSSMR3SetLoadError: db 'SSMR3SetLoadError',0
g_szSSMR3SetLoadErrorV: db 'SSMR3SetLoadErrorV',0
g_szSSMR3Skip: db 'SSMR3Skip',0
g_szSSMR3SkipToEndOfUnit: db 'SSMR3SkipToEndOfUnit',0
g_szSSMR3ValidateFile: db 'SSMR3ValidateFile',0
g_szSSMR3Cancel: db 'SSMR3Cancel',0
g_szSSMR3RegisterExternal: db 'SSMR3RegisterExternal',0
g_szSTAMR3Dump: db 'STAMR3Dump',0
g_szSTAMR3Enum: db 'STAMR3Enum',0
g_szSTAMR3Reset: db 'STAMR3Reset',0
g_szSTAMR3Snapshot: db 'STAMR3Snapshot',0
g_szSTAMR3SnapshotFree: db 'STAMR3SnapshotFree',0
g_szSTAMR3GetUnit: db 'STAMR3GetUnit',0
g_szTMR3TimerSetCritSect: db 'TMR3TimerSetCritSect',0
g_szTMR3TimerLoad: db 'TMR3TimerLoad',0
g_szTMR3TimerSave: db 'TMR3TimerSave',0
g_szTMR3TimerDestroy: db 'TMR3TimerDestroy',0
g_szTMTimerFromMicro: db 'TMTimerFromMicro',0
g_szTMTimerFromMilli: db 'TMTimerFromMilli',0
g_szTMTimerFromNano: db 'TMTimerFromNano',0
g_szTMTimerGet: db 'TMTimerGet',0
g_szTMTimerGetFreq: db 'TMTimerGetFreq',0
g_szTMTimerGetMicro: db 'TMTimerGetMicro',0
g_szTMTimerGetMilli: db 'TMTimerGetMilli',0
g_szTMTimerGetNano: db 'TMTimerGetNano',0
g_szTMTimerIsActive: db 'TMTimerIsActive',0
g_szTMTimerIsLockOwner: db 'TMTimerIsLockOwner',0
g_szTMTimerLock: db 'TMTimerLock',0
g_szTMTimerR0Ptr: db 'TMTimerR0Ptr',0
g_szTMTimerR3Ptr: db 'TMTimerR3Ptr',0
g_szTMTimerRCPtr: db 'TMTimerRCPtr',0
g_szTMTimerSet: db 'TMTimerSet',0
g_szTMTimerSetFrequencyHint: db 'TMTimerSetFrequencyHint',0
g_szTMTimerSetMicro: db 'TMTimerSetMicro',0
g_szTMTimerSetMillies: db 'TMTimerSetMillies',0
g_szTMTimerSetNano: db 'TMTimerSetNano',0
g_szTMTimerSetRelative: db 'TMTimerSetRelative',0
g_szTMTimerStop: db 'TMTimerStop',0
g_szTMTimerToMicro: db 'TMTimerToMicro',0
g_szTMTimerToMilli: db 'TMTimerToMilli',0
g_szTMTimerToNano: db 'TMTimerToNano',0
g_szTMTimerUnlock: db 'TMTimerUnlock',0
g_szTMR3GetWarpDrive: db 'TMR3GetWarpDrive',0
g_szTMR3SetWarpDrive: db 'TMR3SetWarpDrive',0
g_szVMMGetCpu: db 'VMMGetCpu',0
g_szVMMGetSvnRev: db 'VMMGetSvnRev',0
g_szVMSetError: db 'VMSetError',0
g_szVMSetErrorV: db 'VMSetErrorV',0
g_szVMR3AtErrorDeregister: db 'VMR3AtErrorDeregister',0
g_szVMR3AtErrorRegister: db 'VMR3AtErrorRegister',0
g_szVMR3AtRuntimeErrorRegister: db 'VMR3AtRuntimeErrorRegister',0
g_szVMR3AtStateRegister: db 'VMR3AtStateRegister',0
g_szVMR3Create: db 'VMR3Create',0
g_szVMR3Destroy: db 'VMR3Destroy',0
g_szVMR3GetCpuCoreAndPackageIdFromCpuId: db 'VMR3GetCpuCoreAndPackageIdFromCpuId',0
g_szVMR3GetStateName: db 'VMR3GetStateName',0
g_szVMR3GetStateU: db 'VMR3GetStateU',0
g_szVMR3GetVM: db 'VMR3GetVM',0
g_szVMR3HotPlugCpu: db 'VMR3HotPlugCpu',0
g_szVMR3HotUnplugCpu: db 'VMR3HotUnplugCpu',0
g_szVMR3LoadFromFile: db 'VMR3LoadFromFile',0
g_szVMR3LoadFromStream: db 'VMR3LoadFromStream',0
g_szVMR3PowerOff: db 'VMR3PowerOff',0
g_szVMR3PowerOn: db 'VMR3PowerOn',0
g_szVMR3ReleaseUVM: db 'VMR3ReleaseUVM',0
g_szVMR3ReqCallNoWaitU: db 'VMR3ReqCallNoWaitU',0
g_szVMR3ReqCallU: db 'VMR3ReqCallU',0
g_szVMR3ReqCallVoidWaitU: db 'VMR3ReqCallVoidWaitU',0
g_szVMR3ReqCallWaitU: db 'VMR3ReqCallWaitU',0
g_szVMR3ReqFree: db 'VMR3ReqFree',0
g_szVMR3ReqPriorityCallWaitU: db 'VMR3ReqPriorityCallWaitU',0
g_szVMR3ReqWait: db 'VMR3ReqWait',0
g_szVMR3Reset: db 'VMR3Reset',0
g_szVMR3Resume: db 'VMR3Resume',0
g_szVMR3RetainUVM: db 'VMR3RetainUVM',0
g_szVMR3Save: db 'VMR3Save',0
g_szVMR3SetCpuExecutionCap: db 'VMR3SetCpuExecutionCap',0
g_szVMR3SetError: db 'VMR3SetError',0
g_szVMR3SetPowerOffInsteadOfReset: db 'VMR3SetPowerOffInsteadOfReset',0
g_szVMR3Suspend: db 'VMR3Suspend',0
g_szVMR3Teleport: db 'VMR3Teleport',0
g_szVMR3AtStateDeregister: db 'VMR3AtStateDeregister',0
g_szVMR3GetUVM: db 'VMR3GetUVM',0
g_EndOfNames: db 0


;
; Lazy load+resolve stubs.
;
BEGINCODE
___LazyLoad___CFGMR3GetRoot:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3GetRoot wrt rip]
    lea     r10, [g_pfnCFGMR3GetRoot wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3GetRoot
    push    g_pfnCFGMR3GetRoot
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3GetRoot)

___LazyLoad___CFGMR3GetFirstChild:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3GetFirstChild wrt rip]
    lea     r10, [g_pfnCFGMR3GetFirstChild wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3GetFirstChild
    push    g_pfnCFGMR3GetFirstChild
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3GetFirstChild)

___LazyLoad___CFGMR3GetNextChild:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3GetNextChild wrt rip]
    lea     r10, [g_pfnCFGMR3GetNextChild wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3GetNextChild
    push    g_pfnCFGMR3GetNextChild
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3GetNextChild)

___LazyLoad___CFGMR3GetNameLen:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3GetNameLen wrt rip]
    lea     r10, [g_pfnCFGMR3GetNameLen wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3GetNameLen
    push    g_pfnCFGMR3GetNameLen
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3GetNameLen)

___LazyLoad___CFGMR3GetFirstValue:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3GetFirstValue wrt rip]
    lea     r10, [g_pfnCFGMR3GetFirstValue wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3GetFirstValue
    push    g_pfnCFGMR3GetFirstValue
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3GetFirstValue)

___LazyLoad___CFGMR3GetNextValue:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3GetNextValue wrt rip]
    lea     r10, [g_pfnCFGMR3GetNextValue wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3GetNextValue
    push    g_pfnCFGMR3GetNextValue
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3GetNextValue)

___LazyLoad___CFGMR3GetValueNameLen:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3GetValueNameLen wrt rip]
    lea     r10, [g_pfnCFGMR3GetValueNameLen wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3GetValueNameLen
    push    g_pfnCFGMR3GetValueNameLen
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3GetValueNameLen)

___LazyLoad___CFGMR3GetValueType:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3GetValueType wrt rip]
    lea     r10, [g_pfnCFGMR3GetValueType wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3GetValueType
    push    g_pfnCFGMR3GetValueType
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3GetValueType)

___LazyLoad___CFGMR3Dump:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3Dump wrt rip]
    lea     r10, [g_pfnCFGMR3Dump wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3Dump
    push    g_pfnCFGMR3Dump
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3Dump)

___LazyLoad___CFGMR3CreateTree:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3CreateTree wrt rip]
    lea     r10, [g_pfnCFGMR3CreateTree wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3CreateTree
    push    g_pfnCFGMR3CreateTree
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3CreateTree)

___LazyLoad___CFGMR3DestroyTree:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3DestroyTree wrt rip]
    lea     r10, [g_pfnCFGMR3DestroyTree wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3DestroyTree
    push    g_pfnCFGMR3DestroyTree
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3DestroyTree)

___LazyLoad___CFGMR3GetValueName:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3GetValueName wrt rip]
    lea     r10, [g_pfnCFGMR3GetValueName wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3GetValueName
    push    g_pfnCFGMR3GetValueName
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3GetValueName)

___LazyLoad___CFGMR3GetName:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3GetName wrt rip]
    lea     r10, [g_pfnCFGMR3GetName wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3GetName
    push    g_pfnCFGMR3GetName
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3GetName)

___LazyLoad___CFGMR3RemoveNode:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3RemoveNode wrt rip]
    lea     r10, [g_pfnCFGMR3RemoveNode wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3RemoveNode
    push    g_pfnCFGMR3RemoveNode
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3RemoveNode)

___LazyLoad___CFGMR3InsertBytes:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3InsertBytes wrt rip]
    lea     r10, [g_pfnCFGMR3InsertBytes wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3InsertBytes
    push    g_pfnCFGMR3InsertBytes
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3InsertBytes)

___LazyLoad___CFGMR3InsertStringFV:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3InsertStringFV wrt rip]
    lea     r10, [g_pfnCFGMR3InsertStringFV wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3InsertStringFV
    push    g_pfnCFGMR3InsertStringFV
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3InsertStringFV)

___LazyLoad___CFGMR3InsertStringF:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3InsertStringF wrt rip]
    lea     r10, [g_pfnCFGMR3InsertStringF wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3InsertStringF
    push    g_pfnCFGMR3InsertStringF
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3InsertStringF)

___LazyLoad___CFGMR3InsertStringN:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3InsertStringN wrt rip]
    lea     r10, [g_pfnCFGMR3InsertStringN wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3InsertStringN
    push    g_pfnCFGMR3InsertStringN
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3InsertStringN)

___LazyLoad___CFGMR3InsertString:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3InsertString wrt rip]
    lea     r10, [g_pfnCFGMR3InsertString wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3InsertString
    push    g_pfnCFGMR3InsertString
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3InsertString)

___LazyLoad___CFGMR3InsertStringW:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3InsertStringW wrt rip]
    lea     r10, [g_pfnCFGMR3InsertStringW wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3InsertStringW
    push    g_pfnCFGMR3InsertStringW
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3InsertStringW)

___LazyLoad___CFGMR3InsertInteger:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3InsertInteger wrt rip]
    lea     r10, [g_pfnCFGMR3InsertInteger wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3InsertInteger
    push    g_pfnCFGMR3InsertInteger
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3InsertInteger)

___LazyLoad___CFGMR3QueryStringAllocDef:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryStringAllocDef wrt rip]
    lea     r10, [g_pfnCFGMR3QueryStringAllocDef wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryStringAllocDef
    push    g_pfnCFGMR3QueryStringAllocDef
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryStringAllocDef)

___LazyLoad___CFGMR3RemoveValue:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3RemoveValue wrt rip]
    lea     r10, [g_pfnCFGMR3RemoveValue wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3RemoveValue
    push    g_pfnCFGMR3RemoveValue
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3RemoveValue)

___LazyLoad___CFGMR3QueryIntegerDef:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryIntegerDef wrt rip]
    lea     r10, [g_pfnCFGMR3QueryIntegerDef wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryIntegerDef
    push    g_pfnCFGMR3QueryIntegerDef
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryIntegerDef)

___LazyLoad___CFGMR3QueryGCPtrSDef:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryGCPtrSDef wrt rip]
    lea     r10, [g_pfnCFGMR3QueryGCPtrSDef wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryGCPtrSDef
    push    g_pfnCFGMR3QueryGCPtrSDef
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryGCPtrSDef)

___LazyLoad___CFGMR3QueryGCPtrUDef:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryGCPtrUDef wrt rip]
    lea     r10, [g_pfnCFGMR3QueryGCPtrUDef wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryGCPtrUDef
    push    g_pfnCFGMR3QueryGCPtrUDef
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryGCPtrUDef)

___LazyLoad___CFGMR3QueryGCPtrDef:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryGCPtrDef wrt rip]
    lea     r10, [g_pfnCFGMR3QueryGCPtrDef wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryGCPtrDef
    push    g_pfnCFGMR3QueryGCPtrDef
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryGCPtrDef)

___LazyLoad___CFGMR3QueryPtrDef:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryPtrDef wrt rip]
    lea     r10, [g_pfnCFGMR3QueryPtrDef wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryPtrDef
    push    g_pfnCFGMR3QueryPtrDef
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryPtrDef)

___LazyLoad___CFGMR3QueryBoolDef:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryBoolDef wrt rip]
    lea     r10, [g_pfnCFGMR3QueryBoolDef wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryBoolDef
    push    g_pfnCFGMR3QueryBoolDef
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryBoolDef)

___LazyLoad___CFGMR3QueryS8Def:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryS8Def wrt rip]
    lea     r10, [g_pfnCFGMR3QueryS8Def wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryS8Def
    push    g_pfnCFGMR3QueryS8Def
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryS8Def)

___LazyLoad___CFGMR3QueryU8Def:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryU8Def wrt rip]
    lea     r10, [g_pfnCFGMR3QueryU8Def wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryU8Def
    push    g_pfnCFGMR3QueryU8Def
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryU8Def)

___LazyLoad___CFGMR3QueryS16Def:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryS16Def wrt rip]
    lea     r10, [g_pfnCFGMR3QueryS16Def wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryS16Def
    push    g_pfnCFGMR3QueryS16Def
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryS16Def)

___LazyLoad___CFGMR3QueryU16Def:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryU16Def wrt rip]
    lea     r10, [g_pfnCFGMR3QueryU16Def wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryU16Def
    push    g_pfnCFGMR3QueryU16Def
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryU16Def)

___LazyLoad___CFGMR3QueryPortDef:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryPortDef wrt rip]
    lea     r10, [g_pfnCFGMR3QueryPortDef wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryPortDef
    push    g_pfnCFGMR3QueryPortDef
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryPortDef)

___LazyLoad___CFGMR3QueryS32Def:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryS32Def wrt rip]
    lea     r10, [g_pfnCFGMR3QueryS32Def wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryS32Def
    push    g_pfnCFGMR3QueryS32Def
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryS32Def)

___LazyLoad___CFGMR3QuerySIntDef:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QuerySIntDef wrt rip]
    lea     r10, [g_pfnCFGMR3QuerySIntDef wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QuerySIntDef
    push    g_pfnCFGMR3QuerySIntDef
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QuerySIntDef)

___LazyLoad___CFGMR3QueryU32Def:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryU32Def wrt rip]
    lea     r10, [g_pfnCFGMR3QueryU32Def wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryU32Def
    push    g_pfnCFGMR3QueryU32Def
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryU32Def)

___LazyLoad___CFGMR3QueryUIntDef:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryUIntDef wrt rip]
    lea     r10, [g_pfnCFGMR3QueryUIntDef wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryUIntDef
    push    g_pfnCFGMR3QueryUIntDef
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryUIntDef)

___LazyLoad___CFGMR3QueryS64Def:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryS64Def wrt rip]
    lea     r10, [g_pfnCFGMR3QueryS64Def wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryS64Def
    push    g_pfnCFGMR3QueryS64Def
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryS64Def)

___LazyLoad___CFGMR3QueryU64Def:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryU64Def wrt rip]
    lea     r10, [g_pfnCFGMR3QueryU64Def wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryU64Def
    push    g_pfnCFGMR3QueryU64Def
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryU64Def)

___LazyLoad___CFGMR3QueryInteger:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryInteger wrt rip]
    lea     r10, [g_pfnCFGMR3QueryInteger wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryInteger
    push    g_pfnCFGMR3QueryInteger
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryInteger)

___LazyLoad___CFGMR3QueryGCPtrS:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryGCPtrS wrt rip]
    lea     r10, [g_pfnCFGMR3QueryGCPtrS wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryGCPtrS
    push    g_pfnCFGMR3QueryGCPtrS
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryGCPtrS)

___LazyLoad___CFGMR3QueryGCPtrU:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryGCPtrU wrt rip]
    lea     r10, [g_pfnCFGMR3QueryGCPtrU wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryGCPtrU
    push    g_pfnCFGMR3QueryGCPtrU
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryGCPtrU)

___LazyLoad___CFGMR3QueryGCPtr:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryGCPtr wrt rip]
    lea     r10, [g_pfnCFGMR3QueryGCPtr wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryGCPtr
    push    g_pfnCFGMR3QueryGCPtr
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryGCPtr)

___LazyLoad___CFGMR3QueryPtr:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryPtr wrt rip]
    lea     r10, [g_pfnCFGMR3QueryPtr wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryPtr
    push    g_pfnCFGMR3QueryPtr
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryPtr)

___LazyLoad___CFGMR3QueryBool:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryBool wrt rip]
    lea     r10, [g_pfnCFGMR3QueryBool wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryBool
    push    g_pfnCFGMR3QueryBool
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryBool)

___LazyLoad___CFGMR3QueryS8:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryS8 wrt rip]
    lea     r10, [g_pfnCFGMR3QueryS8 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryS8
    push    g_pfnCFGMR3QueryS8
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryS8)

___LazyLoad___CFGMR3QueryU8:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryU8 wrt rip]
    lea     r10, [g_pfnCFGMR3QueryU8 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryU8
    push    g_pfnCFGMR3QueryU8
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryU8)

___LazyLoad___CFGMR3QueryS16:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryS16 wrt rip]
    lea     r10, [g_pfnCFGMR3QueryS16 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryS16
    push    g_pfnCFGMR3QueryS16
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryS16)

___LazyLoad___CFGMR3QueryU16:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryU16 wrt rip]
    lea     r10, [g_pfnCFGMR3QueryU16 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryU16
    push    g_pfnCFGMR3QueryU16
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryU16)

___LazyLoad___CFGMR3QueryPort:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryPort wrt rip]
    lea     r10, [g_pfnCFGMR3QueryPort wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryPort
    push    g_pfnCFGMR3QueryPort
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryPort)

___LazyLoad___CFGMR3QueryS32:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryS32 wrt rip]
    lea     r10, [g_pfnCFGMR3QueryS32 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryS32
    push    g_pfnCFGMR3QueryS32
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryS32)

___LazyLoad___CFGMR3QuerySInt:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QuerySInt wrt rip]
    lea     r10, [g_pfnCFGMR3QuerySInt wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QuerySInt
    push    g_pfnCFGMR3QuerySInt
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QuerySInt)

___LazyLoad___CFGMR3QueryU32:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryU32 wrt rip]
    lea     r10, [g_pfnCFGMR3QueryU32 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryU32
    push    g_pfnCFGMR3QueryU32
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryU32)

___LazyLoad___CFGMR3QueryUInt:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryUInt wrt rip]
    lea     r10, [g_pfnCFGMR3QueryUInt wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryUInt
    push    g_pfnCFGMR3QueryUInt
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryUInt)

___LazyLoad___CFGMR3QueryS64:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryS64 wrt rip]
    lea     r10, [g_pfnCFGMR3QueryS64 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryS64
    push    g_pfnCFGMR3QueryS64
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryS64)

___LazyLoad___CFGMR3QueryU64:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryU64 wrt rip]
    lea     r10, [g_pfnCFGMR3QueryU64 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryU64
    push    g_pfnCFGMR3QueryU64
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryU64)

___LazyLoad___CFGMR3QuerySize:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QuerySize wrt rip]
    lea     r10, [g_pfnCFGMR3QuerySize wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QuerySize
    push    g_pfnCFGMR3QuerySize
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QuerySize)

___LazyLoad___CFGMR3QueryType:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryType wrt rip]
    lea     r10, [g_pfnCFGMR3QueryType wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryType
    push    g_pfnCFGMR3QueryType
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryType)

___LazyLoad___CFGMR3AreValuesValid:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3AreValuesValid wrt rip]
    lea     r10, [g_pfnCFGMR3AreValuesValid wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3AreValuesValid
    push    g_pfnCFGMR3AreValuesValid
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3AreValuesValid)

___LazyLoad___CFGMR3AreChildrenValid:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3AreChildrenValid wrt rip]
    lea     r10, [g_pfnCFGMR3AreChildrenValid wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3AreChildrenValid
    push    g_pfnCFGMR3AreChildrenValid
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3AreChildrenValid)

___LazyLoad___CFGMR3GetChildFV:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3GetChildFV wrt rip]
    lea     r10, [g_pfnCFGMR3GetChildFV wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3GetChildFV
    push    g_pfnCFGMR3GetChildFV
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3GetChildFV)

___LazyLoad___CFGMR3GetChildF:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3GetChildF wrt rip]
    lea     r10, [g_pfnCFGMR3GetChildF wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3GetChildF
    push    g_pfnCFGMR3GetChildF
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3GetChildF)

___LazyLoad___CFGMR3GetChild:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3GetChild wrt rip]
    lea     r10, [g_pfnCFGMR3GetChild wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3GetChild
    push    g_pfnCFGMR3GetChild
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3GetChild)

___LazyLoad___CFGMR3InsertNode:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3InsertNode wrt rip]
    lea     r10, [g_pfnCFGMR3InsertNode wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3InsertNode
    push    g_pfnCFGMR3InsertNode
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3InsertNode)

___LazyLoad___CFGMR3InsertNodeFV:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3InsertNodeFV wrt rip]
    lea     r10, [g_pfnCFGMR3InsertNodeFV wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3InsertNodeFV
    push    g_pfnCFGMR3InsertNodeFV
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3InsertNodeFV)

___LazyLoad___CFGMR3InsertNodeF:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3InsertNodeF wrt rip]
    lea     r10, [g_pfnCFGMR3InsertNodeF wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3InsertNodeF
    push    g_pfnCFGMR3InsertNodeF
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3InsertNodeF)

___LazyLoad___CFGMR3InsertSubTree:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3InsertSubTree wrt rip]
    lea     r10, [g_pfnCFGMR3InsertSubTree wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3InsertSubTree
    push    g_pfnCFGMR3InsertSubTree
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3InsertSubTree)

___LazyLoad___CFGMR3ValidateConfig:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3ValidateConfig wrt rip]
    lea     r10, [g_pfnCFGMR3ValidateConfig wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3ValidateConfig
    push    g_pfnCFGMR3ValidateConfig
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3ValidateConfig)

___LazyLoad___CFGMR3QueryBytes:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryBytes wrt rip]
    lea     r10, [g_pfnCFGMR3QueryBytes wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryBytes
    push    g_pfnCFGMR3QueryBytes
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryBytes)

___LazyLoad___CFGMR3QueryStringDef:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryStringDef wrt rip]
    lea     r10, [g_pfnCFGMR3QueryStringDef wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryStringDef
    push    g_pfnCFGMR3QueryStringDef
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryStringDef)

___LazyLoad___CFGMR3QueryString:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryString wrt rip]
    lea     r10, [g_pfnCFGMR3QueryString wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryString
    push    g_pfnCFGMR3QueryString
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryString)

___LazyLoad___CFGMR3QueryStringAlloc:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3QueryStringAlloc wrt rip]
    lea     r10, [g_pfnCFGMR3QueryStringAlloc wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3QueryStringAlloc
    push    g_pfnCFGMR3QueryStringAlloc
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3QueryStringAlloc)

___LazyLoad___CFGMR3GetParent:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3GetParent wrt rip]
    lea     r10, [g_pfnCFGMR3GetParent wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3GetParent
    push    g_pfnCFGMR3GetParent
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3GetParent)

___LazyLoad___CFGMR3GetRootU:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCFGMR3GetRootU wrt rip]
    lea     r10, [g_pfnCFGMR3GetRootU wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCFGMR3GetRootU
    push    g_pfnCFGMR3GetRootU
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CFGMR3GetRootU)

___LazyLoad___CSAMR3IsEnabled:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCSAMR3IsEnabled wrt rip]
    lea     r10, [g_pfnCSAMR3IsEnabled wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCSAMR3IsEnabled
    push    g_pfnCSAMR3IsEnabled
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CSAMR3IsEnabled)

___LazyLoad___CSAMR3SetScanningEnabled:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szCSAMR3SetScanningEnabled wrt rip]
    lea     r10, [g_pfnCSAMR3SetScanningEnabled wrt rip]
%elifdef RT_ARCH_X86
    push    g_szCSAMR3SetScanningEnabled
    push    g_pfnCSAMR3SetScanningEnabled
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(CSAMR3SetScanningEnabled)

___LazyLoad___DBGCCreate:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGCCreate wrt rip]
    lea     r10, [g_pfnDBGCCreate wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGCCreate
    push    g_pfnDBGCCreate
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGCCreate)

___LazyLoad___DBGFR3CoreWrite:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3CoreWrite wrt rip]
    lea     r10, [g_pfnDBGFR3CoreWrite wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3CoreWrite
    push    g_pfnDBGFR3CoreWrite
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3CoreWrite)

___LazyLoad___DBGFR3Info:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3Info wrt rip]
    lea     r10, [g_pfnDBGFR3Info wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3Info
    push    g_pfnDBGFR3Info
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3Info)

___LazyLoad___DBGFR3InfoRegisterExternal:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3InfoRegisterExternal wrt rip]
    lea     r10, [g_pfnDBGFR3InfoRegisterExternal wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3InfoRegisterExternal
    push    g_pfnDBGFR3InfoRegisterExternal
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3InfoRegisterExternal)

___LazyLoad___DBGFR3InjectNMI:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3InjectNMI wrt rip]
    lea     r10, [g_pfnDBGFR3InjectNMI wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3InjectNMI
    push    g_pfnDBGFR3InjectNMI
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3InjectNMI)

___LazyLoad___DBGFR3LogModifyDestinations:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3LogModifyDestinations wrt rip]
    lea     r10, [g_pfnDBGFR3LogModifyDestinations wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3LogModifyDestinations
    push    g_pfnDBGFR3LogModifyDestinations
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3LogModifyDestinations)

___LazyLoad___DBGFR3LogModifyFlags:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3LogModifyFlags wrt rip]
    lea     r10, [g_pfnDBGFR3LogModifyFlags wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3LogModifyFlags
    push    g_pfnDBGFR3LogModifyFlags
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3LogModifyFlags)

___LazyLoad___DBGFR3LogModifyGroups:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3LogModifyGroups wrt rip]
    lea     r10, [g_pfnDBGFR3LogModifyGroups wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3LogModifyGroups
    push    g_pfnDBGFR3LogModifyGroups
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3LogModifyGroups)

___LazyLoad___DBGFR3OSDetect:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3OSDetect wrt rip]
    lea     r10, [g_pfnDBGFR3OSDetect wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3OSDetect
    push    g_pfnDBGFR3OSDetect
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3OSDetect)

___LazyLoad___DBGFR3OSQueryNameAndVersion:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3OSQueryNameAndVersion wrt rip]
    lea     r10, [g_pfnDBGFR3OSQueryNameAndVersion wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3OSQueryNameAndVersion
    push    g_pfnDBGFR3OSQueryNameAndVersion
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3OSQueryNameAndVersion)

___LazyLoad___DBGFR3RegCpuQueryU32:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3RegCpuQueryU32 wrt rip]
    lea     r10, [g_pfnDBGFR3RegCpuQueryU32 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3RegCpuQueryU32
    push    g_pfnDBGFR3RegCpuQueryU32
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3RegCpuQueryU32)

___LazyLoad___DBGFR3RegFormatValue:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3RegFormatValue wrt rip]
    lea     r10, [g_pfnDBGFR3RegFormatValue wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3RegFormatValue
    push    g_pfnDBGFR3RegFormatValue
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3RegFormatValue)

___LazyLoad___DBGFR3RegNmQuery:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3RegNmQuery wrt rip]
    lea     r10, [g_pfnDBGFR3RegNmQuery wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3RegNmQuery
    push    g_pfnDBGFR3RegNmQuery
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3RegNmQuery)

___LazyLoad___DBGFR3RegNmQueryAll:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3RegNmQueryAll wrt rip]
    lea     r10, [g_pfnDBGFR3RegNmQueryAll wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3RegNmQueryAll
    push    g_pfnDBGFR3RegNmQueryAll
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3RegNmQueryAll)

___LazyLoad___DBGFR3RegNmQueryAllCount:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3RegNmQueryAllCount wrt rip]
    lea     r10, [g_pfnDBGFR3RegNmQueryAllCount wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3RegNmQueryAllCount
    push    g_pfnDBGFR3RegNmQueryAllCount
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3RegNmQueryAllCount)

___LazyLoad___DBGFR3OSDeregister:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3OSDeregister wrt rip]
    lea     r10, [g_pfnDBGFR3OSDeregister wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3OSDeregister
    push    g_pfnDBGFR3OSDeregister
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3OSDeregister)

___LazyLoad___DBGFR3OSRegister:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3OSRegister wrt rip]
    lea     r10, [g_pfnDBGFR3OSRegister wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3OSRegister
    push    g_pfnDBGFR3OSRegister
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3OSRegister)

___LazyLoad___DBGFR3MemReadString:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3MemReadString wrt rip]
    lea     r10, [g_pfnDBGFR3MemReadString wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3MemReadString
    push    g_pfnDBGFR3MemReadString
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3MemReadString)

___LazyLoad___DBGFR3MemRead:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3MemRead wrt rip]
    lea     r10, [g_pfnDBGFR3MemRead wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3MemRead
    push    g_pfnDBGFR3MemRead
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3MemRead)

___LazyLoad___DBGFR3MemScan:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3MemScan wrt rip]
    lea     r10, [g_pfnDBGFR3MemScan wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3MemScan
    push    g_pfnDBGFR3MemScan
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3MemScan)

___LazyLoad___DBGFR3AddrFromFlat:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3AddrFromFlat wrt rip]
    lea     r10, [g_pfnDBGFR3AddrFromFlat wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3AddrFromFlat
    push    g_pfnDBGFR3AddrFromFlat
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3AddrFromFlat)

___LazyLoad___DBGFR3AsSymbolByName:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3AsSymbolByName wrt rip]
    lea     r10, [g_pfnDBGFR3AsSymbolByName wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3AsSymbolByName
    push    g_pfnDBGFR3AsSymbolByName
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3AsSymbolByName)

___LazyLoad___DBGFR3AsResolveAndRetain:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3AsResolveAndRetain wrt rip]
    lea     r10, [g_pfnDBGFR3AsResolveAndRetain wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3AsResolveAndRetain
    push    g_pfnDBGFR3AsResolveAndRetain
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3AsResolveAndRetain)

___LazyLoad___DBGFR3AsSetAlias:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3AsSetAlias wrt rip]
    lea     r10, [g_pfnDBGFR3AsSetAlias wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3AsSetAlias
    push    g_pfnDBGFR3AsSetAlias
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3AsSetAlias)

___LazyLoad___DBGFR3AddrAdd:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3AddrAdd wrt rip]
    lea     r10, [g_pfnDBGFR3AddrAdd wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3AddrAdd
    push    g_pfnDBGFR3AddrAdd
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3AddrAdd)

___LazyLoad___DBGFR3AddrSub:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3AddrSub wrt rip]
    lea     r10, [g_pfnDBGFR3AddrSub wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3AddrSub
    push    g_pfnDBGFR3AddrSub
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3AddrSub)

___LazyLoad___DBGFR3AsGetConfig:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3AsGetConfig wrt rip]
    lea     r10, [g_pfnDBGFR3AsGetConfig wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3AsGetConfig
    push    g_pfnDBGFR3AsGetConfig
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3AsGetConfig)

___LazyLoad___DBGFR3CpuGetMode:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3CpuGetMode wrt rip]
    lea     r10, [g_pfnDBGFR3CpuGetMode wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3CpuGetMode
    push    g_pfnDBGFR3CpuGetMode
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3CpuGetMode)

___LazyLoad___DBGFR3AddrFromSelOff:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szDBGFR3AddrFromSelOff wrt rip]
    lea     r10, [g_pfnDBGFR3AddrFromSelOff wrt rip]
%elifdef RT_ARCH_X86
    push    g_szDBGFR3AddrFromSelOff
    push    g_pfnDBGFR3AddrFromSelOff
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(DBGFR3AddrFromSelOff)

___LazyLoad___EMR3QueryExecutionPolicy:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szEMR3QueryExecutionPolicy wrt rip]
    lea     r10, [g_pfnEMR3QueryExecutionPolicy wrt rip]
%elifdef RT_ARCH_X86
    push    g_szEMR3QueryExecutionPolicy
    push    g_pfnEMR3QueryExecutionPolicy
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(EMR3QueryExecutionPolicy)

___LazyLoad___EMR3SetExecutionPolicy:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szEMR3SetExecutionPolicy wrt rip]
    lea     r10, [g_pfnEMR3SetExecutionPolicy wrt rip]
%elifdef RT_ARCH_X86
    push    g_szEMR3SetExecutionPolicy
    push    g_pfnEMR3SetExecutionPolicy
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(EMR3SetExecutionPolicy)

___LazyLoad___FTMR3CancelStandby:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szFTMR3CancelStandby wrt rip]
    lea     r10, [g_pfnFTMR3CancelStandby wrt rip]
%elifdef RT_ARCH_X86
    push    g_szFTMR3CancelStandby
    push    g_pfnFTMR3CancelStandby
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(FTMR3CancelStandby)

___LazyLoad___FTMR3PowerOn:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szFTMR3PowerOn wrt rip]
    lea     r10, [g_pfnFTMR3PowerOn wrt rip]
%elifdef RT_ARCH_X86
    push    g_szFTMR3PowerOn
    push    g_pfnFTMR3PowerOn
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(FTMR3PowerOn)

___LazyLoad___HMR3IsEnabled:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szHMR3IsEnabled wrt rip]
    lea     r10, [g_pfnHMR3IsEnabled wrt rip]
%elifdef RT_ARCH_X86
    push    g_szHMR3IsEnabled
    push    g_pfnHMR3IsEnabled
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(HMR3IsEnabled)

___LazyLoad___HMR3IsNestedPagingActive:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szHMR3IsNestedPagingActive wrt rip]
    lea     r10, [g_pfnHMR3IsNestedPagingActive wrt rip]
%elifdef RT_ARCH_X86
    push    g_szHMR3IsNestedPagingActive
    push    g_pfnHMR3IsNestedPagingActive
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(HMR3IsNestedPagingActive)

___LazyLoad___HMR3IsUXActive:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szHMR3IsUXActive wrt rip]
    lea     r10, [g_pfnHMR3IsUXActive wrt rip]
%elifdef RT_ARCH_X86
    push    g_szHMR3IsUXActive
    push    g_pfnHMR3IsUXActive
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(HMR3IsUXActive)

___LazyLoad___HMR3IsVpidActive:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szHMR3IsVpidActive wrt rip]
    lea     r10, [g_pfnHMR3IsVpidActive wrt rip]
%elifdef RT_ARCH_X86
    push    g_szHMR3IsVpidActive
    push    g_pfnHMR3IsVpidActive
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(HMR3IsVpidActive)

___LazyLoad___MMR3HeapFree:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szMMR3HeapFree wrt rip]
    lea     r10, [g_pfnMMR3HeapFree wrt rip]
%elifdef RT_ARCH_X86
    push    g_szMMR3HeapFree
    push    g_pfnMMR3HeapFree
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(MMR3HeapFree)

___LazyLoad___MMR3HeapRealloc:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szMMR3HeapRealloc wrt rip]
    lea     r10, [g_pfnMMR3HeapRealloc wrt rip]
%elifdef RT_ARCH_X86
    push    g_szMMR3HeapRealloc
    push    g_pfnMMR3HeapRealloc
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(MMR3HeapRealloc)

___LazyLoad___PATMR3AllowPatching:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPATMR3AllowPatching wrt rip]
    lea     r10, [g_pfnPATMR3AllowPatching wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPATMR3AllowPatching
    push    g_pfnPATMR3AllowPatching
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PATMR3AllowPatching)

___LazyLoad___PATMR3IsEnabled:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPATMR3IsEnabled wrt rip]
    lea     r10, [g_pfnPATMR3IsEnabled wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPATMR3IsEnabled
    push    g_pfnPATMR3IsEnabled
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PATMR3IsEnabled)

___LazyLoad___PDMR3AsyncCompletionBwMgrSetMaxForFile:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMR3AsyncCompletionBwMgrSetMaxForFile wrt rip]
    lea     r10, [g_pfnPDMR3AsyncCompletionBwMgrSetMaxForFile wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMR3AsyncCompletionBwMgrSetMaxForFile
    push    g_pfnPDMR3AsyncCompletionBwMgrSetMaxForFile
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMR3AsyncCompletionBwMgrSetMaxForFile)

___LazyLoad___PDMR3DeviceAttach:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMR3DeviceAttach wrt rip]
    lea     r10, [g_pfnPDMR3DeviceAttach wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMR3DeviceAttach
    push    g_pfnPDMR3DeviceAttach
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMR3DeviceAttach)

___LazyLoad___PDMR3DeviceDetach:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMR3DeviceDetach wrt rip]
    lea     r10, [g_pfnPDMR3DeviceDetach wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMR3DeviceDetach
    push    g_pfnPDMR3DeviceDetach
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMR3DeviceDetach)

___LazyLoad___PDMR3DriverAttach:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMR3DriverAttach wrt rip]
    lea     r10, [g_pfnPDMR3DriverAttach wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMR3DriverAttach
    push    g_pfnPDMR3DriverAttach
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMR3DriverAttach)

___LazyLoad___PDMR3NsBwGroupSetLimit:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMR3NsBwGroupSetLimit wrt rip]
    lea     r10, [g_pfnPDMR3NsBwGroupSetLimit wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMR3NsBwGroupSetLimit
    push    g_pfnPDMR3NsBwGroupSetLimit
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMR3NsBwGroupSetLimit)

___LazyLoad___PDMR3QueryDeviceLun:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMR3QueryDeviceLun wrt rip]
    lea     r10, [g_pfnPDMR3QueryDeviceLun wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMR3QueryDeviceLun
    push    g_pfnPDMR3QueryDeviceLun
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMR3QueryDeviceLun)

___LazyLoad___PDMR3QueryDriverOnLun:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMR3QueryDriverOnLun wrt rip]
    lea     r10, [g_pfnPDMR3QueryDriverOnLun wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMR3QueryDriverOnLun
    push    g_pfnPDMR3QueryDriverOnLun
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMR3QueryDriverOnLun)

___LazyLoad___PDMR3QueryLun:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMR3QueryLun wrt rip]
    lea     r10, [g_pfnPDMR3QueryLun wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMR3QueryLun
    push    g_pfnPDMR3QueryLun
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMR3QueryLun)

___LazyLoad___PDMCritSectEnter:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMCritSectEnter wrt rip]
    lea     r10, [g_pfnPDMCritSectEnter wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMCritSectEnter
    push    g_pfnPDMCritSectEnter
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMCritSectEnter)

___LazyLoad___PDMCritSectEnterDebug:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMCritSectEnterDebug wrt rip]
    lea     r10, [g_pfnPDMCritSectEnterDebug wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMCritSectEnterDebug
    push    g_pfnPDMCritSectEnterDebug
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMCritSectEnterDebug)

___LazyLoad___PDMCritSectTryEnter:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMCritSectTryEnter wrt rip]
    lea     r10, [g_pfnPDMCritSectTryEnter wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMCritSectTryEnter
    push    g_pfnPDMCritSectTryEnter
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMCritSectTryEnter)

___LazyLoad___PDMCritSectTryEnterDebug:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMCritSectTryEnterDebug wrt rip]
    lea     r10, [g_pfnPDMCritSectTryEnterDebug wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMCritSectTryEnterDebug
    push    g_pfnPDMCritSectTryEnterDebug
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMCritSectTryEnterDebug)

___LazyLoad___PDMR3CritSectEnterEx:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMR3CritSectEnterEx wrt rip]
    lea     r10, [g_pfnPDMR3CritSectEnterEx wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMR3CritSectEnterEx
    push    g_pfnPDMR3CritSectEnterEx
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMR3CritSectEnterEx)

___LazyLoad___PDMCritSectLeave:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMCritSectLeave wrt rip]
    lea     r10, [g_pfnPDMCritSectLeave wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMCritSectLeave
    push    g_pfnPDMCritSectLeave
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMCritSectLeave)

___LazyLoad___PDMCritSectIsOwner:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMCritSectIsOwner wrt rip]
    lea     r10, [g_pfnPDMCritSectIsOwner wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMCritSectIsOwner
    push    g_pfnPDMCritSectIsOwner
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMCritSectIsOwner)

___LazyLoad___PDMCritSectIsOwnerEx:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMCritSectIsOwnerEx wrt rip]
    lea     r10, [g_pfnPDMCritSectIsOwnerEx wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMCritSectIsOwnerEx
    push    g_pfnPDMCritSectIsOwnerEx
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMCritSectIsOwnerEx)

___LazyLoad___PDMCritSectIsOwned:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMCritSectIsOwned wrt rip]
    lea     r10, [g_pfnPDMCritSectIsOwned wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMCritSectIsOwned
    push    g_pfnPDMCritSectIsOwned
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMCritSectIsOwned)

___LazyLoad___PDMCritSectIsInitialized:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMCritSectIsInitialized wrt rip]
    lea     r10, [g_pfnPDMCritSectIsInitialized wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMCritSectIsInitialized
    push    g_pfnPDMCritSectIsInitialized
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMCritSectIsInitialized)

___LazyLoad___PDMCritSectHasWaiters:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMCritSectHasWaiters wrt rip]
    lea     r10, [g_pfnPDMCritSectHasWaiters wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMCritSectHasWaiters
    push    g_pfnPDMCritSectHasWaiters
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMCritSectHasWaiters)

___LazyLoad___PDMCritSectGetRecursion:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMCritSectGetRecursion wrt rip]
    lea     r10, [g_pfnPDMCritSectGetRecursion wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMCritSectGetRecursion
    push    g_pfnPDMCritSectGetRecursion
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMCritSectGetRecursion)

___LazyLoad___PDMR3CritSectYield:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMR3CritSectYield wrt rip]
    lea     r10, [g_pfnPDMR3CritSectYield wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMR3CritSectYield
    push    g_pfnPDMR3CritSectYield
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMR3CritSectYield)

___LazyLoad___PDMR3CritSectName:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMR3CritSectName wrt rip]
    lea     r10, [g_pfnPDMR3CritSectName wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMR3CritSectName
    push    g_pfnPDMR3CritSectName
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMR3CritSectName)

___LazyLoad___PDMR3CritSectScheduleExitEvent:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMR3CritSectScheduleExitEvent wrt rip]
    lea     r10, [g_pfnPDMR3CritSectScheduleExitEvent wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMR3CritSectScheduleExitEvent
    push    g_pfnPDMR3CritSectScheduleExitEvent
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMR3CritSectScheduleExitEvent)

___LazyLoad___PDMR3CritSectDelete:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMR3CritSectDelete wrt rip]
    lea     r10, [g_pfnPDMR3CritSectDelete wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMR3CritSectDelete
    push    g_pfnPDMR3CritSectDelete
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMR3CritSectDelete)

___LazyLoad___PDMR3QueueDestroy:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMR3QueueDestroy wrt rip]
    lea     r10, [g_pfnPDMR3QueueDestroy wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMR3QueueDestroy
    push    g_pfnPDMR3QueueDestroy
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMR3QueueDestroy)

___LazyLoad___PDMQueueAlloc:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMQueueAlloc wrt rip]
    lea     r10, [g_pfnPDMQueueAlloc wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMQueueAlloc
    push    g_pfnPDMQueueAlloc
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMQueueAlloc)

___LazyLoad___PDMQueueInsert:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMQueueInsert wrt rip]
    lea     r10, [g_pfnPDMQueueInsert wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMQueueInsert
    push    g_pfnPDMQueueInsert
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMQueueInsert)

___LazyLoad___PDMQueueInsertEx:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMQueueInsertEx wrt rip]
    lea     r10, [g_pfnPDMQueueInsertEx wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMQueueInsertEx
    push    g_pfnPDMQueueInsertEx
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMQueueInsertEx)

___LazyLoad___PDMQueueR0Ptr:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMQueueR0Ptr wrt rip]
    lea     r10, [g_pfnPDMQueueR0Ptr wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMQueueR0Ptr
    push    g_pfnPDMQueueR0Ptr
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMQueueR0Ptr)

___LazyLoad___PDMQueueRCPtr:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMQueueRCPtr wrt rip]
    lea     r10, [g_pfnPDMQueueRCPtr wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMQueueRCPtr
    push    g_pfnPDMQueueRCPtr
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMQueueRCPtr)

___LazyLoad___PDMR3ThreadDestroy:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMR3ThreadDestroy wrt rip]
    lea     r10, [g_pfnPDMR3ThreadDestroy wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMR3ThreadDestroy
    push    g_pfnPDMR3ThreadDestroy
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMR3ThreadDestroy)

___LazyLoad___PDMR3ThreadIAmRunning:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMR3ThreadIAmRunning wrt rip]
    lea     r10, [g_pfnPDMR3ThreadIAmRunning wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMR3ThreadIAmRunning
    push    g_pfnPDMR3ThreadIAmRunning
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMR3ThreadIAmRunning)

___LazyLoad___PDMR3ThreadIAmSuspending:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMR3ThreadIAmSuspending wrt rip]
    lea     r10, [g_pfnPDMR3ThreadIAmSuspending wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMR3ThreadIAmSuspending
    push    g_pfnPDMR3ThreadIAmSuspending
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMR3ThreadIAmSuspending)

___LazyLoad___PDMR3ThreadResume:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMR3ThreadResume wrt rip]
    lea     r10, [g_pfnPDMR3ThreadResume wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMR3ThreadResume
    push    g_pfnPDMR3ThreadResume
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMR3ThreadResume)

___LazyLoad___PDMR3ThreadSleep:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMR3ThreadSleep wrt rip]
    lea     r10, [g_pfnPDMR3ThreadSleep wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMR3ThreadSleep
    push    g_pfnPDMR3ThreadSleep
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMR3ThreadSleep)

___LazyLoad___PDMR3ThreadSuspend:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMR3ThreadSuspend wrt rip]
    lea     r10, [g_pfnPDMR3ThreadSuspend wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMR3ThreadSuspend
    push    g_pfnPDMR3ThreadSuspend
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMR3ThreadSuspend)

___LazyLoad___PDMR3UsbCreateEmulatedDevice:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMR3UsbCreateEmulatedDevice wrt rip]
    lea     r10, [g_pfnPDMR3UsbCreateEmulatedDevice wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMR3UsbCreateEmulatedDevice
    push    g_pfnPDMR3UsbCreateEmulatedDevice
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMR3UsbCreateEmulatedDevice)

___LazyLoad___PDMR3UsbCreateProxyDevice:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMR3UsbCreateProxyDevice wrt rip]
    lea     r10, [g_pfnPDMR3UsbCreateProxyDevice wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMR3UsbCreateProxyDevice
    push    g_pfnPDMR3UsbCreateProxyDevice
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMR3UsbCreateProxyDevice)

___LazyLoad___PDMR3UsbDetachDevice:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMR3UsbDetachDevice wrt rip]
    lea     r10, [g_pfnPDMR3UsbDetachDevice wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMR3UsbDetachDevice
    push    g_pfnPDMR3UsbDetachDevice
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMR3UsbDetachDevice)

___LazyLoad___PDMR3UsbHasHub:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPDMR3UsbHasHub wrt rip]
    lea     r10, [g_pfnPDMR3UsbHasHub wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPDMR3UsbHasHub
    push    g_pfnPDMR3UsbHasHub
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PDMR3UsbHasHub)

___LazyLoad___PGMHandlerPhysicalPageTempOff:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPGMHandlerPhysicalPageTempOff wrt rip]
    lea     r10, [g_pfnPGMHandlerPhysicalPageTempOff wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPGMHandlerPhysicalPageTempOff
    push    g_pfnPGMHandlerPhysicalPageTempOff
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PGMHandlerPhysicalPageTempOff)

___LazyLoad___PGMPhysReadGCPtr:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPGMPhysReadGCPtr wrt rip]
    lea     r10, [g_pfnPGMPhysReadGCPtr wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPGMPhysReadGCPtr
    push    g_pfnPGMPhysReadGCPtr
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PGMPhysReadGCPtr)

___LazyLoad___PGMPhysSimpleDirtyWriteGCPtr:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPGMPhysSimpleDirtyWriteGCPtr wrt rip]
    lea     r10, [g_pfnPGMPhysSimpleDirtyWriteGCPtr wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPGMPhysSimpleDirtyWriteGCPtr
    push    g_pfnPGMPhysSimpleDirtyWriteGCPtr
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PGMPhysSimpleDirtyWriteGCPtr)

___LazyLoad___PGMPhysSimpleReadGCPtr:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPGMPhysSimpleReadGCPtr wrt rip]
    lea     r10, [g_pfnPGMPhysSimpleReadGCPtr wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPGMPhysSimpleReadGCPtr
    push    g_pfnPGMPhysSimpleReadGCPtr
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PGMPhysSimpleReadGCPtr)

___LazyLoad___PGMPhysSimpleWriteGCPhys:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPGMPhysSimpleWriteGCPhys wrt rip]
    lea     r10, [g_pfnPGMPhysSimpleWriteGCPhys wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPGMPhysSimpleWriteGCPhys
    push    g_pfnPGMPhysSimpleWriteGCPhys
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PGMPhysSimpleWriteGCPhys)

___LazyLoad___PGMPhysSimpleWriteGCPtr:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPGMPhysSimpleWriteGCPtr wrt rip]
    lea     r10, [g_pfnPGMPhysSimpleWriteGCPtr wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPGMPhysSimpleWriteGCPtr
    push    g_pfnPGMPhysSimpleWriteGCPtr
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PGMPhysSimpleWriteGCPtr)

___LazyLoad___PGMPhysWriteGCPtr:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPGMPhysWriteGCPtr wrt rip]
    lea     r10, [g_pfnPGMPhysWriteGCPtr wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPGMPhysWriteGCPtr
    push    g_pfnPGMPhysWriteGCPtr
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PGMPhysWriteGCPtr)

___LazyLoad___PGMShwMakePageWritable:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPGMShwMakePageWritable wrt rip]
    lea     r10, [g_pfnPGMShwMakePageWritable wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPGMShwMakePageWritable
    push    g_pfnPGMShwMakePageWritable
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PGMShwMakePageWritable)

___LazyLoad___PGMR3QueryGlobalMemoryStats:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPGMR3QueryGlobalMemoryStats wrt rip]
    lea     r10, [g_pfnPGMR3QueryGlobalMemoryStats wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPGMR3QueryGlobalMemoryStats
    push    g_pfnPGMR3QueryGlobalMemoryStats
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PGMR3QueryGlobalMemoryStats)

___LazyLoad___PGMR3QueryMemoryStats:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szPGMR3QueryMemoryStats wrt rip]
    lea     r10, [g_pfnPGMR3QueryMemoryStats wrt rip]
%elifdef RT_ARCH_X86
    push    g_szPGMR3QueryMemoryStats
    push    g_pfnPGMR3QueryMemoryStats
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(PGMR3QueryMemoryStats)

___LazyLoad___SSMR3Close:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3Close wrt rip]
    lea     r10, [g_pfnSSMR3Close wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3Close
    push    g_pfnSSMR3Close
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3Close)

___LazyLoad___SSMR3DeregisterExternal:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3DeregisterExternal wrt rip]
    lea     r10, [g_pfnSSMR3DeregisterExternal wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3DeregisterExternal
    push    g_pfnSSMR3DeregisterExternal
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3DeregisterExternal)

___LazyLoad___SSMR3DeregisterInternal:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3DeregisterInternal wrt rip]
    lea     r10, [g_pfnSSMR3DeregisterInternal wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3DeregisterInternal
    push    g_pfnSSMR3DeregisterInternal
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3DeregisterInternal)

___LazyLoad___SSMR3GetBool:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetBool wrt rip]
    lea     r10, [g_pfnSSMR3GetBool wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetBool
    push    g_pfnSSMR3GetBool
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetBool)

___LazyLoad___SSMR3GetGCPhys:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetGCPhys wrt rip]
    lea     r10, [g_pfnSSMR3GetGCPhys wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetGCPhys
    push    g_pfnSSMR3GetGCPhys
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetGCPhys)

___LazyLoad___SSMR3GetGCPhys32:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetGCPhys32 wrt rip]
    lea     r10, [g_pfnSSMR3GetGCPhys32 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetGCPhys32
    push    g_pfnSSMR3GetGCPhys32
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetGCPhys32)

___LazyLoad___SSMR3GetGCPhys64:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetGCPhys64 wrt rip]
    lea     r10, [g_pfnSSMR3GetGCPhys64 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetGCPhys64
    push    g_pfnSSMR3GetGCPhys64
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetGCPhys64)

___LazyLoad___SSMR3GetGCPtr:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetGCPtr wrt rip]
    lea     r10, [g_pfnSSMR3GetGCPtr wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetGCPtr
    push    g_pfnSSMR3GetGCPtr
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetGCPtr)

___LazyLoad___SSMR3GetGCUInt:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetGCUInt wrt rip]
    lea     r10, [g_pfnSSMR3GetGCUInt wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetGCUInt
    push    g_pfnSSMR3GetGCUInt
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetGCUInt)

___LazyLoad___SSMR3GetGCUIntPtr:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetGCUIntPtr wrt rip]
    lea     r10, [g_pfnSSMR3GetGCUIntPtr wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetGCUIntPtr
    push    g_pfnSSMR3GetGCUIntPtr
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetGCUIntPtr)

___LazyLoad___SSMR3GetGCUIntReg:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetGCUIntReg wrt rip]
    lea     r10, [g_pfnSSMR3GetGCUIntReg wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetGCUIntReg
    push    g_pfnSSMR3GetGCUIntReg
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetGCUIntReg)

___LazyLoad___SSMR3GetIOPort:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetIOPort wrt rip]
    lea     r10, [g_pfnSSMR3GetIOPort wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetIOPort
    push    g_pfnSSMR3GetIOPort
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetIOPort)

___LazyLoad___SSMR3GetMem:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetMem wrt rip]
    lea     r10, [g_pfnSSMR3GetMem wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetMem
    push    g_pfnSSMR3GetMem
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetMem)

___LazyLoad___SSMR3GetRCPtr:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetRCPtr wrt rip]
    lea     r10, [g_pfnSSMR3GetRCPtr wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetRCPtr
    push    g_pfnSSMR3GetRCPtr
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetRCPtr)

___LazyLoad___SSMR3GetS128:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetS128 wrt rip]
    lea     r10, [g_pfnSSMR3GetS128 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetS128
    push    g_pfnSSMR3GetS128
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetS128)

___LazyLoad___SSMR3GetS16:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetS16 wrt rip]
    lea     r10, [g_pfnSSMR3GetS16 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetS16
    push    g_pfnSSMR3GetS16
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetS16)

___LazyLoad___SSMR3GetS32:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetS32 wrt rip]
    lea     r10, [g_pfnSSMR3GetS32 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetS32
    push    g_pfnSSMR3GetS32
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetS32)

___LazyLoad___SSMR3GetS64:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetS64 wrt rip]
    lea     r10, [g_pfnSSMR3GetS64 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetS64
    push    g_pfnSSMR3GetS64
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetS64)

___LazyLoad___SSMR3GetS8:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetS8 wrt rip]
    lea     r10, [g_pfnSSMR3GetS8 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetS8
    push    g_pfnSSMR3GetS8
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetS8)

___LazyLoad___SSMR3GetSInt:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetSInt wrt rip]
    lea     r10, [g_pfnSSMR3GetSInt wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetSInt
    push    g_pfnSSMR3GetSInt
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetSInt)

___LazyLoad___SSMR3GetSel:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetSel wrt rip]
    lea     r10, [g_pfnSSMR3GetSel wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetSel
    push    g_pfnSSMR3GetSel
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetSel)

___LazyLoad___SSMR3GetStrZ:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetStrZ wrt rip]
    lea     r10, [g_pfnSSMR3GetStrZ wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetStrZ
    push    g_pfnSSMR3GetStrZ
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetStrZ)

___LazyLoad___SSMR3GetStrZEx:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetStrZEx wrt rip]
    lea     r10, [g_pfnSSMR3GetStrZEx wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetStrZEx
    push    g_pfnSSMR3GetStrZEx
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetStrZEx)

___LazyLoad___SSMR3GetStruct:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetStruct wrt rip]
    lea     r10, [g_pfnSSMR3GetStruct wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetStruct
    push    g_pfnSSMR3GetStruct
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetStruct)

___LazyLoad___SSMR3GetStructEx:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetStructEx wrt rip]
    lea     r10, [g_pfnSSMR3GetStructEx wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetStructEx
    push    g_pfnSSMR3GetStructEx
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetStructEx)

___LazyLoad___SSMR3GetU128:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetU128 wrt rip]
    lea     r10, [g_pfnSSMR3GetU128 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetU128
    push    g_pfnSSMR3GetU128
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetU128)

___LazyLoad___SSMR3GetU16:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetU16 wrt rip]
    lea     r10, [g_pfnSSMR3GetU16 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetU16
    push    g_pfnSSMR3GetU16
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetU16)

___LazyLoad___SSMR3GetU32:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetU32 wrt rip]
    lea     r10, [g_pfnSSMR3GetU32 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetU32
    push    g_pfnSSMR3GetU32
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetU32)

___LazyLoad___SSMR3GetU64:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetU64 wrt rip]
    lea     r10, [g_pfnSSMR3GetU64 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetU64
    push    g_pfnSSMR3GetU64
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetU64)

___LazyLoad___SSMR3GetU8:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetU8 wrt rip]
    lea     r10, [g_pfnSSMR3GetU8 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetU8
    push    g_pfnSSMR3GetU8
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetU8)

___LazyLoad___SSMR3GetUInt:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3GetUInt wrt rip]
    lea     r10, [g_pfnSSMR3GetUInt wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3GetUInt
    push    g_pfnSSMR3GetUInt
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3GetUInt)

___LazyLoad___SSMR3HandleGetAfter:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3HandleGetAfter wrt rip]
    lea     r10, [g_pfnSSMR3HandleGetAfter wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3HandleGetAfter
    push    g_pfnSSMR3HandleGetAfter
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3HandleGetAfter)

___LazyLoad___SSMR3HandleGetStatus:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3HandleGetStatus wrt rip]
    lea     r10, [g_pfnSSMR3HandleGetStatus wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3HandleGetStatus
    push    g_pfnSSMR3HandleGetStatus
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3HandleGetStatus)

___LazyLoad___SSMR3HandleHostBits:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3HandleHostBits wrt rip]
    lea     r10, [g_pfnSSMR3HandleHostBits wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3HandleHostBits
    push    g_pfnSSMR3HandleHostBits
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3HandleHostBits)

___LazyLoad___SSMR3HandleHostOSAndArch:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3HandleHostOSAndArch wrt rip]
    lea     r10, [g_pfnSSMR3HandleHostOSAndArch wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3HandleHostOSAndArch
    push    g_pfnSSMR3HandleHostOSAndArch
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3HandleHostOSAndArch)

___LazyLoad___SSMR3HandleIsLiveSave:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3HandleIsLiveSave wrt rip]
    lea     r10, [g_pfnSSMR3HandleIsLiveSave wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3HandleIsLiveSave
    push    g_pfnSSMR3HandleIsLiveSave
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3HandleIsLiveSave)

___LazyLoad___SSMR3HandleMaxDowntime:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3HandleMaxDowntime wrt rip]
    lea     r10, [g_pfnSSMR3HandleMaxDowntime wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3HandleMaxDowntime
    push    g_pfnSSMR3HandleMaxDowntime
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3HandleMaxDowntime)

___LazyLoad___SSMR3HandleReportLivePercent:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3HandleReportLivePercent wrt rip]
    lea     r10, [g_pfnSSMR3HandleReportLivePercent wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3HandleReportLivePercent
    push    g_pfnSSMR3HandleReportLivePercent
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3HandleReportLivePercent)

___LazyLoad___SSMR3HandleRevision:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3HandleRevision wrt rip]
    lea     r10, [g_pfnSSMR3HandleRevision wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3HandleRevision
    push    g_pfnSSMR3HandleRevision
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3HandleRevision)

___LazyLoad___SSMR3HandleSetStatus:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3HandleSetStatus wrt rip]
    lea     r10, [g_pfnSSMR3HandleSetStatus wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3HandleSetStatus
    push    g_pfnSSMR3HandleSetStatus
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3HandleSetStatus)

___LazyLoad___SSMR3HandleVersion:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3HandleVersion wrt rip]
    lea     r10, [g_pfnSSMR3HandleVersion wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3HandleVersion
    push    g_pfnSSMR3HandleVersion
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3HandleVersion)

___LazyLoad___SSMR3Open:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3Open wrt rip]
    lea     r10, [g_pfnSSMR3Open wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3Open
    push    g_pfnSSMR3Open
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3Open)

___LazyLoad___SSMR3PutBool:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutBool wrt rip]
    lea     r10, [g_pfnSSMR3PutBool wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutBool
    push    g_pfnSSMR3PutBool
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutBool)

___LazyLoad___SSMR3PutGCPhys:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutGCPhys wrt rip]
    lea     r10, [g_pfnSSMR3PutGCPhys wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutGCPhys
    push    g_pfnSSMR3PutGCPhys
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutGCPhys)

___LazyLoad___SSMR3PutGCPhys32:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutGCPhys32 wrt rip]
    lea     r10, [g_pfnSSMR3PutGCPhys32 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutGCPhys32
    push    g_pfnSSMR3PutGCPhys32
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutGCPhys32)

___LazyLoad___SSMR3PutGCPhys64:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutGCPhys64 wrt rip]
    lea     r10, [g_pfnSSMR3PutGCPhys64 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutGCPhys64
    push    g_pfnSSMR3PutGCPhys64
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutGCPhys64)

___LazyLoad___SSMR3PutGCPtr:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutGCPtr wrt rip]
    lea     r10, [g_pfnSSMR3PutGCPtr wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutGCPtr
    push    g_pfnSSMR3PutGCPtr
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutGCPtr)

___LazyLoad___SSMR3PutGCUInt:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutGCUInt wrt rip]
    lea     r10, [g_pfnSSMR3PutGCUInt wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutGCUInt
    push    g_pfnSSMR3PutGCUInt
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutGCUInt)

___LazyLoad___SSMR3PutGCUIntPtr:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutGCUIntPtr wrt rip]
    lea     r10, [g_pfnSSMR3PutGCUIntPtr wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutGCUIntPtr
    push    g_pfnSSMR3PutGCUIntPtr
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutGCUIntPtr)

___LazyLoad___SSMR3PutGCUIntReg:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutGCUIntReg wrt rip]
    lea     r10, [g_pfnSSMR3PutGCUIntReg wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutGCUIntReg
    push    g_pfnSSMR3PutGCUIntReg
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutGCUIntReg)

___LazyLoad___SSMR3PutIOPort:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutIOPort wrt rip]
    lea     r10, [g_pfnSSMR3PutIOPort wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutIOPort
    push    g_pfnSSMR3PutIOPort
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutIOPort)

___LazyLoad___SSMR3PutMem:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutMem wrt rip]
    lea     r10, [g_pfnSSMR3PutMem wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutMem
    push    g_pfnSSMR3PutMem
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutMem)

___LazyLoad___SSMR3PutRCPtr:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutRCPtr wrt rip]
    lea     r10, [g_pfnSSMR3PutRCPtr wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutRCPtr
    push    g_pfnSSMR3PutRCPtr
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutRCPtr)

___LazyLoad___SSMR3PutS128:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutS128 wrt rip]
    lea     r10, [g_pfnSSMR3PutS128 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutS128
    push    g_pfnSSMR3PutS128
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutS128)

___LazyLoad___SSMR3PutS16:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutS16 wrt rip]
    lea     r10, [g_pfnSSMR3PutS16 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutS16
    push    g_pfnSSMR3PutS16
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutS16)

___LazyLoad___SSMR3PutS32:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutS32 wrt rip]
    lea     r10, [g_pfnSSMR3PutS32 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutS32
    push    g_pfnSSMR3PutS32
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutS32)

___LazyLoad___SSMR3PutS64:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutS64 wrt rip]
    lea     r10, [g_pfnSSMR3PutS64 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutS64
    push    g_pfnSSMR3PutS64
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutS64)

___LazyLoad___SSMR3PutS8:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutS8 wrt rip]
    lea     r10, [g_pfnSSMR3PutS8 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutS8
    push    g_pfnSSMR3PutS8
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutS8)

___LazyLoad___SSMR3PutSInt:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutSInt wrt rip]
    lea     r10, [g_pfnSSMR3PutSInt wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutSInt
    push    g_pfnSSMR3PutSInt
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutSInt)

___LazyLoad___SSMR3PutSel:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutSel wrt rip]
    lea     r10, [g_pfnSSMR3PutSel wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutSel
    push    g_pfnSSMR3PutSel
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutSel)

___LazyLoad___SSMR3PutStrZ:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutStrZ wrt rip]
    lea     r10, [g_pfnSSMR3PutStrZ wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutStrZ
    push    g_pfnSSMR3PutStrZ
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutStrZ)

___LazyLoad___SSMR3PutStruct:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutStruct wrt rip]
    lea     r10, [g_pfnSSMR3PutStruct wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutStruct
    push    g_pfnSSMR3PutStruct
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutStruct)

___LazyLoad___SSMR3PutStructEx:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutStructEx wrt rip]
    lea     r10, [g_pfnSSMR3PutStructEx wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutStructEx
    push    g_pfnSSMR3PutStructEx
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutStructEx)

___LazyLoad___SSMR3PutU128:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutU128 wrt rip]
    lea     r10, [g_pfnSSMR3PutU128 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutU128
    push    g_pfnSSMR3PutU128
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutU128)

___LazyLoad___SSMR3PutU16:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutU16 wrt rip]
    lea     r10, [g_pfnSSMR3PutU16 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutU16
    push    g_pfnSSMR3PutU16
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutU16)

___LazyLoad___SSMR3PutU32:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutU32 wrt rip]
    lea     r10, [g_pfnSSMR3PutU32 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutU32
    push    g_pfnSSMR3PutU32
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutU32)

___LazyLoad___SSMR3PutU64:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutU64 wrt rip]
    lea     r10, [g_pfnSSMR3PutU64 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutU64
    push    g_pfnSSMR3PutU64
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutU64)

___LazyLoad___SSMR3PutU8:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutU8 wrt rip]
    lea     r10, [g_pfnSSMR3PutU8 wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutU8
    push    g_pfnSSMR3PutU8
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutU8)

___LazyLoad___SSMR3PutUInt:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3PutUInt wrt rip]
    lea     r10, [g_pfnSSMR3PutUInt wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3PutUInt
    push    g_pfnSSMR3PutUInt
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3PutUInt)

___LazyLoad___SSMR3Seek:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3Seek wrt rip]
    lea     r10, [g_pfnSSMR3Seek wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3Seek
    push    g_pfnSSMR3Seek
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3Seek)

___LazyLoad___SSMR3SetCfgError:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3SetCfgError wrt rip]
    lea     r10, [g_pfnSSMR3SetCfgError wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3SetCfgError
    push    g_pfnSSMR3SetCfgError
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3SetCfgError)

___LazyLoad___SSMR3SetLoadError:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3SetLoadError wrt rip]
    lea     r10, [g_pfnSSMR3SetLoadError wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3SetLoadError
    push    g_pfnSSMR3SetLoadError
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3SetLoadError)

___LazyLoad___SSMR3SetLoadErrorV:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3SetLoadErrorV wrt rip]
    lea     r10, [g_pfnSSMR3SetLoadErrorV wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3SetLoadErrorV
    push    g_pfnSSMR3SetLoadErrorV
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3SetLoadErrorV)

___LazyLoad___SSMR3Skip:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3Skip wrt rip]
    lea     r10, [g_pfnSSMR3Skip wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3Skip
    push    g_pfnSSMR3Skip
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3Skip)

___LazyLoad___SSMR3SkipToEndOfUnit:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3SkipToEndOfUnit wrt rip]
    lea     r10, [g_pfnSSMR3SkipToEndOfUnit wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3SkipToEndOfUnit
    push    g_pfnSSMR3SkipToEndOfUnit
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3SkipToEndOfUnit)

___LazyLoad___SSMR3ValidateFile:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3ValidateFile wrt rip]
    lea     r10, [g_pfnSSMR3ValidateFile wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3ValidateFile
    push    g_pfnSSMR3ValidateFile
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3ValidateFile)

___LazyLoad___SSMR3Cancel:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3Cancel wrt rip]
    lea     r10, [g_pfnSSMR3Cancel wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3Cancel
    push    g_pfnSSMR3Cancel
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3Cancel)

___LazyLoad___SSMR3RegisterExternal:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSSMR3RegisterExternal wrt rip]
    lea     r10, [g_pfnSSMR3RegisterExternal wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSSMR3RegisterExternal
    push    g_pfnSSMR3RegisterExternal
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(SSMR3RegisterExternal)

___LazyLoad___STAMR3Dump:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSTAMR3Dump wrt rip]
    lea     r10, [g_pfnSTAMR3Dump wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSTAMR3Dump
    push    g_pfnSTAMR3Dump
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(STAMR3Dump)

___LazyLoad___STAMR3Enum:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSTAMR3Enum wrt rip]
    lea     r10, [g_pfnSTAMR3Enum wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSTAMR3Enum
    push    g_pfnSTAMR3Enum
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(STAMR3Enum)

___LazyLoad___STAMR3Reset:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSTAMR3Reset wrt rip]
    lea     r10, [g_pfnSTAMR3Reset wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSTAMR3Reset
    push    g_pfnSTAMR3Reset
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(STAMR3Reset)

___LazyLoad___STAMR3Snapshot:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSTAMR3Snapshot wrt rip]
    lea     r10, [g_pfnSTAMR3Snapshot wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSTAMR3Snapshot
    push    g_pfnSTAMR3Snapshot
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(STAMR3Snapshot)

___LazyLoad___STAMR3SnapshotFree:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSTAMR3SnapshotFree wrt rip]
    lea     r10, [g_pfnSTAMR3SnapshotFree wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSTAMR3SnapshotFree
    push    g_pfnSTAMR3SnapshotFree
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(STAMR3SnapshotFree)

___LazyLoad___STAMR3GetUnit:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szSTAMR3GetUnit wrt rip]
    lea     r10, [g_pfnSTAMR3GetUnit wrt rip]
%elifdef RT_ARCH_X86
    push    g_szSTAMR3GetUnit
    push    g_pfnSTAMR3GetUnit
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(STAMR3GetUnit)

___LazyLoad___TMR3TimerSetCritSect:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMR3TimerSetCritSect wrt rip]
    lea     r10, [g_pfnTMR3TimerSetCritSect wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMR3TimerSetCritSect
    push    g_pfnTMR3TimerSetCritSect
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMR3TimerSetCritSect)

___LazyLoad___TMR3TimerLoad:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMR3TimerLoad wrt rip]
    lea     r10, [g_pfnTMR3TimerLoad wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMR3TimerLoad
    push    g_pfnTMR3TimerLoad
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMR3TimerLoad)

___LazyLoad___TMR3TimerSave:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMR3TimerSave wrt rip]
    lea     r10, [g_pfnTMR3TimerSave wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMR3TimerSave
    push    g_pfnTMR3TimerSave
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMR3TimerSave)

___LazyLoad___TMR3TimerDestroy:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMR3TimerDestroy wrt rip]
    lea     r10, [g_pfnTMR3TimerDestroy wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMR3TimerDestroy
    push    g_pfnTMR3TimerDestroy
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMR3TimerDestroy)

___LazyLoad___TMTimerFromMicro:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMTimerFromMicro wrt rip]
    lea     r10, [g_pfnTMTimerFromMicro wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMTimerFromMicro
    push    g_pfnTMTimerFromMicro
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMTimerFromMicro)

___LazyLoad___TMTimerFromMilli:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMTimerFromMilli wrt rip]
    lea     r10, [g_pfnTMTimerFromMilli wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMTimerFromMilli
    push    g_pfnTMTimerFromMilli
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMTimerFromMilli)

___LazyLoad___TMTimerFromNano:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMTimerFromNano wrt rip]
    lea     r10, [g_pfnTMTimerFromNano wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMTimerFromNano
    push    g_pfnTMTimerFromNano
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMTimerFromNano)

___LazyLoad___TMTimerGet:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMTimerGet wrt rip]
    lea     r10, [g_pfnTMTimerGet wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMTimerGet
    push    g_pfnTMTimerGet
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMTimerGet)

___LazyLoad___TMTimerGetFreq:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMTimerGetFreq wrt rip]
    lea     r10, [g_pfnTMTimerGetFreq wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMTimerGetFreq
    push    g_pfnTMTimerGetFreq
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMTimerGetFreq)

___LazyLoad___TMTimerGetMicro:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMTimerGetMicro wrt rip]
    lea     r10, [g_pfnTMTimerGetMicro wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMTimerGetMicro
    push    g_pfnTMTimerGetMicro
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMTimerGetMicro)

___LazyLoad___TMTimerGetMilli:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMTimerGetMilli wrt rip]
    lea     r10, [g_pfnTMTimerGetMilli wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMTimerGetMilli
    push    g_pfnTMTimerGetMilli
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMTimerGetMilli)

___LazyLoad___TMTimerGetNano:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMTimerGetNano wrt rip]
    lea     r10, [g_pfnTMTimerGetNano wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMTimerGetNano
    push    g_pfnTMTimerGetNano
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMTimerGetNano)

___LazyLoad___TMTimerIsActive:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMTimerIsActive wrt rip]
    lea     r10, [g_pfnTMTimerIsActive wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMTimerIsActive
    push    g_pfnTMTimerIsActive
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMTimerIsActive)

___LazyLoad___TMTimerIsLockOwner:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMTimerIsLockOwner wrt rip]
    lea     r10, [g_pfnTMTimerIsLockOwner wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMTimerIsLockOwner
    push    g_pfnTMTimerIsLockOwner
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMTimerIsLockOwner)

___LazyLoad___TMTimerLock:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMTimerLock wrt rip]
    lea     r10, [g_pfnTMTimerLock wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMTimerLock
    push    g_pfnTMTimerLock
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMTimerLock)

___LazyLoad___TMTimerR0Ptr:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMTimerR0Ptr wrt rip]
    lea     r10, [g_pfnTMTimerR0Ptr wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMTimerR0Ptr
    push    g_pfnTMTimerR0Ptr
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMTimerR0Ptr)

___LazyLoad___TMTimerR3Ptr:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMTimerR3Ptr wrt rip]
    lea     r10, [g_pfnTMTimerR3Ptr wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMTimerR3Ptr
    push    g_pfnTMTimerR3Ptr
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMTimerR3Ptr)

___LazyLoad___TMTimerRCPtr:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMTimerRCPtr wrt rip]
    lea     r10, [g_pfnTMTimerRCPtr wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMTimerRCPtr
    push    g_pfnTMTimerRCPtr
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMTimerRCPtr)

___LazyLoad___TMTimerSet:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMTimerSet wrt rip]
    lea     r10, [g_pfnTMTimerSet wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMTimerSet
    push    g_pfnTMTimerSet
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMTimerSet)

___LazyLoad___TMTimerSetFrequencyHint:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMTimerSetFrequencyHint wrt rip]
    lea     r10, [g_pfnTMTimerSetFrequencyHint wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMTimerSetFrequencyHint
    push    g_pfnTMTimerSetFrequencyHint
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMTimerSetFrequencyHint)

___LazyLoad___TMTimerSetMicro:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMTimerSetMicro wrt rip]
    lea     r10, [g_pfnTMTimerSetMicro wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMTimerSetMicro
    push    g_pfnTMTimerSetMicro
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMTimerSetMicro)

___LazyLoad___TMTimerSetMillies:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMTimerSetMillies wrt rip]
    lea     r10, [g_pfnTMTimerSetMillies wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMTimerSetMillies
    push    g_pfnTMTimerSetMillies
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMTimerSetMillies)

___LazyLoad___TMTimerSetNano:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMTimerSetNano wrt rip]
    lea     r10, [g_pfnTMTimerSetNano wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMTimerSetNano
    push    g_pfnTMTimerSetNano
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMTimerSetNano)

___LazyLoad___TMTimerSetRelative:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMTimerSetRelative wrt rip]
    lea     r10, [g_pfnTMTimerSetRelative wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMTimerSetRelative
    push    g_pfnTMTimerSetRelative
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMTimerSetRelative)

___LazyLoad___TMTimerStop:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMTimerStop wrt rip]
    lea     r10, [g_pfnTMTimerStop wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMTimerStop
    push    g_pfnTMTimerStop
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMTimerStop)

___LazyLoad___TMTimerToMicro:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMTimerToMicro wrt rip]
    lea     r10, [g_pfnTMTimerToMicro wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMTimerToMicro
    push    g_pfnTMTimerToMicro
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMTimerToMicro)

___LazyLoad___TMTimerToMilli:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMTimerToMilli wrt rip]
    lea     r10, [g_pfnTMTimerToMilli wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMTimerToMilli
    push    g_pfnTMTimerToMilli
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMTimerToMilli)

___LazyLoad___TMTimerToNano:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMTimerToNano wrt rip]
    lea     r10, [g_pfnTMTimerToNano wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMTimerToNano
    push    g_pfnTMTimerToNano
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMTimerToNano)

___LazyLoad___TMTimerUnlock:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMTimerUnlock wrt rip]
    lea     r10, [g_pfnTMTimerUnlock wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMTimerUnlock
    push    g_pfnTMTimerUnlock
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMTimerUnlock)

___LazyLoad___TMR3GetWarpDrive:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMR3GetWarpDrive wrt rip]
    lea     r10, [g_pfnTMR3GetWarpDrive wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMR3GetWarpDrive
    push    g_pfnTMR3GetWarpDrive
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMR3GetWarpDrive)

___LazyLoad___TMR3SetWarpDrive:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szTMR3SetWarpDrive wrt rip]
    lea     r10, [g_pfnTMR3SetWarpDrive wrt rip]
%elifdef RT_ARCH_X86
    push    g_szTMR3SetWarpDrive
    push    g_pfnTMR3SetWarpDrive
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(TMR3SetWarpDrive)

___LazyLoad___VMMGetCpu:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMMGetCpu wrt rip]
    lea     r10, [g_pfnVMMGetCpu wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMMGetCpu
    push    g_pfnVMMGetCpu
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMMGetCpu)

___LazyLoad___VMMGetSvnRev:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMMGetSvnRev wrt rip]
    lea     r10, [g_pfnVMMGetSvnRev wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMMGetSvnRev
    push    g_pfnVMMGetSvnRev
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMMGetSvnRev)

___LazyLoad___VMSetError:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMSetError wrt rip]
    lea     r10, [g_pfnVMSetError wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMSetError
    push    g_pfnVMSetError
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMSetError)

___LazyLoad___VMSetErrorV:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMSetErrorV wrt rip]
    lea     r10, [g_pfnVMSetErrorV wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMSetErrorV
    push    g_pfnVMSetErrorV
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMSetErrorV)

___LazyLoad___VMR3AtErrorDeregister:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3AtErrorDeregister wrt rip]
    lea     r10, [g_pfnVMR3AtErrorDeregister wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3AtErrorDeregister
    push    g_pfnVMR3AtErrorDeregister
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3AtErrorDeregister)

___LazyLoad___VMR3AtErrorRegister:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3AtErrorRegister wrt rip]
    lea     r10, [g_pfnVMR3AtErrorRegister wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3AtErrorRegister
    push    g_pfnVMR3AtErrorRegister
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3AtErrorRegister)

___LazyLoad___VMR3AtRuntimeErrorRegister:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3AtRuntimeErrorRegister wrt rip]
    lea     r10, [g_pfnVMR3AtRuntimeErrorRegister wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3AtRuntimeErrorRegister
    push    g_pfnVMR3AtRuntimeErrorRegister
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3AtRuntimeErrorRegister)

___LazyLoad___VMR3AtStateRegister:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3AtStateRegister wrt rip]
    lea     r10, [g_pfnVMR3AtStateRegister wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3AtStateRegister
    push    g_pfnVMR3AtStateRegister
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3AtStateRegister)

___LazyLoad___VMR3Create:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3Create wrt rip]
    lea     r10, [g_pfnVMR3Create wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3Create
    push    g_pfnVMR3Create
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3Create)

___LazyLoad___VMR3Destroy:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3Destroy wrt rip]
    lea     r10, [g_pfnVMR3Destroy wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3Destroy
    push    g_pfnVMR3Destroy
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3Destroy)

___LazyLoad___VMR3GetCpuCoreAndPackageIdFromCpuId:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3GetCpuCoreAndPackageIdFromCpuId wrt rip]
    lea     r10, [g_pfnVMR3GetCpuCoreAndPackageIdFromCpuId wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3GetCpuCoreAndPackageIdFromCpuId
    push    g_pfnVMR3GetCpuCoreAndPackageIdFromCpuId
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3GetCpuCoreAndPackageIdFromCpuId)

___LazyLoad___VMR3GetStateName:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3GetStateName wrt rip]
    lea     r10, [g_pfnVMR3GetStateName wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3GetStateName
    push    g_pfnVMR3GetStateName
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3GetStateName)

___LazyLoad___VMR3GetStateU:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3GetStateU wrt rip]
    lea     r10, [g_pfnVMR3GetStateU wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3GetStateU
    push    g_pfnVMR3GetStateU
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3GetStateU)

___LazyLoad___VMR3GetVM:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3GetVM wrt rip]
    lea     r10, [g_pfnVMR3GetVM wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3GetVM
    push    g_pfnVMR3GetVM
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3GetVM)

___LazyLoad___VMR3HotPlugCpu:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3HotPlugCpu wrt rip]
    lea     r10, [g_pfnVMR3HotPlugCpu wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3HotPlugCpu
    push    g_pfnVMR3HotPlugCpu
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3HotPlugCpu)

___LazyLoad___VMR3HotUnplugCpu:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3HotUnplugCpu wrt rip]
    lea     r10, [g_pfnVMR3HotUnplugCpu wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3HotUnplugCpu
    push    g_pfnVMR3HotUnplugCpu
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3HotUnplugCpu)

___LazyLoad___VMR3LoadFromFile:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3LoadFromFile wrt rip]
    lea     r10, [g_pfnVMR3LoadFromFile wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3LoadFromFile
    push    g_pfnVMR3LoadFromFile
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3LoadFromFile)

___LazyLoad___VMR3LoadFromStream:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3LoadFromStream wrt rip]
    lea     r10, [g_pfnVMR3LoadFromStream wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3LoadFromStream
    push    g_pfnVMR3LoadFromStream
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3LoadFromStream)

___LazyLoad___VMR3PowerOff:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3PowerOff wrt rip]
    lea     r10, [g_pfnVMR3PowerOff wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3PowerOff
    push    g_pfnVMR3PowerOff
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3PowerOff)

___LazyLoad___VMR3PowerOn:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3PowerOn wrt rip]
    lea     r10, [g_pfnVMR3PowerOn wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3PowerOn
    push    g_pfnVMR3PowerOn
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3PowerOn)

___LazyLoad___VMR3ReleaseUVM:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3ReleaseUVM wrt rip]
    lea     r10, [g_pfnVMR3ReleaseUVM wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3ReleaseUVM
    push    g_pfnVMR3ReleaseUVM
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3ReleaseUVM)

___LazyLoad___VMR3ReqCallNoWaitU:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3ReqCallNoWaitU wrt rip]
    lea     r10, [g_pfnVMR3ReqCallNoWaitU wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3ReqCallNoWaitU
    push    g_pfnVMR3ReqCallNoWaitU
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3ReqCallNoWaitU)

___LazyLoad___VMR3ReqCallU:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3ReqCallU wrt rip]
    lea     r10, [g_pfnVMR3ReqCallU wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3ReqCallU
    push    g_pfnVMR3ReqCallU
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3ReqCallU)

___LazyLoad___VMR3ReqCallVoidWaitU:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3ReqCallVoidWaitU wrt rip]
    lea     r10, [g_pfnVMR3ReqCallVoidWaitU wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3ReqCallVoidWaitU
    push    g_pfnVMR3ReqCallVoidWaitU
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3ReqCallVoidWaitU)

___LazyLoad___VMR3ReqCallWaitU:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3ReqCallWaitU wrt rip]
    lea     r10, [g_pfnVMR3ReqCallWaitU wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3ReqCallWaitU
    push    g_pfnVMR3ReqCallWaitU
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3ReqCallWaitU)

___LazyLoad___VMR3ReqFree:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3ReqFree wrt rip]
    lea     r10, [g_pfnVMR3ReqFree wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3ReqFree
    push    g_pfnVMR3ReqFree
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3ReqFree)

___LazyLoad___VMR3ReqPriorityCallWaitU:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3ReqPriorityCallWaitU wrt rip]
    lea     r10, [g_pfnVMR3ReqPriorityCallWaitU wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3ReqPriorityCallWaitU
    push    g_pfnVMR3ReqPriorityCallWaitU
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3ReqPriorityCallWaitU)

___LazyLoad___VMR3ReqWait:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3ReqWait wrt rip]
    lea     r10, [g_pfnVMR3ReqWait wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3ReqWait
    push    g_pfnVMR3ReqWait
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3ReqWait)

___LazyLoad___VMR3Reset:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3Reset wrt rip]
    lea     r10, [g_pfnVMR3Reset wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3Reset
    push    g_pfnVMR3Reset
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3Reset)

___LazyLoad___VMR3Resume:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3Resume wrt rip]
    lea     r10, [g_pfnVMR3Resume wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3Resume
    push    g_pfnVMR3Resume
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3Resume)

___LazyLoad___VMR3RetainUVM:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3RetainUVM wrt rip]
    lea     r10, [g_pfnVMR3RetainUVM wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3RetainUVM
    push    g_pfnVMR3RetainUVM
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3RetainUVM)

___LazyLoad___VMR3Save:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3Save wrt rip]
    lea     r10, [g_pfnVMR3Save wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3Save
    push    g_pfnVMR3Save
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3Save)

___LazyLoad___VMR3SetCpuExecutionCap:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3SetCpuExecutionCap wrt rip]
    lea     r10, [g_pfnVMR3SetCpuExecutionCap wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3SetCpuExecutionCap
    push    g_pfnVMR3SetCpuExecutionCap
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3SetCpuExecutionCap)

___LazyLoad___VMR3SetError:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3SetError wrt rip]
    lea     r10, [g_pfnVMR3SetError wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3SetError
    push    g_pfnVMR3SetError
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3SetError)

___LazyLoad___VMR3SetPowerOffInsteadOfReset:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3SetPowerOffInsteadOfReset wrt rip]
    lea     r10, [g_pfnVMR3SetPowerOffInsteadOfReset wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3SetPowerOffInsteadOfReset
    push    g_pfnVMR3SetPowerOffInsteadOfReset
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3SetPowerOffInsteadOfReset)

___LazyLoad___VMR3Suspend:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3Suspend wrt rip]
    lea     r10, [g_pfnVMR3Suspend wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3Suspend
    push    g_pfnVMR3Suspend
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3Suspend)

___LazyLoad___VMR3Teleport:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3Teleport wrt rip]
    lea     r10, [g_pfnVMR3Teleport wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3Teleport
    push    g_pfnVMR3Teleport
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3Teleport)

___LazyLoad___VMR3AtStateDeregister:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3AtStateDeregister wrt rip]
    lea     r10, [g_pfnVMR3AtStateDeregister wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3AtStateDeregister
    push    g_pfnVMR3AtStateDeregister
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3AtStateDeregister)

___LazyLoad___VMR3GetUVM:
%ifdef RT_ARCH_AMD64
    lea     rax, [g_szVMR3GetUVM wrt rip]
    lea     r10, [g_pfnVMR3GetUVM wrt rip]
%elifdef RT_ARCH_X86
    push    g_szVMR3GetUVM
    push    g_pfnVMR3GetUVM
%else
 %error "Unsupported architecture"
%endif
    call    LazyLoadResolver
%ifdef RT_ARCH_X86
    add     esp, 8h
%endif
    jmp     NAME(VMR3GetUVM)




;
; The module handle.
;
BEGINDATA
g_hMod RTCCPTR_DEF 0



;
;SUPR3DECL(int) SUPR3HardenedLdrLoadAppPriv(const char *pszFilename, PRTLDRMOD phLdrMod,
;                                           uint32_t fFlags, PRTERRINFO pErrInfo);
;
EXTERN_IMP2 SUPR3HardenedLdrLoadAppPriv
BEGINCODE

LazyLoading:
    mov     xCX, [g_hMod xWrtRIP]
    or      xCX, xCX
    jnz     .return

%ifdef ASM_CALL64_GCC
    xor     rcx, rcx               ; pErrInfo
    xor     rdx, rdx               ; fFlags (local load)
    lea     rsi, [g_hMod wrt rip]  ; phLdrMod
    lea     rdi, [g_szLibrary wrt rip] ; pszFilename
    sub     rsp, 08h
    call    IMP2(SUPR3HardenedLdrLoadAppPriv)
    add     rsp, 08h

%elifdef ASM_CALL64_MSC
    xor     r9, r9                 ; pErrInfo
    xor     r8, r8                 ; fFlags (local load)
    lea     rdx, [g_hMod wrt rip]  ; phLdrMod
    lea     rcx, [g_szLibrary wrt rip] ; pszFilename
    sub     rsp, 28h
    call    IMP2(SUPR3HardenedLdrLoadAppPriv)
    add     rsp, 28h

%elifdef RT_ARCH_X86
    sub     xSP, 0ch
    push    0              ; pErrInfo
    push    0              ; fFlags (local load)
    push    g_hMod         ; phLdrMod
    push    g_szLibrary    ; pszFilename
    call    IMP2(SUPR3HardenedLdrLoadAppPriv)
    add     esp, 1ch
%else
 %error "Unsupported architecture"
%endif
    or      eax, eax
    jz      .loadok
.badload:
    int3
    jmp     .badload
.loadok:
    mov     xCX, [g_hMod xWrtRIP]
.return:
    ret
LazyLoading_End:


;
;RTDECL(int) RTLdrGetSymbol(RTLDRMOD hLdrMod, const char *pszSymbol, void **ppvValue);
;
EXTERN_IMP2 RTLdrGetSymbol
BEGINCODE
LazyLoadResolver:
%ifdef RT_ARCH_AMD64
    push    rbp
    mov     rbp, rsp
    push    r15
    push    r14
    mov     r15, rax       ; name
    mov     r14, r10       ; ppfn
    push    r9
    push    r8
    push    rcx
    push    rdx
    push    r12
 %ifdef ASM_CALL64_GCC
    push    rsi
    push    rdi
    mov     r12, rsp
 %else
    mov     r12, rsp
    sub     rsp, 20h
 %endif
    and     rsp, 0fffffff0h ; Try make sure the stack is aligned

    call    LazyLoading    ; returns handle in rcx
 %ifdef ASM_CALL64_GCC
    mov     rdi, rcx       ; hLdrMod
    mov     rsi, r15       ; pszSymbol
    mov     rdx, r14       ; ppvValue
 %else
    mov     rdx, r15       ; pszSymbol
    mov     r8, r14        ; ppvValue
 %endif
    call    IMP2(RTLdrGetSymbol)
    or      eax, eax
    jz      .symok
.badsym:
    int3
    jmp     .badsym
.symok:

    mov     rsp, r12
 %ifdef ASM_CALL64_GCC
    pop     rdi
    pop     rsi
 %endif
    pop     r12
    pop     rdx
    pop     rcx
    pop     r8
    pop     r9
    pop     r14
    pop     r15
    leave

%elifdef RT_ARCH_X86
    push    ebp
    mov     ebp, esp
    push    eax
    push    ecx
    push    edx
    and     esp, 0fffffff0h

.loaded:
    mov     eax, [ebp + 4] ; value addr
    push    eax
    mov     edx, [ebp + 8] ; symbol name
    push    edx
    call    LazyLoading    ; returns handle in ecx
    mov     ecx, [g_hMod]
    call    IMP2(RTLdrGetSymbol)
    or      eax, eax
    jz      .symok
.badsym:
    int3
    jmp     .badsym
.symok:
    lea     esp, [ebp - 0ch]
    pop     edx
    pop     ecx
    pop     eax
    leave
%else
 %error "Unsupported architecture"
%endif
    ret
LazyLoadResolver_End:


